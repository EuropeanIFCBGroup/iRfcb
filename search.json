[{"path":"https://europeanifcbgroup.github.io/iRfcb/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Anders Torstensson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"iRfcb Tutorial","text":"can install package GitHub using devtools package: functions iRfcb require Python installed (see sections ). can download Python official website: python.org/downloads. Load iRfcb library:","code":"# install.packages(\"devtools\") devtools::install_github(\"EuropeanIFCBGroup/iRfcb\",                          dependencies = TRUE) library(iRfcb)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"download-sample-data","dir":"Articles","previous_headings":"Getting Started","what":"Download Sample Data","title":"iRfcb Tutorial","text":"get started, download sample data SMHI IFCB Plankton image reference library (Torstensson et al. 2024) following function:","code":"# Define data directory data_dir <- \"data\"  # Download and extract test data in the data folder ifcb_download_test_data(dest_dir = data_dir) ## Download and extraction complete."},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"extract-timestamps-from-ifcb-sample-filenames","dir":"Articles","previous_headings":"Extract Timestamps and Volumes","what":"Extract Timestamps from IFCB sample Filenames","title":"iRfcb Tutorial","text":"Extract timestamps filenames: ROI numbers:","code":"# Example sample names filenames <- c(\"D20230314T001205_IFCB134\",                \"D20230615T123045_IFCB135\")  # Convert filenames to timestamps timestamps <- ifcb_convert_filenames(filenames)  # Print result print(timestamps) ##                     sample           timestamp       date year month day ## 1 D20230314T001205_IFCB134 2023-03-14 00:12:05 2023-03-14 2023     3  14 ## 2 D20230615T123045_IFCB135 2023-06-15 12:30:45 2023-06-15 2023     6  15 ##       time ifcb_number ## 1 00:12:05     IFCB134 ## 2 12:30:45     IFCB135 # Example sample names filenames <- c(\"D20230314T001205_IFCB134_00023.png\",                \"D20230615T123045_IFCB135\")  # Convert filenames to timestamps timestamps <- ifcb_convert_filenames(filenames)  # Print result print(timestamps) ##                     sample           timestamp       date year month day ## 1 D20230314T001205_IFCB134 2023-03-14 00:12:05 2023-03-14 2023     3  14 ## 2 D20230615T123045_IFCB135 2023-06-15 12:30:45 2023-06-15 2023     6  15 ##       time ifcb_number roi ## 1 00:12:05     IFCB134  23 ## 2 12:30:45     IFCB135  NA"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"get-volume-analyzed-in-ml","dir":"Articles","previous_headings":"Extract Timestamps and Volumes","what":"Get Volume Analyzed in ml","title":"iRfcb Tutorial","text":"Get volume analyzed header/adc files:","code":"# Path to HDR file hdr_file <- \"data/data/2023/D20230314/D20230314T001205_IFCB134.hdr\"  # Calculate volume analyzed (in ml) volume_analyzed <- ifcb_volume_analyzed(hdr_file)  # Print result print(volume_analyzed) ## [1] 4.568676"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"get-runtime","dir":"Articles","previous_headings":"Extract Timestamps and Volumes","what":"Get Runtime","title":"iRfcb Tutorial","text":"Get runtime header file:","code":"# Get runtime from HDR-file run_time <- ifcb_get_runtime(hdr_file)  # Print result print(run_time) ## $runtime ## [1] 1200.853 ##  ## $inhibittime ## [1] 104.3704"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"extract--png-images-from-roi","dir":"Articles","previous_headings":"","what":"Extract .PNG Images from ROI","title":"iRfcb Tutorial","text":"Extract images sample: Extract specific ROIs: extract annotated images MATLAB files, please see Use MATLAB Annotated Files extract classified results MATLAB files, please see Classified Results MATLAB","code":"# All ROIs in sample ifcb_extract_pngs(\"data/data/2023/D20230314/D20230314T001205_IFCB134.roi\") ## Writing 1276 ROIs from D20230314T001205_IFCB134.roi to data/data/2023/D20230314/D20230314T001205_IFCB134 # Only ROI number 2 and 5 ifcb_extract_pngs(\"data/data/2023/D20230314/D20230314T003836_IFCB134.roi\",                   ROInumbers = c(2, 5)) ## Writing 2 ROIs from D20230314T003836_IFCB134.roi to data/data/2023/D20230314/D20230314T003836_IFCB134"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"particle-size-distribution","dir":"Articles","previous_headings":"PSD QC/QA","what":"Particle Size Distribution","title":"iRfcb Tutorial","text":"IFCB data can quality controlled analyzing particle size distribution (PSD) (Hayashi et al. prep). iRfcb uses code available https://github.com/kudelalab/PSD. running PSD quality check, ensure necessary Python environment set activated:","code":"# Define path to virtual environment env_path <- \"~/virtualenvs/iRfcb-test\" # Or your preferred venv path  # Install python virtual environment ifcb_py_install(envname = env_path)  # Run PSD quality control psd <- ifcb_psd(feature_folder = \"data/features/2023\",                 hdr_folder = \"data/data/2023\",                 save_data = FALSE,                 output_file = NULL,                 plot_folder = NULL,                 use_marker = FALSE,                 start_fit = 10,                 r_sqr = 0.5,                 beads = 10 ** 12,                 bubbles = 150,                 incomplete = c(1500, 3),                 missing_cells = 0.7,                 biomass = 1000,                 bloom = 5,                 humidity = 70) # Print output from PSD head(psd$fits) ## # A tibble: 5 × 8 ##   sample            a     k   R.2 max_ESD_diff capture_percent bead_run humidity ##   <chr>         <dbl> <dbl> <dbl>        <int>           <dbl> <lgl>       <dbl> ## 1 D20230314T… 5.90e 5 -1.88 0.713            3           0.955 FALSE        16.0 ## 2 D20230314T… 2.51e 5 -1.60 0.702            3           0.944 FALSE        16.0 ## 3 D20230810T… 3.36e 7 -2.73 0.955            4           0.919 FALSE        65.4 ## 4 D20230915T… 1.32e10 -5.54 0.989            2           0.967 FALSE        71.5 ## 5 D20230915T… 4.39e10 -6.03 0.981            3           0.961 FALSE        71.5 head(psd$flags) ## # A tibble: 2 × 2 ##   sample           flag          ##   <chr>            <chr>         ## 1 D20230915T091133 High Humidity ## 2 D20230915T093804 High Humidity # Plot PSD of the first sample plot <- ifcb_psd_plot(sample_name = psd$data$sample[1],                       data = psd$data,                       fits = psd$fits,                       start_fit = 10)  # Print the plot print(plot)"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"check-if-ifcb-is-near-land","dir":"Articles","previous_headings":"Geographical QC/QA","what":"Check if IFCB is Near Land","title":"iRfcb Tutorial","text":"determine IFCB near land (.e. harbor), examine position data .hdr files (vectors latitudes longitudes): accurate determination, detailed coastline .shp file may required (e.g. EEA Coastline Polygon). Refer help pages ifcb_is_near_land information.","code":"# Read HDR data and extract GPS position (when available) gps_data <- ifcb_read_hdr_data(\"data/data/\",                                gps_only = TRUE) ## Found 9 .hdr files. ## Processing completed. # Create new column with the results gps_data$near_land <- ifcb_is_near_land(gps_data$gpsLatitude,                                         gps_data$gpsLongitude,                                         distance = 100, # 100 meters from shore                                         shape = NULL) # Using the default NE 1:50m Land Polygon  # Print output head(gps_data) ##                     sample gpsLatitude gpsLongitude           timestamp ## 1 D20220522T000439_IFCB134          NA           NA 2022-05-22 00:04:39 ## 2 D20220522T003051_IFCB134          NA           NA 2022-05-22 00:30:51 ## 3 D20220712T210855_IFCB134          NA           NA 2022-07-12 21:08:55 ## 4 D20220712T222710_IFCB134          NA           NA 2022-07-12 22:27:10 ## 5 D20230314T001205_IFCB134    56.66883     12.11303 2023-03-14 00:12:05 ## 6 D20230314T003836_IFCB134    56.66884     12.11302 2023-03-14 00:38:36 ##         date year month day     time ifcb_number near_land ## 1 2022-05-22 2022     5  22 00:04:39     IFCB134        NA ## 2 2022-05-22 2022     5  22 00:30:51     IFCB134        NA ## 3 2022-07-12 2022     7  12 21:08:55     IFCB134        NA ## 4 2022-07-12 2022     7  12 22:27:10     IFCB134        NA ## 5 2023-03-14 2023     3  14 00:12:05     IFCB134     FALSE ## 6 2023-03-14 2023     3  14 00:38:36     IFCB134     FALSE"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"check-which-sub-basin-an-ifcb-sample-is-from","dir":"Articles","previous_headings":"Geographical QC/QA","what":"Check which sub-basin an IFCB sample is from","title":"iRfcb Tutorial","text":"identify specific sub-basin Baltic Sea (using custom shape-file) Imaging FlowCytobot (IFCB) sample collected, analyze position data:  function reads pre-packaged shapefile Baltic Sea, Kattegat, Skagerrak basins ‘iRfcb’ package default, user-supplied shapefile provided. shapefiles provided ‘iRfcb’ originate SHARK.","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check in which Baltic sea basin the points are in points_in_the_baltic <- ifcb_which_basin(latitudes,                                           longitudes,                                           shape_file = NULL) # Print output print(points_in_the_baltic) ## [1] \"13 - Arkona Basin\"   \"12 - Bornholm Basin\" \"16 - Kattegat\"       ## [4] \"17 - Skagerrak\" # Plot the points and the basins ifcb_which_basin(latitudes,                   longitudes,                   plot = TRUE,                   shape_file = NULL)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"check-whether-the-positions-are-within-the-baltic-sea-or-elsewhere","dir":"Articles","previous_headings":"Geographical QC/QA","what":"Check whether the positions are within the Baltic Sea or elsewhere","title":"iRfcb Tutorial","text":"check useful want apply classifier specifically phytoplankton Baltic Sea.  function reads land-buffered shapefile Baltic Sea Basin (including Öresund) ‘iRfcb’ package default, user-supplied shapefile provided.","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check if the points are in the Baltic Sea Basin points_in_the_baltic <- ifcb_is_in_basin(latitudes, longitudes)  # Print results print(points_in_the_baltic) ## [1]  TRUE  TRUE FALSE FALSE # Plot the points and the basin ifcb_is_in_basin(latitudes, longitudes, plot = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"find-missing-positions-from-rv-svea-ferrybox","dir":"Articles","previous_headings":"Geographical QC/QA","what":"Find missing positions from RV Svea Ferrybox","title":"iRfcb Tutorial","text":"function used SMHI collect match stored ferrybox positions available .hdr files. example ferrybox data file provided iRfcb data matching D20220522T000439_IFCB134.","code":"# Define path where ferrybox data are located ferrybox_folder <- \"data/ferrybox_data\"  # Get GPS position from ferrybox data positions <- ifcb_get_svea_position(gps_data$timestamp, ferrybox_folder)  # Print result head(positions) ##             timestamp gpsLatitude gpsLongitude ## 1 2022-05-22 00:04:39     55.0277      13.6142 ## 2 2022-05-22 00:30:51          NA           NA ## 3 2022-07-12 21:08:55          NA           NA ## 4 2022-07-12 22:27:10          NA           NA ## 5 2023-03-14 00:12:05          NA           NA ## 6 2023-03-14 00:38:36          NA           NA"},{"path":[]},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"png-directory","dir":"Articles","previous_headings":"Use MATLAB Annotated Files","what":"PNG Directory","title":"iRfcb Tutorial","text":"Summarize counts annotated images sample class levels. ‘hdr_folder’ can included add GPS positions sample data frame:","code":"# Summarise counts on sample level png_per_sample <- ifcb_summarize_png_data(png_folder = \"data/png\",                                           hdr_folder = \"data/data\",                                           sum_level = \"sample\")  head(png_per_sample) ## # A tibble: 6 × 13 ## # Groups:   sample, ifcb_number [3] ##   sample    ifcb_number class_name n_images roi_numbers gpsLatitude gpsLongitude ##   <chr>     <chr>       <chr>         <int> <chr>             <dbl>        <dbl> ## 1 D2022052… IFCB134     Ciliophora        1 5                    NA           NA ## 2 D2022052… IFCB134     Mesodiniu…        4 2, 6, 7, 8           NA           NA ## 3 D2022052… IFCB134     Strombidi…        1 3                    NA           NA ## 4 D2022052… IFCB134     Mesodiniu…        2 2, 3                 NA           NA ## 5 D2022071… IFCB134     Alexandri…        2 42, 164              NA           NA ## 6 D2022071… IFCB134     Strombidi…        2 34, 79               NA           NA ## # ℹ 6 more variables: timestamp <dttm>, date <date>, year <dbl>, month <dbl>, ## #   day <int>, time <chr> # Summarise counts on class level png_per_class <- ifcb_summarize_png_data(png_folder = \"data/png\",                                          sum_level = \"class\")  # Print output head(png_per_class) ## # A tibble: 6 × 2 ##   class_name                  n_images ##   <chr>                          <int> ## 1 Alexandrium_pseudogonyaulax        3 ## 2 Amphidnium-like                    1 ## 3 Chaetoceros_spp_chain              6 ## 4 Chaetoceros_spp_single_cell        3 ## 5 Ciliophora                        23 ## 6 Cryptomonadales                  245"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"matlab-files","dir":"Articles","previous_headings":"Use MATLAB Annotated Files","what":"MATLAB Files","title":"iRfcb Tutorial","text":"Count annotations MATLAB files, similar ifcb_summarize_png_data:","code":"# Summarize counts from MATLAB files mat_count <- ifcb_count_mat_annotations(manual_folder = \"data/manual\",                                         class2use_file = \"data/config/class2use.mat\",                                         skip_class = \"unclassified\", # Or class ID                                         sum_level = \"class\") # Or per \"sample\"  # Print output head(mat_count) ## # A tibble: 6 × 2 ##   class                           n ##   <chr>                       <int> ## 1 Alexandrium_pseudogonyaulax     3 ## 2 Amphidnium-like                 1 ## 3 Chaetoceros_spp_chain           6 ## 4 Chaetoceros_spp_single_cell     3 ## 5 Ciliophora                     23 ## 6 Cryptomonadales               245"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"run-image-gallery","dir":"Articles","previous_headings":"Use MATLAB Annotated Files","what":"Run Image Gallery","title":"iRfcb Tutorial","text":"visually inspect correct annotations, run image gallery. Individual images can selected list selected images can downloaded ‘correction_file’. file can used correct .mat annotations using ifcb_correct_annotation function.","code":"# Run Shiny app ifcb_run_image_gallery()"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"correct--mat-files-after-checking-images-in-the-app","dir":"Articles","previous_headings":"Use MATLAB Annotated Files","what":"Correct .mat Files After Checking Images in the App","title":"iRfcb Tutorial","text":"reviewing images gallery, correct .mat files using ‘correction file’ selected images:","code":"# Get class2use class_name <- ifcb_get_mat_names(\"data/config/class2use.mat\") class2use <- ifcb_get_mat_variable(\"data/config/class2use.mat\",                                    variable_name = class_name)  # Find the class id of unclassified unclassified_id <- which(grepl(\"unclassified\",                          class2use))  # Initialize the python session if not already set up # ifcb_py_install(envname = env_path) # If not already initialized  # Correct the annotation with the output from the image gallery ifcb_correct_annotation(manual_folder = \"data/manual\",                         out_folder = \"data/manual\",                         correction_file = \"data/manual/correction/Alexandrium_pseudogonyaulax_selected_images.txt\",                         correct_classid = unclassified_id)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"replace-specific-class-annotations","dir":"Articles","previous_headings":"Use MATLAB Annotated Files","what":"Replace Specific Class Annotations","title":"iRfcb Tutorial","text":"Replace instances specific class “unclassified” (class id 1):","code":"# Get class2use class_name <- ifcb_get_mat_names(\"data/config/class2use.mat\") class2use <- ifcb_get_mat_variable(\"data/config/class2use.mat\",                                    variable_name = class_name)  # Find the class id of Alexandrium_pseudogonyaulax ap_id <- which(grepl(\"Alexandrium_pseudogonyaulax\",                      class2use))  # Find the class id of unclassified unclassified_id <- which(grepl(\"unclassified\",                          class2use))  # Initialize the python session if not already set up # ifcb_py_install(envname = env_path) # If not already initialized  # Move all Alexandrium_pseudogonyaulax images to unclassified ifcb_replace_mat_values(manual_folder = \"data/manual\",                         out_folder = \"data/manual\",                         target_id = ap_id,                         new_id = unclassified_id)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"extract-annotated-images","dir":"Articles","previous_headings":"Use MATLAB Annotated Files","what":"Extract Annotated Images","title":"iRfcb Tutorial","text":"Extract annotated images, skipping “unclassified” (class id 1) category:","code":"# Extract .png images ifcb_extract_annotated_images(manual_folder = \"data/manual\",                               class2use_file = \"data/config/class2use.mat\",                               roi_folder = \"data/data\",                               out_folder = \"data/extracted_images\",                               skip_class = 1, # or \"unclassified\"                               verbose = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"verify-correction","dir":"Articles","previous_headings":"Use MATLAB Annotated Files","what":"Verify Correction","title":"iRfcb Tutorial","text":"Verify corrections applied:","code":"# Summarize new counts after correction png_per_class <- ifcb_summarize_png_data(png_folder = \"data/extracted_images\",                                          sum_level = \"class\")  # Print output head(png_per_class) ## # A tibble: 6 × 2 ##   class_name                         n_images ##   <chr>                                 <int> ## 1 Amphidnium-like                           1 ## 2 Chaetoceros_spp_chain                     6 ## 3 Chaetoceros_spp_single_cell               3 ## 4 Ciliophora                               23 ## 5 Cryptomonadales                         245 ## 6 Cylindrotheca_Nitzschia_longissima       47"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"png-directory-1","dir":"Articles","previous_headings":"Prepare Annotated Images for Publication","what":"PNG Directory","title":"iRfcb Tutorial","text":"Prepare PNG directory publication zip-archive, similar files SMHI IFCB Plankton image reference library (Torstensson et al. 2024):","code":"# Create zip-archive ifcb_zip_pngs(png_folder = \"data/extracted_images\",               zip_filename = \"data/zip/smhi_ifcb_skagerrak_kattegat_annotated_images_corrected.zip\",               readme_file = system.file(\"exdata/README-template.md\",                                          package = \"iRfcb\"), # Template icluded in `iRfcb`               email_address = \"tutorial@test.com\",               version = \"1.1\",               print_progress = FALSE) ## Creating README file... ## Creating MANIFEST.txt... ## Creating zip archive... ## Zip archive created successfully."},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"matlab-directory","dir":"Articles","previous_headings":"Prepare Annotated Images for Publication","what":"MATLAB Directory","title":"iRfcb Tutorial","text":"Prepare MATLAB directory publication zip-archive, similar files SMHI IFCB Plankton image reference library:","code":"# Create zip-archive ifcb_zip_matlab(manual_folder = \"data/manual\",                 features_folder = \"data/features\",                 class2use_file = \"data/config/class2use.mat\",                 zip_filename = \"data/zip/smhi_ifcb_skagerrak_kattegat_matlab_files_corrected.zip\",                 data_folder = \"data/data\",                 readme_file = system.file(\"exdata/README-template.md\",                                            package = \"iRfcb\"), # Template icluded in `iRfcb`                 matlab_readme_file = system.file(\"exdata/MATLAB-template.md\",                                                   package = \"iRfcb\"), # Template icluded in `iRfcb`                 email_address = \"tutorial@test.com\",                 version = \"1.1\",                 print_progress = FALSE) ## Listing all files... ## Copying manual files... ## Copying feature files... ## Copying data files... ## Copying class2use file... ## Creating README file... ## Creating MANIFEST.txt... ## Creating zip archive... ## Zip archive created successfully."},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"create-manifest-txt","dir":"Articles","previous_headings":"Prepare Annotated Images for Publication","what":"Create MANIFEST.txt","title":"iRfcb Tutorial","text":"Create manifest file zip packages:","code":"# Create MANIFEST.txt of the zip folder content ifcb_create_manifest(\"data/zip/\") ## MANIFEST.txt has been created at data/zip//MANIFEST.txt"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"extract-classified-results-from-a-sample","dir":"Articles","previous_headings":"Classified Results from MATLAB","what":"Extract Classified Results from a Sample","title":"iRfcb Tutorial","text":"Extract classified results sample:","code":"# Extract all classified images from a sample ifcb_extract_classified_images(sample = \"D20230810T113059_IFCB134\",                                classified_folder = \"data/classified\",                                roi_folder = \"data/data\",                                out_folder = \"data/classified_images\",                                taxa = \"All\", # or specify a particular taxa                                threshold = \"opt\") # or specify another threshold ## Writing 2747 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Heterocapsa_rotundata  ## Writing 519 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Cryptomonadales  ## Writing 464 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Dino_smaller_than_30unidentified  ## Writing 511 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/unclassified  ## Writing 6 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Ciliates  ## Writing 245 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Leptocylindrus_danicus_minimus  ## Writing 114 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Leptocylindrus_danicus  ## Writing 66 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Cylindrotheca_Nitzschia_longissima  ## Writing 23 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Chaetoceros_chain  ## Writing 6 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Dino_larger_than_30unidentified  ## Writing 23 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Prorocentrum_micans  ## Writing 51 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Scrippsiella_group  ## Writing 2 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Tripos_lineatus  ## Writing 1 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Cerataulina_pelagica  ## Writing 6 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Gymnodiniales_smaller_than_30  ## Writing 3 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Chaetoceros_single_cell  ## Writing 5 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Skeletonema_marinoi  ## Writing 1 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Enisiculifera_carinata  ## Writing 2 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Thalassiosira_gravida  ## Writing 2 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Pseudo-nitzschia_spp  ## Writing 1 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Octactis_speculum  ## Writing 3 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Guinardia_delicatula  ## Writing 1 ROIs from D20230810T113059_IFCB134.roi to data/classified_images/Thalassiosira_nordenskioeldii"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"read-feature-data","dir":"Articles","previous_headings":"Classified Results from MATLAB","what":"Read feature data","title":"iRfcb Tutorial","text":"Read feature files (.csv) folder:","code":"# Read feature files from a folder features <- ifcb_read_features(\"data/features/2023/\")  # Print output of first 10 columns from the first sample in the list head(features[[1]])[,1:10] ##   roi_number Area  Biovolume BoundingBox_xwidth BoundingBox_ywidth ConvexArea ## 1          2  446   6082.909                 31                 21        542 ## 2          3 4326 142783.030                111                 63       5186 ## 3          4 9739 336908.323                202                129      10581 ## 4          5  580   9186.802                 27                 28        602 ## 5          6 3927 120366.981                 99                 50       4191 ## 6          7  290   3111.748                 22                 20        335 ##   ConvexPerimeter Eccentricity EquivDiameter    Extent ## 1        87.24196    0.6006111      23.82991 0.6850998 ## 2       291.42030    0.8980639      74.21613 0.6186186 ## 3       505.83898    0.9753657     111.35565 0.3737432 ## 4        88.58696    0.3299815      27.17497 0.7671958 ## 5       265.49548    0.9016151      70.71076 0.7933333 ## 6        67.86613    0.3332706      19.21560 0.6590909 # Read only multiblob feature files multiblob_features <- ifcb_read_features(\"data/features/2023\", multiblob = TRUE)  # Print output of first 10 columns from the first sample in the list head(multiblob_features[[1]])[,1:10] ##   roi_number blob_number Area MajorAxisLength MinorAxisLength Eccentricity ## 1        154           1 3647       109.93092        45.00010    0.9123779 ## 2        154           2 1626        77.53922        30.74631    0.9180235 ## 3        214           1 7456       232.11148       122.61037    0.8490956 ## 4        214           2 4840       101.68493        68.30606    0.7407850 ## 5        214           3  910        54.18655        28.51088    0.8503847 ## 6        214           4  153        18.95031        10.93057    0.8168844 ##   Orientation ConvexArea EquivDiameter  Solidity ## 1    11.28171       4205      68.14327 0.8673008 ## 2    26.71876       2495      45.50041 0.6517034 ## 3    30.89332      23666      97.43343 0.3150511 ## 4   -35.88789       6955      78.50146 0.6959022 ## 5    27.00911       1551      34.03892 0.5867182 ## 6    48.78767        188      13.95728 0.8138298"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"read-a-summary-file","dir":"Articles","previous_headings":"Classified Results from MATLAB","what":"Read a Summary File","title":"iRfcb Tutorial","text":"Read summary file:","code":"# Read a MATLAB summary file generated by `countcells_allTBnew_user_training` summary_data <- ifcb_read_summary(\"data/classified/2023/summary/summary_allTB_2023.mat\",                                   biovolume = FALSE,                                   threshold = \"opt\")  # Print output head(summary_data) ## # A tibble: 6 × 12 ##   sample      timestamp           date        year month   day time  ifcb_number ##   <chr>       <dttm>              <date>     <dbl> <dbl> <int> <chr> <chr>       ## 1 D20230810T… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:3… IFCB134     ## 2 D20230810T… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:3… IFCB134     ## 3 D20230810T… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:3… IFCB134     ## 4 D20230810T… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:3… IFCB134     ## 5 D20230810T… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:3… IFCB134     ## 6 D20230810T… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:3… IFCB134     ## # ℹ 4 more variables: ml_analyzed <dbl>, species <chr>, counts <dbl>, ## #   counts_per_liter <dbl>"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"summarize-counts-biovolumes-and-carbon-content-from-classified-ifcb-data","dir":"Articles","previous_headings":"Classified Results from MATLAB","what":"Summarize counts, biovolumes and carbon content from classified IFCB data","title":"iRfcb Tutorial","text":"function calculates aggregated biovolumes carbon content Imaging FlowCytobot (IFCB) samples based feature MATLAB classification result files, without summarizing data MATLAB. Biovolumes converted carbon according Menden-Deuer Lessard (2000) individual regions interest (ROI), different conversion factors applied diatoms non-diatom protist. provided, also incorporates sample volume data HDR files compute biovolume carbon content per liter sample. See details help pages ifcb_summarize_biovolumes ifcb_extract_biovolumes.","code":"# Summarize biovolume data using IFCB data from the specified folders biovolume_data <- ifcb_summarize_biovolumes(feature_folder = \"data/features/2023\",                                             class_folder = \"data/classified\",                                             hdr_folder = \"data/data/2023\",                                             micron_factor = 1/3.4,                                             diatom_class = \"Bacillariophyceae\",                                             threshold = \"opt\") ## INFO: The following classes are considered NOT diatoms for carbon calculations: ## Ciliates ## Cryptomonadales ## Dino_larger_than_30unidentified ## Dino_smaller_than_30unidentified ## Enisiculifera_carinata ## Gymnodiniales_smaller_than_30 ## Heterocapsa_rotundata ## Octactis_speculum ## Prorocentrum_micans ## Scrippsiella_group ## Tripos_lineatus ## unclassified # Print output head(biovolume_data) ## # A tibble: 6 × 9 ##   sample       class counts biovolume_mm3 carbon_ug ml_analyzed counts_per_liter ##   <chr>        <chr>  <int>         <dbl>     <dbl>       <dbl>            <dbl> ## 1 D20230810T1… Cera…      1    0.00000175 0.0000839        3.17             315. ## 2 D20230810T1… Chae…     23    0.0000176  0.000901         3.17            7251. ## 3 D20230810T1… Chae…      3    0.00000118 0.0000674        3.17             946. ## 4 D20230810T1… Cili…      6    0.0000117  0.00159          3.17            1892. ## 5 D20230810T1… Cryp…    519    0.0000971  0.0151           3.17          163627. ## 6 D20230810T1… Cyli…     66    0.0000168  0.00101          3.17           20808. ## # ℹ 2 more variables: biovolume_mm3_per_liter <dbl>, carbon_ug_per_liter <dbl>"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"check-whether-a-class-name-is-a-diatom","dir":"Articles","previous_headings":"Taxonomical Data","what":"Check whether a class name is a diatom","title":"iRfcb Tutorial","text":"function takes list taxa names, cleans , retrieves corresponding classification records World Register Marine Species (WoRMS), checks belong specified diatom class. function uses first name (genus name) taxa classification. function can useful converting biovolumes carbon according Menden-Deuer Lessard (2000). See iRfcb:::vol2C_nondiatom iRfcb:::vol2C_lgdiatom carbon calculations (included NAMESPACE). default class diatoms defined Bacillariophyceae, may adjusted using diatom_class argument.","code":"# Read class2use file class2use <- ifcb_get_mat_variable(\"data/config/class2use.mat\")  # Create a dataframe with class name and result from `ifcb_is_diatom` class_list <- data.frame(class2use,                          is_diatom = ifcb_is_diatom(class2use))  # Print rows 10-15 of result class_list[10:15,] ##                     class2use is_diatom ## 10        Nodularia_spumigena     FALSE ## 11            Cryptomonadales     FALSE ## 12    Acanthoica_quattrospina     FALSE ## 13 Asterionellopsis_glacialis      TRUE ## 14                  Centrales      TRUE ## 15            Centrales_chain      TRUE"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"find-trophic-type-of-plankton-taxa","dir":"Articles","previous_headings":"Taxonomical Data","what":"Find trophic type of plankton taxa","title":"iRfcb Tutorial","text":"function takes list taxa names matches SMHI Trophic Type list used SHARK.","code":"# Example taxa names taxa_list <- c(\"Acanthoceras zachariasii\",                \"Nodularia spumigena\",                \"Acanthoica quattrospina\",                \"Noctiluca\",                \"Gymnodiniales\")  # Get trophic type for taxa trophic_type <- ifcb_get_trophic_type(taxa_list)  # Print result print(trophic_type) ## [1] \"AU\" \"AU\" \"MX\" \"HT\" \"NS\""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"shark-export","dir":"Articles","previous_headings":"","what":"SHARK export","title":"iRfcb Tutorial","text":"function used SMHI map IFCB data SHARK standard data delivery format. concludes tutorial iRfcb package. detailed information, refer package documentation. Happy analyzing!","code":"# Load column names stored from `iRfcb` shark_colnames <- ifcb_get_shark_colnames()  # Print column names print(shark_colnames) ##  [1] MYEAR                     STATN                     ##  [3] SAMPLING_PLATFORM         PROJ                      ##  [5] ORDERER                   SHIPC                     ##  [7] CRUISE_NO                 DATE_TIME                 ##  [9] SDATE                     TIMEZONE                  ## [11] STIME                     LATIT                     ## [13] LONGI                     POSYS                     ## [15] WADEP                     MSTAT                     ## [17] MPROG                     MNDEP                     ## [19] MXDEP                     SLABO                     ## [21] ACKR_SMP                  SMTYP                     ## [23] PDMET                     SMVOL                     ## [25] METFP                     IFCBNO                    ## [27] SMPNO                     LATNM                     ## [29] SFLAG                     TRPHY                     ## [31] APHIA_ID                  IMAGE_VERIFICATION        ## [33] COUNT                     ABUND                     ## [35] BIOVOL                    C_CONC                    ## [37] QFLAG                     COEFF                     ## [39] CLASS_NAME                CLASS_PD                  ## [41] CLASS_PR                  CLASS_PM                  ## [43] METOA                     COUNTPROG                 ## [45] ALABO                     ACKR_ANA                  ## [47] ANADATE                   METDC                     ## [49] TRAINING_SET              TRAINING_SET_ANNOTATED_BY ## [51] CLASSIFIER_CREATED_BY     CLASSIFIER_USED           ## [53] MANUAL_QC_DATE            PRE_FILTER_SIZE           ## <0 rows> (or 0-length row.names)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"iRfcb Tutorial","text":"","code":"## To cite package 'iRfcb' in publications use: ##  ##   Anders Torstensson (2024). I 'R' FlowCytobot (iRfcb): Tools for ##   Analyzing and Processing Data from the Imaging FlowCytobot. R package ##   version 0.3.3. https://doi.org/10.5281/zenodo.12533225 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {I 'R' FlowCytobot (iRfcb): Tools for Analyzing and Processing Data from the Imaging FlowCytobot}, ##     author = {Anders Torstensson}, ##     year = {2024}, ##     note = {R package version 0.3.3}, ##     url = {https://doi.org/10.5281/zenodo.12533225}, ##   }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/tutorial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"iRfcb Tutorial","text":"Hayashi, K., Walton, J., Lie, ., Smith, J. Kudela M. Using particle size distribution (PSD) automate imaging flow cytobot (IFCB) data quality coastal California, USA. prep. Menden-Deuer Susanne, Lessard Evelyn J., (2000), Carbon volume relationships dinoflagellates, diatoms, protist plankton, Limnology Oceanography, 3, doi: 10.4319/lo.2000.45.3.0569. Sosik, H. M. Olson, R. J. (2007) Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216. Torstensson, ., Skjevik, -T., Mohlin, M., Karlberg, M. Karlson, B. (2024). SMHI IFCB plankton image reference library. SciLifeLab. Dataset. https://doi.org/10.17044/scilifelab.25883455.v3","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anders Torstensson. Author, maintainer.            Swedish Meteorological Hydrological Institute","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anders Torstensson (2024). 'R' FlowCytobot (iRfcb): Tools Analyzing Processing Data Imaging FlowCytobot. R package version 0.3.3. https://doi.org/10.5281/zenodo.12533225","code":"@Manual{,   title = {I 'R' FlowCytobot (iRfcb): Tools for Analyzing and Processing Data from the Imaging FlowCytobot},   author = {Anders Torstensson},   year = {2024},   note = {R package version 0.3.3},   url = {https://doi.org/10.5281/zenodo.12533225}, }"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"I R FlowCytobot (iRfcb): Tools for Analyzing and Processing Data from the Imaging FlowCytobot","text":"iRfcb R package offers suite tools managing performing quality control plankton data generated Imaging FlowCytobot (IFCB). streamlines processing analysis IFCB data, facilitating preparation IFCB images data publication. especially useful researchers using, partly using, MATLAB ifcb-analysis package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"key-features","dir":"","previous_headings":"Overview","what":"Key Features","title":"I R FlowCytobot (iRfcb): Tools for Analyzing and Processing Data from the Imaging FlowCytobot","text":"Data Management: Comprehensive functions reading IFCB files, counting summarizing annotated classified image data, correcting annotated data. Quality Control: Tools geospatial quality control IFCB data analysis Particle Size Distribution. Image Extraction: Tools extract prepare images publication. Image Gallery: Interactive gallery viewing selecting IFCB images. Taxonomical Data: Tools handling analyzing taxonomic data calculating biomass concentration image data.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"I R FlowCytobot (iRfcb): Tools for Analyzing and Processing Data from the Imaging FlowCytobot","text":"can install package GitHub using devtools package: functions iRfcb require Python. can download Python official website: python.org/downloads. details, please visit project’s webpage.","code":"# install.packages(\"devtools\") devtools::install_github(\"EuropeanIFCBGroup/iRfcb\", dependencies = TRUE)"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"tutorial","dir":"","previous_headings":"Documentation and Tutorials","what":"Tutorial","title":"I R FlowCytobot (iRfcb): Tools for Analyzing and Processing Data from the Imaging FlowCytobot","text":"iRfcb Tutorial","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"reference","dir":"","previous_headings":"Documentation and Tutorials","what":"Reference","title":"I R FlowCytobot (iRfcb): Tools for Analyzing and Processing Data from the Imaging FlowCytobot","text":"Function Reference","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"repository","dir":"","previous_headings":"","what":"Repository","title":"I R FlowCytobot (iRfcb): Tools for Analyzing and Processing Data from the Imaging FlowCytobot","text":"details latest updates, visit GitHub repository.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"I R FlowCytobot (iRfcb): Tools for Analyzing and Processing Data from the Imaging FlowCytobot","text":"package licensed MIT License.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/create_package_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Create MANIFEST.txt — create_package_manifest","title":"Function to Create MANIFEST.txt — create_package_manifest","text":"function generates MANIFEST.txt file lists files specified paths, along sizes. recursively includes files directories skips paths exist. manifest excludes manifest file present list.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/create_package_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Create MANIFEST.txt — create_package_manifest","text":"","code":"create_package_manifest(paths, manifest_path = \"MANIFEST.txt\", temp_dir)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/create_package_manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Create MANIFEST.txt — create_package_manifest","text":"paths character vector paths files /directories include manifest. manifest_path character string specifying path manifest file. Default \"MANIFEST.txt\". temp_dir character string specifying temporary directory removed file paths.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Load iRfcb Python Environment on Package Load — .onLoad","title":"Load iRfcb Python Environment on Package Load — .onLoad","text":"function attempts use \"iRfcb\" Python virtual environment package loaded. virtualenv","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load iRfcb Python Environment on Package Load — .onLoad","text":"","code":".onLoad(..., envname = \"~/.virtualenvs/iRfcb\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load iRfcb Python Environment on Package Load — .onLoad","text":"... Additional arguments passed function. envname character string specifying name virtual environment create. Default \"~/.virtualenvs/iRfcb\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_aphia_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the AphiaID from the First Row of Each worms_records Tibble — extract_aphia_id","title":"Extract the AphiaID from the First Row of Each worms_records Tibble — extract_aphia_id","text":"function extracts AphiaID first row given worms_records tibble. tibble empty, returns NA.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_aphia_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the AphiaID from the First Row of Each worms_records Tibble — extract_aphia_id","text":"","code":"extract_aphia_id(record)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_aphia_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the AphiaID from the First Row of Each worms_records Tibble — extract_aphia_id","text":"record tibble containing worms_records least 'AphiaID' column.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_aphia_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the AphiaID from the First Row of Each worms_records Tibble — extract_aphia_id","text":"numeric value representing AphiaID first row tibble, NA tibble empty.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_aphia_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the AphiaID from the First Row of Each worms_records Tibble — extract_aphia_id","text":"","code":"# Example usage: record <- tibble::tibble(AphiaID = c(12345, 67890)) iRfcb:::extract_aphia_id(record) #> [1] 12345  empty_record <- tibble::tibble(AphiaID = numeric(0)) iRfcb:::extract_aphia_id(empty_record) #> [1] NA"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Class from the First Row of Each worms_records Tibble — extract_class","title":"Extract the Class from the First Row of Each worms_records Tibble — extract_class","text":"function extracts class first row given worms_records tibble. tibble empty, returns NA.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Class from the First Row of Each worms_records Tibble — extract_class","text":"","code":"extract_class(record)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Class from the First Row of Each worms_records Tibble — extract_class","text":"record tibble containing worms_records least 'class' column.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Class from the First Row of Each worms_records Tibble — extract_class","text":"character string representing class first row tibble, NA tibble empty.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Class from the First Row of Each worms_records Tibble — extract_class","text":"","code":"# Example usage: record <- tibble::tibble(class = c(\"Class1\", \"Class2\")) iRfcb:::extract_class(record) #> [1] \"Class1\"  empty_record <- tibble::tibble(class = character(0)) iRfcb:::extract_class(empty_record) #> [1] NA"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_parts.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Extract Parts Using Regular Expressions — extract_parts","title":"Function to Extract Parts Using Regular Expressions — extract_parts","text":"function extracts timestamp, IFCB number, date components filename.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_parts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Extract Parts Using Regular Expressions — extract_parts","text":"","code":"extract_parts(filename)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_parts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Extract Parts Using Regular Expressions — extract_parts","text":"filename character string specifying filename extract parts .","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/extract_parts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Extract Parts Using Regular Expressions — extract_parts","text":"data frame columns: sample, timestamp, date, year, month, day, time, ifcb_number.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/find_matching_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Find Matching Data Files with a General Pattern — find_matching_data","title":"Function to Find Matching Data Files with a General Pattern — find_matching_data","text":"function finds data files match base name given .mat file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/find_matching_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Find Matching Data Files with a General Pattern — find_matching_data","text":"","code":"find_matching_data(mat_file, data_files)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/find_matching_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Find Matching Data Files with a General Pattern — find_matching_data","text":"mat_file character string specifying path .mat file. data_files character vector paths data files search.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/find_matching_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Find Matching Data Files with a General Pattern — find_matching_data","text":"character vector matching data files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/find_matching_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Find Matching Feature Files with a General Pattern — find_matching_features","title":"Function to Find Matching Feature Files with a General Pattern — find_matching_features","text":"function finds feature files match base name given .mat file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/find_matching_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Find Matching Feature Files with a General Pattern — find_matching_features","text":"","code":"find_matching_features(mat_file, feature_files)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/find_matching_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Find Matching Feature Files with a General Pattern — find_matching_features","text":"mat_file character string specifying path .mat file. feature_files character vector paths feature files search.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/find_matching_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Find Matching Feature Files with a General Pattern — find_matching_features","text":"character vector matching feature files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/handle_missing_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Missing Positions by Rounding Timestamps — handle_missing_positions","title":"Handle Missing Positions by Rounding Timestamps — handle_missing_positions","text":"function handles missing GPS positions rounding timestamps nearest minute using specified rounding function, merging resulting timestamps ferrybox position data. updates missing latitude longitude values based rounded timestamps.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/handle_missing_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Missing Positions by Rounding Timestamps — handle_missing_positions","text":"","code":"handle_missing_positions(   data,   ferrybox_position,   rounding_function,   lat_col,   lon_col )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/handle_missing_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Missing Positions by Rounding Timestamps — handle_missing_positions","text":"data data frame containing timestamps GPS positions. ferrybox_position data frame containing timestamps GPS positions ferrybox. rounding_function function used round timestamps. can `lubridate::floor_date`, `lubridate::ceiling_date`, suitable rounding function. lat_col name new latitude column created. lon_col name new longitude column created.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/handle_missing_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle Missing Positions by Rounding Timestamps — handle_missing_positions","text":"data frame updated GPS positions positions missing. returned data frame contains original timestamps new columns latitude longitude based rounded timestamps.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/handle_missing_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle Missing Positions by Rounding Timestamps — handle_missing_positions","text":"","code":"# Example usage: data <- data.frame(timestamp = Sys.time() + 1:10 * 60,                    gpsLatitude = c(NA, runif(9)),                    gpsLongitude = c(NA, runif(9))) ferrybox_position <- data.frame(timestamp_minute = lubridate::round_date(Sys.time(),                                                                          \"minutes\") + 1:10 * 60,                                 ferrybox_latitude = runif(10),                                 ferrybox_longitude = runif(10)) if(lubridate::second(Sys.time()) < 30) {   updated_data <- iRfcb:::handle_missing_positions(data,                                                    ferrybox_position,                                                    lubridate::floor_date,                                                    \"gpsLatitude_floor\",                                                    \"gpsLongitude_floor\") } else {   updated_data <- iRfcb:::handle_missing_positions(data,                                                    ferrybox_position,                                                    lubridate::ceiling_date,                                                    \"gpsLatitude_ceiling\",                                                    \"gpsLongitude_ceiling\") }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"function converts IFCB filenames data frame separate columns sample name, full timestamp, year, month, day, time, IFCB number. ROI numbers included available.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"","code":"ifcb_convert_filenames(filenames)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"filenames character vector IFCB filenames format \"DYYYYMMDDTHHMMSS_IFCBxxx\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"data frame columns: sample, full_timestamp, year, month, day, time, ifcb_number.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"","code":"filenames <- c(\"D20230314T001205_IFCB134\", \"D20230615T123045_IFCB135\") timestamps <- ifcb_convert_filenames(filenames) print(timestamps) #>                     sample           timestamp       date year month day #> 1 D20230314T001205_IFCB134 2023-03-14 00:12:05 2023-03-14 2023     3  14 #> 2 D20230615T123045_IFCB135 2023-06-15 12:30:45 2023-06-15 2023     6  15 #>       time ifcb_number #> 1 00:12:05     IFCB134 #> 2 12:30:45     IFCB135"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"function corrects annotations MATLAB classlist files located specified manual folder, generated code `ifcb-analysis` repository (Sosik Olson 2007). replaces class ID specified regions interest (ROIs) classlist files based correction file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"","code":"ifcb_correct_annotation(   manual_folder,   out_folder,   correction_file,   correct_classid )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"manual_folder character string specifying path folder containing original MAT classlist files updated. out_folder character string specifying path folder updated MAT classlist files saved. correction_file character string specifying path correction file. correction file columns `class_folder` `image_filename`, `image_filename` used. correct_classid integer specifying class ID use corrections.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"function return value; updates classlist files specified output directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"function requires python interpreter installed. required python packages can installed virtual environment using `ifcb_py_install` correction file expected contain least two columns: `class_folder`, indicates folder class, `image_filename`, includes filenames images (without additional trailing information). function processes file, corrects annotations, saves updated files output folder. `correction_file` typically generated using Shiny app provides interactive interface browsing managing IFCB (Imaging FlowCytobot) image galleries. Shiny app can initialized using function `ifcb_run_image_gallery()`.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"","code":"if (FALSE) { # \\dontrun{ # Correct class ID in .mat classlist files ifcb_correct_annotation(\"input/manual\", \"output/manual\", \"corrections.txt\", 99) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"function processes .mat files, generated code `ifcb-analysis` repository (Sosik Olson 2007), specified folder count summarize annotations class based class2use information provided file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"","code":"ifcb_count_mat_annotations(   manual_folder,   class2use_file,   skip_class = NULL,   sum_level = \"class\" )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"manual_folder character string specifying path folder containing .mat files. class2use_file character string specifying path file containing class2use variable. skip_class numeric vector class IDs character vector class names excluded count. Default NULL. sum_level character string specifying level summarization. Options: \"sample\" \"class\" (default).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"data frame total count images per class per sample.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"","code":"if (FALSE) { # \\dontrun{ # Count annotations excluding specific class IDs result <- ifcb_count_mat_annotations(\"path/to/manual_folder\",                                      \"path/to/class2use_file\",                                      skip_class = c(99, 100)) print(result)  # Count annotations excluding a specific class name result <- ifcb_count_mat_annotations(\"path/to/manual_folder\",                                      \"path/to/class2use_file\",                                      skip_class = \"unclassified\") print(result) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a MANIFEST.txt File — ifcb_create_manifest","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"function generates MANIFEST.txt file listing files specified folder subfolders, along sizes bytes. function can optionally exclude existing MANIFEST.txt file generated list. manifest may useful archiving images.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"","code":"ifcb_create_manifest(   folder_path,   manifest_path = file.path(folder_path, \"MANIFEST.txt\"),   exclude_manifest = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"folder_path character string specifying path folder whose files listed. manifest_path character string specifying path name MANIFEST.txt file created. Defaults \"folder_path/MANIFEST.txt\". exclude_manifest logical value indicating whether exclude existing MANIFEST.txt file list. Defaults TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"return value, called side effects. Creates MANIFEST.txt file specified location.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"","code":"if (FALSE) { # \\dontrun{ # Create a MANIFEST.txt file for the current directory ifcb_create_manifest(\".\")  # Create a MANIFEST.txt file for a specific directory, excluding an existing MANIFEST.txt file ifcb_create_manifest(\"path/to/directory\")  # Create a MANIFEST.txt file and save it to a specific path ifcb_create_manifest(\"path/to/directory\", manifest_path = \"path/to/manifest/MANIFEST.txt\")  # Create a MANIFEST.txt file without excluding an existing MANIFEST.txt file ifcb_create_manifest(\"path/to/directory\", exclude_manifest = FALSE) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Test IFCB Data — ifcb_download_test_data","title":"Download Test IFCB Data — ifcb_download_test_data","text":"function downloads zip archive containing MATLAB files `iRfcb` dataset available SMHI IFCB plankton image reference library (Torstensson et al. 2024), unzips specified folder extracts png images. data can used, instance, testing iRfcb creating tutorial vignette using vignette(\"tutorial\", package = \"iRfcb\")","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Test IFCB Data — ifcb_download_test_data","text":"","code":"ifcb_download_test_data(   dest_dir,   figshare_article = \"48158716\",   max_retries = 3 )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Test IFCB Data — ifcb_download_test_data","text":"dest_dir destination directory files unzipped. figshare_article file article number SciLifeLab Figshare data repository. default, iRfcb test dataset (48158716) Torstensson et al. (2024) used. max_retries maximum number retry attempts case download failure. Default 3.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download Test IFCB Data — ifcb_download_test_data","text":"Torstensson, Anders; Skjevik, Ann-Turi; Mohlin, Malin; Karlberg, Maria; Karlson, Bengt (2024). SMHI IFCB plankton image reference library. SciLifeLab. Dataset. doi:10.17044/scilifelab.25883455.v3","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Test IFCB Data — ifcb_download_test_data","text":"","code":"if (FALSE) { # \\dontrun{ # Download and unzip IFCB test data into the \"data\" directory ifcb_download_test_data(\"data\") } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"function extracts labelled images IFCB (Imaging FlowCytobot) data, annotated using MATLAB code `ifcb-analysis` repository (Sosik Olson 2007). reads manually classified data, maps class indices class names, extracts corresponding Region Interest (ROI) images, saving specified directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"","code":"ifcb_extract_annotated_images(   manual_folder,   class2use_file,   roi_folder,   out_folder,   skip_class = NA,   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"manual_folder character string specifying path directory containing manually classified .mat files. class2use_file character string specifying path file containing class names. roi_folder character string specifying path directory containing ROI files. out_folder character string specifying output directory extracted images saved. skip_class numeric vector class IDs character vector class names excluded count. Default NULL. verbose logical value indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"None. function saves extracted PNG images specified output directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"","code":"if (FALSE) { # \\dontrun{ ifcb_extract_annotated_images(   manual_folder = \"path/to/manual_folder\",   class2use_file = \"path/to/class2use_file.mat\",   roi_folder = \"path/to/roi_folder\",   out_folder = \"path/to/out_folder\",   skip_class = 1 ) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"function reads biovolume data feature files generated `ifcb-analysis` repository (Sosik Olson 2007) matches corresponding classification results. calculates biovolume cubic micrometer determines class diatom based World Register Marine Species (WoRMS). Carbon content computed roi using specific conversion functions depending whether class identified diatom , according Menden-Deuer Lessard 2000.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"","code":"ifcb_extract_biovolumes(   feature_folder,   class_folder,   micron_factor = 1/3.4,   diatom_class = \"Bacillariophyceae\",   threshold = \"opt\",   multiblob = FALSE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"feature_folder Path folder containing feature files. class_folder Path folder containing class files. micron_factor Conversion factor biovolume cubic microns. Default 1 / 3.4. diatom_class string vector diatom class names World Register Marine Species (WoRMS). Default \"Bacillariophyceae\". threshold Threshold selecting class information (\"opt\" , default \"opt\"). multiblob logical indicating whether include multiblob features. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"data frame containing sample, roi_number, class, biovolume_um3, computed carbon_pg.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"function combines biovolume data extracted feature files class information read corresponding class files. determines class diatom based user-defined criteria computes carbon content using conversion functions specific diatoms non-diatom protists.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"Menden-Deuer Susanne, Lessard Evelyn J., (2000), Carbon volume relationships dinoflagellates, diatoms, protist plankton, Limnology Oceanography, 3, doi: 10.4319/lo.2000.45.3.0569. Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: feature_folder <- \"data/features\" class_folder <- \"data/classified\" biovolume_df <- ifcb_extract_biovolumes(feature_folder, class_folder) print(biovolume_df) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"function reads MATLAB classified sample file (.mat) generated `start_classify_batch_user_training` function `ifcb-analysis` repository (Sosik Olson 2007), extracts specified taxa images corresponding ROI files, saves image specified directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"","code":"ifcb_extract_classified_images(   sample,   classified_folder,   roi_folder,   out_folder,   taxa = \"All\",   threshold = \"opt\" )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"sample character string specifying sample name. classified_folder character string specifying directory containing classified files. roi_folder character string specifying directory containing ROI files. out_folder character string specifying directory save extracted images. taxa character string specifying taxa extract. Default \"\". threshold character string specifying threshold use (\"none\", \"opt\", \"adhoc\"). Default \"opt\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"return value, called side effects. Extracts saves taxa images directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"","code":"if (FALSE) { # \\dontrun{ # Define the parameters sample <- \"D20230311T092911_IFCB135\" classified_folder <- \"path/to/classified_folder\" roi_folder <- \"path/to/roi_folder\" out_folder <- \"path/to/outputdir\" taxa <- \"All\"  # or specify a particular taxa threshold <- \"opt\"  # or specify another threshold  # Extract taxa images from the classified sample ifcb_extract_classified_images(sample, classified_folder, roi_folder, out_folder, taxa, threshold) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Images from IFCB ROI File — ifcb_extract_pngs","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"function reads IFCB (.roi) file corresponding .adc file, extracts regions interest (ROIs), saves ROI PNG image specified directory. Optionally, can specify ROI numbers extract, useful specific ROIs manual automatic classification results.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"","code":"ifcb_extract_pngs(   roi_file,   out_folder = dirname(roi_file),   ROInumbers = NULL,   taxaname = NULL,   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"roi_file character string specifying path .roi file. out_folder character string specifying directory PNG images saved. Defaults directory ROI file. ROInumbers optional numeric vector specifying ROI numbers extract. NULL, ROIs valid dimensions extracted. taxaname optional character string specifying taxa name organizing images subdirectories. Defaults NULL. verbose logical value indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"function called side effects: writes PNG images directory.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"","code":"if (FALSE) { # \\dontrun{ # Convert ROI file to PNG images ifcb_extract_pngs(\"path/to/your_roi_file.roi\")  # Extract specific ROI numbers from ROI file ifcb_extract_pngs(\"path/to/your_roi_file.roi\", \"output_directory\", ROInumbers = c(1, 2, 3)) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Variable Names from a MAT File — ifcb_get_mat_names","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"function reads .mat file generated `ifcb-analysis` repository (Sosik Olson 2007) retrieves names variables stored within .","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"","code":"ifcb_get_mat_names(mat_file)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"mat_file character string specifying path .mat file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"character vector variable names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"","code":"if (FALSE) { # \\dontrun{ # Get variable names from a MAT file variables <- ifcb_get_mat_names(\"path/to/file.mat\") print(variables) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Classes from a MAT File — ifcb_get_mat_variable","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"function reads specified variable .mat file generated `ifcb-analysis` repository (Sosik Olson 2007). can used, example, extract lists classes file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"","code":"ifcb_get_mat_variable(mat_file, variable_name = \"class2use\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"mat_file character string specifying path .mat file containing class information. variable_name character string specifying variable name .mat file contains class information. default \"class2use\". examples include \"class2use.manual\" manual file, \"class2use.auto\" class list used automatic assignment. can find available variable names using function ifcb_get_mat_names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"character vector class names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"","code":"if (FALSE) { # \\dontrun{ # Get class names from a class2use file classes <- ifcb_get_mat_variable(\"path/to/class2use.mat\", \"class2use\") print(classes)  # Get class names from a classifier file class2useTB <- ifcb_get_mat_variable(\"path/to/classified/sample.mat\", \"class2useTB\") print(class2useTB) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"function imports IFCB header file (either local path URL), extracts specific target values runtime inhibittime, returns structured format. R equivalent function `IFCBxxx_readhdr` `ifcb-analysis` repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"","code":"ifcb_get_runtime(hdr_file)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"hdr_file character string specifying full path .hdr file URL.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"list (hdr) containing runtime, inhibittime, runType (available) extracted header file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Read and extract information from an IFCB header file hdr_info <- ifcb_get_runtime(\"path/to/IFCB_hdr_file.hdr\") print(hdr_info) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Shark Column Names — ifcb_get_shark_colnames","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"function reads SHARK column names specified tab-separated values (TSV) file included package. columns used submitting IFCB data https://sharkweb.smhi.se/.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"","code":"ifcb_get_shark_colnames()"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"data frame containing shark column names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"","code":"if (FALSE) { # \\dontrun{ shark_colnames <- ifcb_get_shark_colnames() print(shark_colnames) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_svea_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GPS Coordinates from Ferrybox Data Based on Timestamps — ifcb_get_svea_position","title":"Get GPS Coordinates from Ferrybox Data Based on Timestamps — ifcb_get_svea_position","text":"internal SMHI function reads .txt files specified folder containing ferrybox data, filters based specified ship name (default \"SveaFB\" R/V Svea), extracts GPS coordinates timestamps (nearest minute) falling within date ranges defined file names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_svea_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GPS Coordinates from Ferrybox Data Based on Timestamps — ifcb_get_svea_position","text":"","code":"ifcb_get_svea_position(timestamps, ferrybox_folder, ship = \"SveaFB\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_svea_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GPS Coordinates from Ferrybox Data Based on Timestamps — ifcb_get_svea_position","text":"timestamps vector POSIXct timestamps GPS coordinates retrieved. ferrybox_folder Path folder containing ferrybox .txt files. ship Name ship filter ferrybox files (default \"SveaFB\").","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_svea_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GPS Coordinates from Ferrybox Data Based on Timestamps — ifcb_get_svea_position","text":"data frame containing input timestamps corresponding GPS coordinates.   Columns include 'timestamp', 'gpsLatitude', 'gpsLongitude'.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_svea_position.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GPS Coordinates from Ferrybox Data Based on Timestamps — ifcb_get_svea_position","text":"","code":"if (FALSE) { # \\dontrun{ ferrybox_folder <- \"/path/to/ferrybox/data\" timestamps <- as.POSIXct(c(\"2016-08-10 10:47:34 UTC\",                            \"2016-08-10 11:12:21 UTC\",                            \"2016-08-10 11:35:59 UTC\"))  result <- ifcb_get_svea_position(timestamps, ferrybox_folder) print(result) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"function matches specified list taxa summarized list trophic types              various plankton taxa Northern Europe (data sourced `SMHI Trophic Type`).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"","code":"ifcb_get_trophic_type(taxa_list = NULL, print_complete_list = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"taxa_list character vector scientific names trophic types retrieved. print_complete_list Logical, TRUE, prints complete list summarized trophic types.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"character vector trophic types corresponding scientific names taxa_list, data frame containing taxa trophic types available `SMHI Trophic Type` list.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"multiple trophic types scientific name (.e. AU HT size classes), summarized trophic type \"NS\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"","code":"# Example usage: taxa_list <- c(\"Acanthoceras zachariasii\",                \"Nodularia spumigena\",                \"Acanthoica quattrospina\",                \"Noctiluca\",                \"Gymnodiniales\")  ifcb_get_trophic_type(taxa_list) #> [1] \"AU\" \"AU\" \"MX\" \"HT\" \"NS\""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Diatoms in Taxa List — ifcb_is_diatom","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"function takes list taxa names, cleans , retrieves corresponding classification records World Register Marine Species (WoRMS), checks belong specified diatom class. function uses first name (genus name) taxa classification.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"","code":"ifcb_is_diatom(taxa_list, diatom_class = \"Bacillariophyceae\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"taxa_list character vector containing list taxa names. diatom_class character string vector specifying class name(s) identified diatoms, according WoRMS. Default \"Bacillariophyceae\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"logical vector indicating whether cleaned taxa name belongs specified diatom class.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"","code":"taxa_list <- c(\"Nitzschia_sp\", \"Chaetoceros_sp\", \"Dinophysis_norvegica\", \"Thalassiosira_sp\") ifcb_is_diatom(taxa_list) #> [1]  TRUE  TRUE FALSE  TRUE"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"function checks vectors latitude longitude points within user-supplied sea basin. Baltic Sea (including Öresund) basins included pre-packaged shapefile `iRfcb` package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"","code":"ifcb_is_in_basin(latitudes, longitudes, plot = FALSE, shape_file = NULL)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"latitudes numeric vector latitude points. longitudes numeric vector longitude points. plot boolean indicating whether plot points sea basin. Default FALSE. shape_file absolute path custom polygon shapefile WGS84 (EPSG:4326) represents specific sea basin. Default land-buffered shapefile Baltic Sea basins (including Öresund), included `iRfcb` package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"logical vector indicating whether point within specified sea basin, plot points basins `plot = TRUE`.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"function reads pre-packaged shapefile Baltic Sea Basin `iRfcb` package default, user-supplied          shapefile provided. sets CRS, transforms CRS WGS84 (EPSG:4326) necessary, checks given points          fall within specified sea basin. Optionally, plots points sea basin polygons together.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check if the points are in the Baltic Sea Basin points_in_the_baltic <- ifcb_is_in_basin(latitudes, longitudes) print(points_in_the_baltic) #> [1]  TRUE  TRUE FALSE FALSE  # Plot the points and the basin ifcb_is_in_basin(latitudes, longitudes, plot = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Positions are Near Land — ifcb_is_near_land","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"Determines whether given positions near land based buffered coastline.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"","code":"ifcb_is_near_land(   latitudes,   longitudes,   distance = 500,   shape = NULL,   crs = 4326,   utm_zone = 33,   remove_small_islands = TRUE,   small_island_threshold = 2e+06 )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"latitudes Numeric vector latitudes positions. longitudes Numeric vector longitudes positions. distance Buffer distance meters around coastline. Default 500 m. shape Optional path shapefile containing coastline data. provided, function use shapefile instead default Natural Earth 1:50m land vectors. Using detailed shapefile allows smaller buffer distance. detailed European coastlines, download polygons EEA https://www.eea.europa.eu/data--maps/data/eea-coastline--analysis-2/gis-data/eea-coastline-polygon. detailed world maps, download Natural Earth https://www.naturalearthdata.com/downloads/10m-physical-vectors/. crs Coordinate reference system (CRS) use positions output. Default EPSG code 4326 (WGS84). utm_zone UTM zone buffering coastline. Default 33 (12°E 18°E, northern hemisphere). remove_small_islands Logical indicating whether remove small islands coastline custom shapefile provided. Default TRUE. small_island_threshold Area threshold square meters islands considered small removed, remove_small_islands set TRUE. Default 2 sqkm.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"Logical vector indicating whether position near land.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"function calculates buffered area around coastline checks given positions (specified longitudes latitudes) within buffer intersect land.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"","code":"# Define coordinates latitudes <- c(62.500353, 58.964498, 57.638725, 56.575338) longitudes <- c(17.845993, 20.394418, 18.284523, 16.227174)  # Call the function near_land <- ifcb_is_near_land(latitudes, longitudes, distance = 300, crs = 4326)  # Print the result print(near_land) #> [1] FALSE FALSE  TRUE FALSE"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot and Save IFCB PSD Data — ifcb_psd","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"function generates saves data dataset's Particle Size Distribution (PSD) Imaging FlowCytobot (IFCB) feature hdr files, can used data quality assurance quality control.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"","code":"ifcb_psd(   feature_folder,   hdr_folder,   save_data = FALSE,   output_file = NULL,   plot_folder = NULL,   use_marker = FALSE,   start_fit = 10,   r_sqr = 0.5,   beads = NULL,   bubbles = NULL,   incomplete = NULL,   missing_cells = NULL,   biomass = NULL,   bloom = NULL,   humidity = NULL,   micron_factor = 1/3.4 )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"feature_folder absolute path directory containing v2 feature files dataset. hdr_folder absolute path directory containing hdr files dataset. save_data boolean indicating whether save data CSV files. Default FALSE. output_file string base file name .csv use (including path). Set NULL save data (default). plot_folder folder graph images file saved. Set NULL save graphs (default). use_marker boolean indicating whether show markers plot. Default FALSE. start_fit integer indicating start fit value plot. Default 10. r_sqr lower limit acceptable R^2 values (curves flagged). Default 0.5. beads maximum multiplier curve fit. files higher curve fit multipliers flagged bead runs. argument included, files \"runBeads\" marked TRUE header file also flagged bead run. Optional. bubbles minimum difference starting ESD ESD targets.  files difference higher threshold flagged mostly bubbles. Optional. incomplete tuple minimum volume cells (c/L) minimum mL analyzed complete run. files values thresholds flagged incomplete. Optional. missing_cells minimum image count trigger count ratio. files lower ratios flagged missing cells. Optional. biomass minimum number targets populated ESD bin given run. files fewer targets flagged low biomass. Optional. bloom minimum difference starting ESD ESD targets. files difference less threshold flagged bloom. likely lower bubbles threshold. Optional. humidity maximum percent humidity. files higher values flagged high humidity. Optional. micron_factor conversion factor microns. Default 1/3.4.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"list data, fits, flags DataFrames `save_data` FALSE; otherwise, NULL.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"PSD function originates `PSD` python repository (Hayashi et al. prep), can found https://github.com/kudelalab/PSD. function requires python interpreter installed. required python packages can installed virtual environment using `ifcb_py_install`. function requires v2 features generated `ifcb-analysis` MATLAB package (Sosik Olson 2007) found https://github.com/hsosik/ifcb-analysis.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"Hayashi, K., Walton, J., Lie, ., Smith, J. Kudela M. Using particle size distribution (PSD) automate imaging flow cytobot (IFCB) data quality coastal California, USA. prep. Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"","code":"if (FALSE) { # \\dontrun{ ifcb_psd(   feature_folder = 'path/to/features',   hdr_folder = 'path/to/hdr_data',   save_data = TRUE,   output_file = 'psd/svea_2021',   plot_folder = 'psd/plots',   use_marker = FALSE,   start_fit = 13,   r_sqr = 0.5,   beads = 10 ** 9,   bubbles = 150,   incomplete = c(1500, 3),   missing_cells = 0.7,   biomass = 1000,   bloom = 5,   humidity = NULL,   micron_factor = 1/3.0 ) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"function generates plot given sample Particle Size Distribution (PSD) data fits Imaging FlowCytobot (IFCB). PSD data fits can generated `ifcb_psd` (Hayashi et al. prep).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"","code":"ifcb_psd_plot(sample_name, data, fits, start_fit)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"sample_name name sample plot DYYYYMMDDTHHMMSS. data data frame containing PSD data (data output `ifcb_psd`), row represents sample column represents different particle sizes micrometers. fits data frame containing fit parameters power curve (fits output `ifcb_psd`), row represents sample columns include parameters ``, `k`, `R2`. start_fit x-value threshold data excluded plot fit.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"ggplot object representing PSD plot sample.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"Hayashi, K., Walton, J., Lie, ., Smith, J. Kudela M. Using particle size distribution (PSD) automate imaging flow cytobot (IFCB) data quality coastal California, USA. prep.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Analyze PSD psd <- ifcb_psd(feature_folder = 'path/to/features',                 hdr_folder = 'path/to/hdr_data',                 save_data = TRUE,                 output_file = 'psd/svea_2021',                 plot_folder = NULL,                 use_marker = FALSE,                 start_fit = 13,                 r_sqr = 0.5,                 beads = 10 ** 9,                 bubbles = 150,                 incomplete = c(1500, 3),                 missing_cells = 0.7,                 biomass = 1000,                 bloom = 5,                 humidity = NULL)  # Plot PSD of the first sample plot <- ifcb_psd_plot(sample_name = \"D20230316T101514\",                       data = psd$data,                       fits = psd$fits,                       start_fit = 10) # Inspect plot print(plot) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_py_install.html","id":null,"dir":"Reference","previous_headings":"","what":"Install iRfcb Python Environment — ifcb_py_install","title":"Install iRfcb Python Environment — ifcb_py_install","text":"function creates activates Python virtual environment named \"iRfcb\" installs required Python packages specified \"requirements.txt\" file. Additional packages can installed passing `packages` argument.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_py_install.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install iRfcb Python Environment — ifcb_py_install","text":"","code":"ifcb_py_install(..., envname = \"~/.virtualenvs/iRfcb\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_py_install.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install iRfcb Python Environment — ifcb_py_install","text":"... Additional arguments passed `virtualenv_create`, `packages`. envname character string specifying name virtual environment create. Default \"~/.virtualenvs/iRfcb\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_py_install.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install iRfcb Python Environment — ifcb_py_install","text":"","code":"if (FALSE) { # \\dontrun{ # Install the iRfcb Python environment ifcb_py_install()  # Install the iRfcb Python environment with additional packages ifcb_py_install(packages = c(\"numpy\", \"pandas\")) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Feature Files from a Specified Folder — ifcb_read_features","title":"Read Feature Files from a Specified Folder — ifcb_read_features","text":"function reads feature files given folder, filtering optionally based whether multiblob single blob files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Feature Files from a Specified Folder — ifcb_read_features","text":"","code":"ifcb_read_features(feature_folder, multiblob = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Feature Files from a Specified Folder — ifcb_read_features","text":"feature_folder Path folder containing feature files. multiblob Logical indicating whether filter multiblob files (default: FALSE).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Feature Files from a Specified Folder — ifcb_read_features","text":"named list data frames, element corresponds feature file read feature_folder.   list named base names feature files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Feature Files from a Specified Folder — ifcb_read_features","text":"","code":"if (FALSE) { # \\dontrun{ # Read feature files from a folder features <- ifcb_read_features(\"path/to/feature_folder\")  # Read only multiblob feature files multiblob_features <- ifcb_read_features(\"path/to/feature_folder\", multiblob = TRUE) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"function reads IFCB instrument settings information files (.hdr) specified directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"","code":"ifcb_read_hdr_data(hdr_folder, gps_only = FALSE, verbose = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"hdr_folder character string specifying path directory containing .hdr files. gps_only logical value indicating whether include GPS information (latitude longitude). Default FALSE. verbose logical value indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"data frame sample names, GPS latitude, GPS longitude, optionally timestamps.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"","code":"if (FALSE) { # \\dontrun{ # Extract all HDR data hdr_data <- ifcb_read_hdr_data(\"path/to/data\") print(hdr_data)  # Extract only GPS data gps_data <- ifcb_read_hdr_data(\"path/to/data\", gps_only = TRUE) print(gps_data) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Summarize Classified IFCB Data — ifcb_read_summary","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"function reads MATLAB .mat file containing aggregated classified IFCB (Imaging FlowCytobot) data generated `countcells_allTBnew_user_training` function `ifcb-analysis` repository (Sosik Olson 2007), list classified data generated `ifcb_summarize_class_counts`. returns data frame species counts optionally biovolume information based specified thresholds.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"","code":"ifcb_read_summary(   summary,   hdr_directory = NULL,   biovolume = FALSE,   threshold = \"opt\" )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"summary character string specifying path .mat summary file list generated `ifcb_summarize_class_counts`. hdr_directory character string specifying path directory containing header (.hdr) files. Default NULL. biovolume logical indicating whether file contains biovolume data. Default FALSE. threshold character string specifying threshold type counts biovolume. Options \"opt\" (default), \"adhoc\", \"none\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"data frame containing summary information including file list, volume analyzed, species counts, optionally biovolume, metadata.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"","code":"if (FALSE) { # \\dontrun{ summary_data <- ifcb_read_summary(\"path/to/summary_file.mat\", biovolume = TRUE, threshold = \"opt\") print(summary_data) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"function replaces target class ID new ID MATLAB classlist files, generated code `ifcb-analysis` repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"","code":"ifcb_replace_mat_values(   manual_folder,   out_folder,   target_id,   new_id,   column_index = 1 )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"manual_folder character string specifying path folder containing MAT classlist files updated. out_folder character string specifying path folder updated MAT classlist files saved. target_id target class ID replaced. new_id new class ID replace target ID. column_index integer value specifying classlist column edit. Default 1 (manual).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"function return value; updates classlist files specified directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"function requires python interpreter installed. required python packages can installed virtual environment using `ifcb_py_install`.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"","code":"if (FALSE) { # \\dontrun{ # Replace class ID 99 with 1 in .mat classlist files ifcb_replace_mat_values(\"output/manual\", \"output/manual\", 99, 1, column_index = 1) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_run_image_gallery.html","id":null,"dir":"Reference","previous_headings":"","what":"Run IFCB Image Gallery — ifcb_run_image_gallery","title":"Run IFCB Image Gallery — ifcb_run_image_gallery","text":"Launches Shiny application provides interactive interface browsing managing IFCB (Imaging FlowCytobot) image galleries.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_run_image_gallery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run IFCB Image Gallery — ifcb_run_image_gallery","text":"","code":"ifcb_run_image_gallery()"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_run_image_gallery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run IFCB Image Gallery — ifcb_run_image_gallery","text":"Users can specify folder containing .png images, navigate images, select unselect images, download list selected images. feature particularly useful quality control annotated images. downloaded list images app can also uploaded filter view selected images.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_run_image_gallery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run IFCB Image Gallery — ifcb_run_image_gallery","text":"","code":"if (FALSE) { # \\dontrun{ # Run the IFCB image gallery Shiny app ifcb_run_image_gallery() } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"function calculates aggregated biovolumes carbon content Imaging FlowCytobot (IFCB) samples based feature MATLAB classification result files, generated code `ifcb-analysis` repository (Sosik Olson 2007). Biovolumes converted carbon according Menden-Deuer Lessard 2000 individual regions interest (ROI), different conversion factors applied diatoms non-diatom protist. provided, also incorporates sample volume data HDR files compute biovolume carbon content per liter sample.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"","code":"ifcb_summarize_biovolumes(   feature_folder,   class_folder,   hdr_folder = NULL,   micron_factor = 1/3.4,   diatom_class = \"Bacillariophyceae\",   threshold = \"opt\" )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"feature_folder Path folder containing feature files (e.g., CSV format). class_folder Path folder containing class files (e.g., MATLAB MAT format). hdr_folder Path folder containing HDR files (optional). micron_factor Conversion factor microns per pixel (default: 1/3.4). diatom_class string vector diatom class names World Register Marine Species (WoRMS). Default \"Bacillariophyceae\". threshold Threshold classification (default: \"opt\").","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"data frame summarizing aggregated biovolume carbon content per class per sample.   Columns include 'sample', 'class', 'biovolume_mm3', 'carbon_ug', 'ml_analyzed',   'biovolume_mm3_per_liter', 'carbon_ug_per_liter'.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"function performs following steps: Extracts biovolumes carbon content feature class files using `ifcb_extract_biovolumes`. Optionally incorporates volume data HDR files calculate volume analyzed per sample. Computes biovolume carbon content per liter sample analyzed.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"Menden-Deuer Susanne, Lessard Evelyn J., (2000), Carbon volume relationships dinoflagellates, diatoms, protist plankton, Limnology Oceanography, 3, doi: 10.4319/lo.2000.45.3.0569. Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: ifcb_summarize_biovolumes(\"path/to/features\", \"path/to/class\", hdr_folder = \"path/to/hdr\") } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"function summarizes class results series classifier output files returns summary data list.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"","code":"ifcb_summarize_class_counts(classpath_generic, hdr_folder, year_range)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"classpath_generic Character string specifying location classifier output files. path include 'xxxx' place 4-digit year (e.g., 'classxxxx_v1/'). hdr_folder Character string specifying directory data (hdr files) located. can URL web services full path local files. year_range Numeric vector specifying range years (e.g., 2013:2014) process.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"list containing following elements: class2useTB Classes used TreeBagger classifier. classcountTB Counts class considering target placed winning class. classcountTB_above_optthresh Counts class considering classifications optimal threshold maximum accuracy. ml_analyzedTB Volume analyzed file. mdateTB Dates associated file. filelistTB List files processed. classpath_generic generic classpath provided input. classcountTB_above_adhocthresh (optional) Counts class considering classifications adhoc threshold. adhocthresh (optional) adhoc threshold used classification.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"","code":"if (FALSE) { # \\dontrun{ ifcb_summarize_class_counts('C:/work/IFCB/user_training_test_data/class/classxxxx_v1/',                             'C:/work/IFCB/user_training_test_data/data/', 2014) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"function summarizes number images per class sample timestamps, optionally retrieves GPS positions, IFCB information using `ifcb_read_hdr_data` `ifcb_convert_filenames` functions.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"","code":"ifcb_summarize_png_data(   png_folder,   hdr_folder = NULL,   sum_level = \"sample\",   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"png_folder character string specifying path main directory containing subfolders (classes) .png images. hdr_folder character string specifying path directory containing .hdr files. Default NULL. sum_level character string specifying level summarization. Options: \"sample\" (default) \"class\". verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"sum_level \"sample\", returns data frame columns: sample, ifcb_number, class_name, n_images, gpsLatitude, gpsLongitude, timestamp, year, month, day, time, roi_numbers.         sum_level \"class\", returns data frame columns: class_name, n_images.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: # Assuming the following directory structure: # png_folder/ # ├── class1/ # │   ├── sample1_00001.png # │   ├── sample1_00002.png # │   ├── sample2_00001.png # ├── class2/ # │   ├── sample1_00003.png # │   ├── sample3_00001.png  png_folder <- \"path/to/png_folder\" hdr_folder <- \"path/to/hdr_folder\" # This folder should contain corresponding .hdr files  # Summarize by sample summary_sample <- ifcb_summarize_png_data(png_folder,                                           hdr_folder,                                           sum_level = \"sample\",                                           verbose = TRUE) print(summary_sample)  # Summarize by class summary_class <- ifcb_summarize_png_data(png_folder,                                          hdr_folder,                                          sum_level = \"class\",                                          verbose = TRUE) print(summary_class) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"function reads IFCB header file extract sample run time inhibittime, returns associated estimate sample volume analyzed (milliliters). function assumes standard IFCB configuration sample syringe operating 0.25 mL per minute. IFCB instruments 007 higher (except 008). R equivalent function `IFCB_volume_analyzed` `ifcb-analysis` repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"","code":"ifcb_volume_analyzed(hdr_file, hdrOnly_flag = FALSE, flowrate = 0.25)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"hdr_file character vector specifying path(s) one .hdr files URLs. hdrOnly_flag optional flag indicating whether skip ADC file estimation (default FALSE). flowrate Milliliters per minute syringe pump (default 0.25).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"numeric vector containing estimated sample volume analyzed header file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Estimate volume analyzed from an IFCB header file hdr_file <- \"path/to/IFCB_hdr_file.hdr\" ml_analyzed <- ifcb_volume_analyzed(hdr_file) print(ml_analyzed) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"function reads IFCB ADC file extract sample run time inhibittime, returns associated estimate sample volume analyzed (milliliters). function assumes standard IFCB configuration sample syringe operating 0.25 mL per minute. IFCB instruments 007 higher (except 008). R equivalent function `IFCB_volume_analyzed_fromADC` `ifcb-analysis repository` (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"","code":"ifcb_volume_analyzed_from_adc(adc_file)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"adc_file character vector specifying path(s) one .adc files URLs.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"list containing: ml_analyzed: numeric vector estimated sample volume analyzed ADC file. inhibittime: numeric vector inhibittime values extracted ADC files. runtime: numeric vector runtime values extracted ADC files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Estimate volume analyzed from an IFCB ADC file adc_file <- \"path/to/IFCB_adc_file.csv\" adc_info <- ifcb_volume_analyzed_from_adc(adc_file) print(adc_info$ml_analyzed) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"function identifies sub-basin set latitude longitude points belong , using user-specified default shapefile. default shapefile includes Baltic Sea, Kattegat, Skagerrak basins included `iRfcb` package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"","code":"ifcb_which_basin(latitudes, longitudes, plot = FALSE, shape_file = NULL)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"latitudes numeric vector latitude points. longitudes numeric vector longitude points. plot boolean indicating whether plot points along sea basins. Default FALSE. shape_file absolute path custom polygon shapefile WGS84 (EPSG:4326) represents sea basin. Defaults Baltic Sea, Kattegat, Skagerrak basins included `iRfcb` package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"vector indicating basin point belongs , ggplot object `plot = TRUE`.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"function reads pre-packaged shapefile Baltic Sea, Kattegat, Skagerrak basins `iRfcb` package default, user-supplied          shapefile provided. shapefiles originate SHARK (https://sharkweb.smhi.se/hamta-data/). sets CRS, transforms CRS WGS84 (EPSG:4326) necessary, checks given points          fall within specified sea basin. Optionally, plots points sea basin polygons together.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check in which Baltic sea basin the points are in points_in_the_baltic <- ifcb_which_basin(latitudes, longitudes) print(points_in_the_baltic) #> [1] \"13 - Arkona Basin\"   \"12 - Bornholm Basin\" \"16 - Kattegat\"       #> [4] \"17 - Skagerrak\"       # Plot the points and the basins ifcb_which_basin(latitudes, longitudes, plot = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"function creates zip archive containing specified files directories manually annotated IFCB images, organized structured format suitable distribution storage. MATLAB files generated `ifcb-analysis` repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"","code":"ifcb_zip_matlab(   manual_folder,   features_folder,   class2use_file,   zip_filename,   data_folder = NULL,   readme_file = NULL,   matlab_readme_file = NULL,   email_address = \"\",   version = \"\",   print_progress = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"manual_folder directory containing .mat files included zip archive. features_folder directory containing .csv files, including subfolders, included zip archive. class2use_file path file (class2use_file) renamed included 'config' directory zip archive. zip_filename filename zip archive created. data_folder Optionally, directory containing additional data files (.roi, .adc, .hdr) included zip archive. readme_file Optionally, path README file updated metadata included zip archive. matlab_readme_file Optionally, path MATLAB README file whose content appended end README file zip archive. email_address email address included README file contact information. version Optionally, version number included README file. print_progress logical value indicating whether print progress bar. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"function performs following operations: Lists `.mat` files `manual_folder`. Lists `.csv` files `features_folder` (including subfolders). Lists `.roi`, `.adc`, `.hdr` files `data_folder` provided. Copies listed files temporary directories (`manual_dir`, `features_dir`, `data_dir`, `config_dir`). Renames copies `class2use_file` `config_dir` `class2use.mat`. Updates `readme_file` metadata (provided) appends PNG image statistics MATLAB README content. Creates manifest file (`MANIFEST.txt`) listing files zip archive. Creates zip archive (`zip_filename`) containing copied updated files. Cleans temporary directories creating zip archive.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"","code":"if (FALSE) { # \\dontrun{ ifcb_zip_matlab(\"path/to/manual_files\", \"path/to/feature_files\",                  \"path/to/class2use.mat\", \"output_zip_archive.zip\",                  data_folder = \"path/to/data_files\",                  readme_file = system.file(\"exdata/README-template.md\", package = \"iRfcb\"),                  matlab_readme_file = system.file(\"inst/exdata/MATLAB-template.md\",                                                   package = \"iRfcb\"),                  email_address = \"example@email.com\",                  version = \"1.0\") } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip PNG Folders — ifcb_zip_pngs","title":"Zip PNG Folders — ifcb_zip_pngs","text":"function zips directories containing .png files optionally includes README MANIFEST files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip PNG Folders — ifcb_zip_pngs","text":"","code":"ifcb_zip_pngs(   png_folder,   zip_filename,   readme_file = NULL,   email_address = \"\",   version = \"\",   print_progress = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip PNG Folders — ifcb_zip_pngs","text":"png_folder directory containing subdirectories .png files. zip_filename name zip file create. readme_file Optional path README file inclusion zip package. email_address Optional email address include README file. version Optional version information include README file. print_progress logical value indicating whether print progress bar. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip PNG Folders — ifcb_zip_pngs","text":"function return value; creates zip archive potentially README file.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip PNG Folders — ifcb_zip_pngs","text":"","code":"if (FALSE) { # \\dontrun{ # Zip all subdirectories in the 'images' folder with a README file ifcb_zip_pngs(\"path/to/images\",              \"images.zip\",              readme_file = system.file(\"exdata/README-template.md\", package = \"iRfcb\"),              email_address = \"example@example.com\",              version = \"1.0\")  # Zip all subdirectories in the 'images' folder without a README file ifcb_zip_pngs(\"path/to/images\", \"images.zip\") } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/print_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Print the Progress Bar — print_progress","title":"Function to Print the Progress Bar — print_progress","text":"function prints progress bar console indicate progress process.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/print_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Print the Progress Bar — print_progress","text":"","code":"print_progress(current, total, bar_width = 50)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/print_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Print the Progress Bar — print_progress","text":"current integer specifying current progress. total integer specifying total steps process. bar_width integer specifying width progress bar. Default 50.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/read_hdr_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","title":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","text":"function reads HDR file extracts relevant lines containing parameters values.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/read_hdr_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","text":"","code":"read_hdr_file(file)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/read_hdr_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","text":"file character string specifying path HDR file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/read_hdr_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","text":"data frame columns: parameter, value, file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/summarize_TBclass.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize TreeBagger Classifier Results — summarize_TBclass","title":"Summarize TreeBagger Classifier Results — summarize_TBclass","text":"function reads TreeBagger classifier result file (.mat format) summarizes number targets class based classification scores thresholds.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/summarize_TBclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize TreeBagger Classifier Results — summarize_TBclass","text":"","code":"summarize_TBclass(classfile, adhocthresh = NULL)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/summarize_TBclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize TreeBagger Classifier Results — summarize_TBclass","text":"classfile Character string specifying path TreeBagger classifier result file (.mat format). adhocthresh Numeric vector specifying adhoc thresholds class. NULL (default), adhoc thresholding applied. single numeric value provided, applied classes.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/summarize_TBclass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize TreeBagger Classifier Results — summarize_TBclass","text":"list containing three elements: classcount Numeric vector counts class based winning class assignment. classcount_above_optthresh Numeric vector counts class optimal threshold maximum accuracy. classcount_above_adhocthresh Numeric vector counts class specified adhoc thresholds (provided).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/truncate_folder_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Truncate the Folder Name — truncate_folder_name","title":"Function to Truncate the Folder Name — truncate_folder_name","text":"function removes trailing underscore three digits base name folder.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/truncate_folder_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Truncate the Folder Name — truncate_folder_name","text":"","code":"truncate_folder_name(folder_name)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/truncate_folder_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Truncate the Folder Name — truncate_folder_name","text":"folder_name character string specifying folder name truncate.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/truncate_folder_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Truncate the Folder Name — truncate_folder_name","text":"character string truncated folder name.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"function converts biovolume microns^3 carbon picograms large diatoms (> 2000 micron^3) according Menden-Deuer Lessard 2000. formula used : log pgC cell^-1 = log + b * log V (um^3), log = -0.933 b = 0.881 diatoms > 3000 um^3.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"","code":"vol2C_lgdiatom(volume)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"volume numeric vector biovolume measurements microns^3.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"numeric vector carbon measurements picograms.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"","code":"volume <- c(5000, 10000, 20000) iRfcb:::vol2C_lgdiatom(volume) #> [1] 211.7350 389.9420 718.1372"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"function converts biovolume microns^3 carbon picograms protists besides large diatoms (> 3000 micron^3) according Menden-Deuer Lessard 2000. formula used : log pgC cell^-1 = log + b * log V (um^3), log = -0.665 b = 0.939.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"","code":"vol2C_nondiatom(volume)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"volume numeric vector biovolume measurements microns^3.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"numeric vector carbon measurements picograms.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"","code":"volume <- c(5000, 10000, 20000) iRfcb:::vol2C_nondiatom(volume) #> [1]  643.1804 1233.1048 2364.1072"}]
