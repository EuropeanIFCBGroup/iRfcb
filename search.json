[{"path":"https://europeanifcbgroup.github.io/iRfcb/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Anders Torstensson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"iRfcb Introduction","text":"iRfcb package open-source R package designed streamline analysis Imaging FlowCytobot (IFCB) data, focus supporting marine ecological research monitoring. integrating R Python functionalities, package facilitates efficient handling IFCB image data, extraction key metadata, preparation outputs taxonomic, ecological, spatial analyses. tutorial serves introduction core functionalities iRfcb, providing step--step instructions data preprocessing, taxonomic analysis, SHARK-compliant data export.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"iRfcb Introduction","text":"can install package GitHub using remotes package: Load iRfcb dplyr libraries:","code":"# install.packages(\"remotes\") remotes::install_github(\"EuropeanIFCBGroup/iRfcb\") library(iRfcb) library(dplyr) # For data wrangling"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"download-sample-data","dir":"Articles","previous_headings":"Getting Started","what":"Download Sample Data","title":"iRfcb Introduction","text":"get started, download sample data SMHI IFCB Plankton Image Reference Library (Torstensson et al. 2024) following function:","code":"# Define data directory data_dir <- \"data\"  # Download and extract test data in the data folder ifcb_download_test_data(dest_dir = data_dir,                         max_retries = 10,                         sleep_time = 30) ## Download and extraction complete."},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"extract-ifcb-data","dir":"Articles","previous_headings":"","what":"Extract IFCB Data","title":"iRfcb Introduction","text":"section demonstrates selection general data extraction tools available iRfcb.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"extract-timestamps-from-ifcb-sample-filenames","dir":"Articles","previous_headings":"Extract IFCB Data","what":"Extract Timestamps from IFCB sample Filenames","title":"iRfcb Introduction","text":"Extract timestamps sample names filenames: filename includes ROI numbers (e.g., extracted .png image), separate column, roi, added output.","code":"# Example sample names filenames <- list.files(\"data/data/2023/D20230314\", recursive = TRUE)  # Print filenames print(filenames) ## [1] \"D20230314T001205_IFCB134.adc\" \"D20230314T001205_IFCB134.hdr\" ## [3] \"D20230314T001205_IFCB134.roi\" \"D20230314T003836_IFCB134.adc\" ## [5] \"D20230314T003836_IFCB134.hdr\" \"D20230314T003836_IFCB134.roi\" # Convert filenames to timestamps timestamps <- ifcb_convert_filenames(filenames)  # Print result print(timestamps) ##                     sample           timestamp       date year month day ## 1 D20230314T001205_IFCB134 2023-03-14 00:12:05 2023-03-14 2023     3  14 ## 2 D20230314T001205_IFCB134 2023-03-14 00:12:05 2023-03-14 2023     3  14 ## 3 D20230314T001205_IFCB134 2023-03-14 00:12:05 2023-03-14 2023     3  14 ## 4 D20230314T003836_IFCB134 2023-03-14 00:38:36 2023-03-14 2023     3  14 ## 5 D20230314T003836_IFCB134 2023-03-14 00:38:36 2023-03-14 2023     3  14 ## 6 D20230314T003836_IFCB134 2023-03-14 00:38:36 2023-03-14 2023     3  14 ##       time ifcb_number ## 1 00:12:05     IFCB134 ## 2 00:12:05     IFCB134 ## 3 00:12:05     IFCB134 ## 4 00:38:36     IFCB134 ## 5 00:38:36     IFCB134 ## 6 00:38:36     IFCB134 # Example sample names filenames <- list.files(\"data/png/Alexandrium_pseudogonyaulax_050\")  # Print filenames print(filenames) ## [1] \"D20220712T210855_IFCB134_00042.png\" \"D20220712T210855_IFCB134_00164.png\" ## [3] \"D20220712T222710_IFCB134_00044.png\" # Convert filenames to timestamps timestamps <- ifcb_convert_filenames(filenames)  # Print result print(timestamps) ##                     sample           timestamp       date year month day ## 1 D20220712T210855_IFCB134 2022-07-12 21:08:55 2022-07-12 2022     7  12 ## 2 D20220712T210855_IFCB134 2022-07-12 21:08:55 2022-07-12 2022     7  12 ## 3 D20220712T222710_IFCB134 2022-07-12 22:27:10 2022-07-12 2022     7  12 ##       time ifcb_number roi ## 1 21:08:55     IFCB134  42 ## 2 21:08:55     IFCB134 164 ## 3 22:27:10     IFCB134  44"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"calculate-volume-analyzed-in-ml","dir":"Articles","previous_headings":"Extract IFCB Data","what":"Calculate Volume Analyzed in ml","title":"iRfcb Introduction","text":"analyzed volume sample can calculated using data .hdr .adc files.","code":"# Path to HDR file hdr_file <- \"data/data/2023/D20230314/D20230314T001205_IFCB134.hdr\"  # Calculate volume analyzed (in ml) volume_analyzed <- ifcb_volume_analyzed(hdr_file)  # Print result print(volume_analyzed) ## [1] 4.568676"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"get-sample-runtime","dir":"Articles","previous_headings":"Extract IFCB Data","what":"Get Sample Runtime","title":"iRfcb Introduction","text":"Get runtime .hdr file:","code":"# Get runtime from HDR-file run_time <- ifcb_get_runtime(hdr_file)  # Print result print(run_time) ## $runtime ## [1] 1200.853 ##  ## $inhibittime ## [1] 104.3704"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"read-feature-data","dir":"Articles","previous_headings":"Extract IFCB Data","what":"Read Feature Data","title":"iRfcb Introduction","text":"Read feature files (.csv) folder:","code":"# Read feature files from a folder features <- ifcb_read_features(\"data/features/2023/\",                                verbose = FALSE) # Do not print progress bar  # Print output of first 10 columns from the first sample in the list head(features[[1]])[,1:10] ##   roi_number Area  Biovolume BoundingBox_xwidth BoundingBox_ywidth ConvexArea ## 1          2  446   6082.909                 31                 21        542 ## 2          3 4326 142783.030                111                 63       5186 ## 3          4 9739 336908.323                202                129      10581 ## 4          5  580   9186.802                 27                 28        602 ## 5          6 3927 120366.981                 99                 50       4191 ## 6          7  290   3111.748                 22                 20        335 ##   ConvexPerimeter Eccentricity EquivDiameter    Extent ## 1        87.24196    0.6006111      23.82991 0.6850998 ## 2       291.42030    0.8980639      74.21613 0.6186186 ## 3       505.83898    0.9753657     111.35565 0.3737432 ## 4        88.58696    0.3299815      27.17497 0.7671958 ## 5       265.49548    0.9016151      70.71076 0.7933333 ## 6        67.86613    0.3332706      19.21560 0.6590909 # Read only multiblob feature files multiblob_features <- ifcb_read_features(\"data/features/2023\",                                           multiblob = TRUE,                                          verbose = FALSE)  # Print output of first 10 columns from the first sample in the list head(multiblob_features[[1]])[,1:10] ##   roi_number blob_number Area MajorAxisLength MinorAxisLength Eccentricity ## 1        154           1 3647       109.93092        45.00010    0.9123779 ## 2        154           2 1626        77.53922        30.74631    0.9180235 ## 3        214           1 7456       232.11148       122.61037    0.8490956 ## 4        214           2 4840       101.68493        68.30606    0.7407850 ## 5        214           3  910        54.18655        28.51088    0.8503847 ## 6        214           4  153        18.95031        10.93057    0.8168844 ##   Orientation ConvexArea EquivDiameter  Solidity ## 1    11.28171       4205      68.14327 0.8673008 ## 2    26.71876       2495      45.50041 0.6517034 ## 3    30.89332      23666      97.43343 0.3150511 ## 4   -35.88789       6955      78.50146 0.6959022 ## 5    27.00911       1551      34.03892 0.5867182 ## 6    48.78767        188      13.95728 0.8138298"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"extract-images-from-roi-files","dir":"Articles","previous_headings":"","what":"Extract Images from ROI files","title":"iRfcb Introduction","text":"IFCB images stored .roi files can extracted .png files using iRfcb package, demonstrated . Extract images sample using ifcb_extract_pngs function. can specify out_folder, default, images saved subdirectory within directory ROI file. gamma can adjusted enhance image contrast. Extract specific ROIs: extract annotated images classified results MATLAB files, please see Sharing Annotated IFCB Images Handling MATLAB Results tutorials.","code":"# All ROIs in sample ifcb_extract_pngs(\"data/data/2023/D20230314/D20230314T001205_IFCB134.roi\",                   gamma = 1) # Default gamma value ## Writing 1218 ROIs from D20230314T001205_IFCB134.roi to data/data/2023/D20230314/D20230314T001205_IFCB134 # Only ROI number 2 and 5 ifcb_extract_pngs(\"data/data/2023/D20230314/D20230314T003836_IFCB134.roi\",                   ROInumbers = c(2, 5)) ## Writing 2 ROIs from D20230314T003836_IFCB134.roi to data/data/2023/D20230314/D20230314T003836_IFCB134"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"taxonomical-data","dir":"Articles","previous_headings":"","what":"Taxonomical Data","title":"iRfcb Introduction","text":"Maintaining --date taxonomic data essential ensuring accurate species names classifications, directly impact calculations like carbon concentrations iRfcb. --date taxonomy also ensures data harmonization preventing issues like misspellings, outdated synonyms, inconsistent classifications. consistency crucial integrating comparing datasets across studies, regions, time periods, improving reliability scientific outcomes.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"taxon-matching-with-worms","dir":"Articles","previous_headings":"Taxonomical Data","what":"Taxon matching with WoRMS","title":"iRfcb Introduction","text":"Taxonomic names can matched World Register Marine Species (WoRMS), ensuring accuracy consistency. iRfcb package includes built-function taxon matching via WoRMS API, featuring retry mechanism handle server errors, making particularly useful automated data pipelines. additional tools functionality, R package worrms provides comprehensive suite options interacting WoRMS database.","code":"# Example taxa names taxa_names <- c(\"Alexandrium_pseudogonyaulax\", \"Guinardia_delicatula\")  # Retrieve WoRMS records worms_records <- ifcb_match_taxa_names(taxa_names,                                         verbose = FALSE) # Do not print progress bar  # Print result tibble(worms_records) ## # A tibble: 2 × 28 ##   name  AphiaID url   scientificname authority status unacceptreason taxonRankID ##   <chr>   <int> <chr> <chr>          <chr>     <chr>  <lgl>                <int> ## 1 Alex…  109713 http… Alexandrium p… (Biechel… accep… NA                     220 ## 2 Guin…  149112 http… Guinardia del… (Cleve) … unass… NA                     220 ## # ℹ 20 more variables: rank <chr>, valid_AphiaID <int>, valid_name <chr>, ## #   valid_authority <chr>, parentNameUsageID <int>, kingdom <chr>, ## #   phylum <chr>, class <chr>, order <chr>, family <chr>, genus <chr>, ## #   citation <chr>, lsid <chr>, isMarine <int>, isBrackish <lgl>, ## #   isFreshwater <int>, isTerrestrial <int>, isExtinct <int>, match_type <chr>, ## #   modified <chr>"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"check-whether-a-class-name-is-a-diatom","dir":"Articles","previous_headings":"Taxonomical Data","what":"Check whether a class name is a diatom","title":"iRfcb Introduction","text":"function takes list taxa names, cleans , retrieves corresponding classification records WoRMS, checks belong specified diatom class. function uses first name (genus name) taxa classification. function can useful converting biovolumes carbon according Menden-Deuer Lessard (2000). See vol2C_nondiatom vol2C_lgdiatom carbon calculations (included NAMESPACE). default class diatoms defined Bacillariophyceae, may adjusted using diatom_class argument.","code":"# Read class2use file and select five taxa class2use <- ifcb_get_mat_variable(\"data/config/class2use.mat\")[10:15]  # Create a dataframe with class name and result from `ifcb_is_diatom` class_list <- data.frame(class2use,                          is_diatom = ifcb_is_diatom(class2use, verbose = FALSE))  # Print rows 10-15 of result class_list ##                    class2use is_diatom ## 1        Nodularia_spumigena     FALSE ## 2            Cryptomonadales     FALSE ## 3    Acanthoica_quattrospina     FALSE ## 4 Asterionellopsis_glacialis      TRUE ## 5                  Centrales      TRUE ## 6            Centrales_chain      TRUE"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"find-trophic-type-of-plankton-taxa","dir":"Articles","previous_headings":"Taxonomical Data","what":"Find trophic type of plankton taxa","title":"iRfcb Introduction","text":"function takes list taxa names matches SMHI Trophic Type list used SHARK.","code":"# Example taxa names taxa_list <- c(\"Acanthoceras zachariasii\",                \"Nodularia spumigena\",                \"Acanthoica quattrospina\",                \"Noctiluca\",                \"Gymnodiniales\")  # Get trophic type for taxa trophic_type <- ifcb_get_trophic_type(taxa_list)  # Print result print(trophic_type) ## [1] \"AU\" \"AU\" \"MX\" \"HT\" \"NS\""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"shark-export","dir":"Articles","previous_headings":"","what":"SHARK export","title":"iRfcb Introduction","text":"function used SMHI map IFCB data SHARK standard data delivery format. example submission also provided iRfcb. concludes tutorial iRfcb package. detailed information, refer package documentation tutorials. See data pipelines can constructed using iRfcb following Example Project. Happy analyzing!","code":"# Get column names from example shark_colnames <- ifcb_get_shark_colnames()  # Print column names print(shark_colnames) ##  [1] MYEAR                  STATN                  SAMPLING_PLATFORM      ##  [4] PROJ                   ORDERER                SHIPC                  ##  [7] CRUISE_NO              DATE_TIME              SDATE                  ## [10] STIME                  TIMEZONE               LATIT                  ## [13] LONGI                  POSYS                  WADEP                  ## [16] MPROG                  MNDEP                  MXDEP                  ## [19] SLABO                  ACKR_SMP               SMTYP                  ## [22] PDMET                  SMVOL                  METFP                  ## [25] IFCBNO                 SMPNO                  LATNM                  ## [28] SFLAG                  LATNM_SFLAG            TRPHY                  ## [31] APHIA_ID               IMAGE_VERIFICATION     VERIFIED_BY            ## [34] COUNT                  ABUND                  BIOVOL                 ## [37] C_CONC                 QFLAG                  COEFF                  ## [40] CLASS_NAME             CLASS_F1               UNCLASSIFIED_COUNTS    ## [43] UNCLASSIFIED_ABUNDANCE UNCLASSIFIED_VOLUME    METOA                  ## [46] ASSOCIATED_MEDIA       CLASSPROG              ALABO                  ## [49] ACKR_ANA               ANADATE                METDC                  ## [52] TRAINING_SET           CLASSIFIER_USED        MANUAL_QC_DATE         ## [55] PRE_FILTER_SIZE        PH_FB                  CHL_FB                 ## [58] CDOM_FB                PHYC_FB                PHER_FB                ## [61] WATERFLOW_FB           TURB_FB                PCO2_FB                ## [64] TEMP_FB                PSAL_FB                OSAT_FB                ## [67] DOXY_FB                ## <0 rows> (or 0-length row.names) # Load example stored from `iRfcb` shark_example <- ifcb_get_shark_example()  # Print first ten columns of the SHARK data submission example head(shark_example)[1:10] ##   MYEAR                  STATN SAMPLING_PLATFORM              PROJ ORDERER ## 1  2022 RV_FB_D20220713T175838              IFCB IFCB, DTO, JERICO    SMHI ## 2  2022 RV_FB_D20220713T175838              IFCB IFCB, DTO, JERICO    SMHI ## 3  2022 RV_FB_D20220713T175838              IFCB IFCB, DTO, JERICO    SMHI ## 4  2022 RV_FB_D20220713T175838              IFCB IFCB, DTO, JERICO    SMHI ## 5  2022 RV_FB_D20220713T175838            SveaFB IFCB, DTO, JERICO    SMHI ##   SHIPC CRUISE_NO DATE_TIME      SDATE    STIME ## 1  77SE        12  2,02E+13 2022-07-13 17:58:38 ## 2  77SE        12  2,02E+13 2022-07-13 17:58:38 ## 3  77SE        12  2,02E+13 2022-07-13 17:58:38 ## 4  77SE        12  2,02E+13 2022-07-13 17:58:38 ## 5  77SE        12  2,02E+13 2022-07-13 17:58:38"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"iRfcb Introduction","text":"","code":"## To cite package 'iRfcb' in publications use: ##  ##   Anders Torstensson (2025). iRfcb: Tools for Managing Imaging ##   FlowCytobot (IFCB) Data. R package version 0.4.2. ##   https://doi.org/10.5281/zenodo.12533225 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data}, ##     author = {Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.4.2}, ##     url = {https://doi.org/10.5281/zenodo.12533225}, ##   }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/a-general-tutorial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"iRfcb Introduction","text":"Torstensson, ., Skjevik, -T., Mohlin, M., Karlberg, M. Karlson, B. (2024). SMHI IFCB Plankton Image Reference Library. SciLifeLab. Dataset. https://doi.org/10.17044/scilifelab.25883455.v3","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a DwC-A from IFCB Data","text":"tutorial demonstrates create Darwin Core Archive (DwC-) Imaging FlowCytobot (IFCB) results processed using MATLAB code ifcb-analysis repository (Sosik Olson 2007). However, code can adapted process classifications machine learning algorithms well. example based subset manually annotated image data SMHI IFCB Plankton Image Reference Library (version 3) (Torstensson et al. 2024), aligns best practices outlined Martin-Cabrera et al. (2022). DwC-widely accepted standard sharing biodiversity data. organizes data structured tables, sampling events, occurrences, measurement facts (MoF), can linked unique identifiers. standardized format facilitates data sharing, integration, reuse across platforms, enabling interoperability global biodiversity databases like Global Biodiversity Information Facility (GBIF), Ocean Biodiversity Information System (OBIS) European Marine Observation Data Network Biology (EMODNet). using iRfcb package combination LivingNorwayR package, tutorial guides creating sampling event-based DwC-. archive includes occurrence MoF tables, ensuring IFCB results meet requirements major biodiversity repositories. DwC-, data can become part global ecosystem interoperable datasets, contributing biodiversity research monitoring international scale. Standardized datasets like enable diverse applications, development digital twins—virtual models ecosystems used simulate predict environmental changes. tutorial provides reproducible workflow help prepare IFCB data submission large databases adhering international data standards, broadening potential innovative uses biodiversity science.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Creating a DwC-A from IFCB Data","text":"can install iRfcb LivingNorwayR packages GitHub using remotes package: Load required libraries:","code":"# install.packages(\"remotes\") remotes::install_github(c(\"EuropeanIFCBGroup/iRfcb\",                           \"LivingNorway/LivingNorwayR\")) library(iRfcb) library(LivingNorwayR) # For DwC-A creation library(dplyr) # For data wrangling library(tidyr) # For data wrangling library(uuid) # For generating unique identifiers"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"download-sample-data","dir":"Articles","previous_headings":"Getting Started","what":"Download Sample Data","title":"Creating a DwC-A from IFCB Data","text":"get started, download sample data SMHI IFCB Plankton Image Reference Library (Torstensson et al. 2024) following function:","code":"# Define data directory data_dir <- \"data\"  # Download and extract test data in the data folder ifcb_download_test_data(dest_dir = data_dir,                         max_retries = 10,                         sleep_time = 30,                         verbose = FALSE)"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"extract-positions-and-timestamps","dir":"Articles","previous_headings":"Extract Data","what":"Extract Positions and Timestamps","title":"Creating a DwC-A from IFCB Data","text":"example, coordinates stored within .hdr files extracted along corresponding timestamps following step:","code":"# Read HDR data and extract GPS position (when available) and timestamps gps_data <- ifcb_read_hdr_data(\"data/data/\",                                gps_only = TRUE,                                verbose = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"summarize-counts-biovolumes-and-carbon-content-from-manually-annotated-ifcb-data","dir":"Articles","previous_headings":"Extract Data","what":"Summarize Counts, Biovolumes and Carbon Content from Manually Annotated IFCB Data","title":"Creating a DwC-A from IFCB Data","text":"can also apply process automatically classified data setting mat_folder parameter point class folder, setting class2use_file NULL. coordinates biovolume data now combined single unified dataframe.","code":"# Summarize biovolume data using IFCB data from manual data folder manual_biovolume_data <- ifcb_summarize_biovolumes(feature_folder = \"data/features\",                                                    mat_folder = \"data/manual\",                                                    class2use_file = \"data/config/class2use.mat\",                                                    hdr_folder = \"data/data\",                                                    verbose = FALSE) # Summarize manually annotated biovolume data data_manual <- gps_data %>%   left_join(manual_biovolume_data, by = \"sample\")"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"parent-events","dir":"Articles","previous_headings":"Event Core","what":"Parent Events","title":"Creating a DwC-A from IFCB Data","text":"event can belong higher-level event, referred Parent Event. example, Parent Event dataset , main events samples. However, extensive datasets, Parent Events represent broader categories, cruises, instrument numbers, specific years, hierarchical groupings. Later can add MoF data event level. Parent Event must unique, persistent identifier, referred parentEventID. generate identifiers using uuid package (Urbanek Ts’o 2021), ensuring globally unique consistent. Additionally, Parent Event associated specific date ranges, must captured eventDate reflect temporal span observations data collection. helps provide clear temporal context data. project-specific terms can defined well, datasetName.","code":"# Add a single parentEventID for all samples in the dataset data_event <- data_manual %>%   mutate(parentEventID = uuid::UUIDgenerate(use.time = FALSE))  # Event Date and info for parentEvents data_parent_event <- data_event  %>%   group_by(parentEventID) %>%   summarise(min = min(date), max=max(date),             ifcb_number = unique(ifcb_number)) %>%   mutate(eventID = parentEventID,          parentEventID = NA,          eventType = \"Project\",          datasetName = \"iRfcb-DwC-A\",          eventDate = paste0(min, \"/\", max))  %>%   select(-min, -max)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"sample-events","dir":"Articles","previous_headings":"Event Core","what":"Sample Events","title":"Creating a DwC-A from IFCB Data","text":"organize data effectively, start defining key event terms. include general terms like eventType ownerInstitutionCode. institutionID many European institutions can retrieved various registries, European Directory Marine Organisations (EDMO). term represents specific metadata associated collected data. annotated R code processes structures data event-focused format. exact sample position unknown, coordinates can estimated paired coordinateUncertaintyInMeters value. case, samples originate Swedish west coast, assign coordinates within Skagerrak Kattegat region specify uncertainty 150 km, encompasses areas. Next, extract relevant columns Event tables combine Event Parent Event tables single data frame. final stage initialize event object livingNorwayR package - used later build DwC compliant data package.","code":"# Add metadata columns to the data data_event <- data_event %>%   mutate(     # Defining the institution who own and are responsible for the data     ownerInstitutionCode = \"SMHI\",     institutionID = \"https://edmo.seadatanet.org/report/545\",     institutionCode = \"SMHI\",          # Defining CC-BY data licence     license = \"http://creativecommons.org/licenses/by/4.0/legalcodeY\",          # Specifying the type of record, which is Sample in this case     eventType = \"Sample\",          # Mapping existing date and time fields to standard terms     eventDate = date,     eventTime = time,          # Adding geographical information     decimalLatitude = gpsLatitude,     decimalLongitude = gpsLongitude,     locality = NA, # The specific description of the place, if available     verbatimLocality = NA, # The original textual description of the place     geodeticDatum = \"EPSG:4326\",     countryCode = \"SE\",     country = \"Sweden\",          # Specifying the size and unit of the sample analyzed     sampleSizeValue = ml_analyzed,     sampleSizeUnit = \"Millilitres\",          # Indicating the depth at which samples were taken     minimumDepthInMeters = 4,     maximumDepthInMeters = 4,          # Describing the sampling protocol     samplingProtocol = \"Imaging FlowCytobot integrated into the Ferrybox system aboard the R/V Svea, continuously capturing plankton images from a depth of 4 meters\"   ) %>%   # Grouping by sample to assign unique event IDs   group_by(sample) %>%   mutate(eventID = uuid::UUIDgenerate(use.time = FALSE)) %>%   ungroup() # Add estimated coordinates and uncertainty for events with missing positions data_event <- data_event %>%   mutate(     coordinateUncertaintyInMeters = if_else(is.na(decimalLongitude) & is.na(decimalLatitude),                                              150000, NA),     decimalLongitude = if_else(is.na(decimalLongitude),                                 11.3, decimalLongitude),     decimalLatitude = if_else(is.na(decimalLatitude),                                57.4, decimalLatitude)     ) # Create a clean data frame with selected columns event_df <- data_event %>%   select(eventType, ownerInstitutionCode, institutionCode, institutionID,            parentEventID, eventID, license, samplingProtocol, sampleSizeValue,           sampleSizeUnit, eventDate, eventTime, year, month, day, country,           countryCode, decimalLatitude, decimalLongitude, geodeticDatum,           coordinateUncertaintyInMeters, locality, verbatimLocality,           minimumDepthInMeters, maximumDepthInMeters) %>%   mutate(eventDate = as.character(eventDate)) %>%   # Ensure rows are unique   distinct()  # Create a clean data frame with selected columns parent_event_df <- data_parent_event %>%   select(-ifcb_number)  # Adjust eventDate to character format and append additional parent event data event_df <- parent_event_df %>%   mutate(eventDate = as.character(eventDate)) %>%   bind_rows(event_df)  # Print the final table as tibble tibble(event_df) ## # A tibble: 10 × 26 ##    parentEventID    eventID eventType datasetName eventDate ownerInstitutionCode ##    <chr>            <chr>   <chr>     <chr>       <chr>     <chr>                ##  1 NA               79aae7… Project   iRfcb-DwC-A 2022-05-… NA                   ##  2 79aae750-ef43-4… eb7fed… Sample    NA          2022-05-… SMHI                 ##  3 79aae750-ef43-4… a38507… Sample    NA          2022-05-… SMHI                 ##  4 79aae750-ef43-4… aa50a5… Sample    NA          2022-07-… SMHI                 ##  5 79aae750-ef43-4… 79d247… Sample    NA          2022-07-… SMHI                 ##  6 79aae750-ef43-4… 27c3f6… Sample    NA          2023-03-… SMHI                 ##  7 79aae750-ef43-4… d4dccf… Sample    NA          2023-03-… SMHI                 ##  8 79aae750-ef43-4… 844175… Sample    NA          2023-08-… SMHI                 ##  9 79aae750-ef43-4… bca926… Sample    NA          2023-09-… SMHI                 ## 10 79aae750-ef43-4… 496183… Sample    NA          2023-09-… SMHI                 ## # ℹ 20 more variables: institutionCode <chr>, institutionID <chr>, ## #   license <chr>, samplingProtocol <chr>, sampleSizeValue <dbl>, ## #   sampleSizeUnit <chr>, eventTime <time>, year <dbl>, month <dbl>, day <int>, ## #   country <chr>, countryCode <chr>, decimalLatitude <dbl>, ## #   decimalLongitude <dbl>, geodeticDatum <chr>, ## #   coordinateUncertaintyInMeters <dbl>, locality <lgl>, ## #   verbatimLocality <lgl>, minimumDepthInMeters <dbl>, … GBIF_Event <- initializeGBIFEvent(event_df,                                    idColumnInfo = \"eventID\",                                    nameAutoMap = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"occurrence-extension","dir":"Articles","previous_headings":"","what":"Occurrence Extension","title":"Creating a DwC-A from IFCB Data","text":"Occurrence table captures information individual organisms observations, linking specific event. IFCB data, basisOfRecord indicates observation made. IFCB data defined MachineObservation, since example uses manually annotated images, identificationVerificationStatus set ValidatedByHuman. best practices plankton imaging data management, see Martin-Cabrera et al. (2022).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"annotated-code-define-occurrence-data","dir":"Articles","previous_headings":"Occurrence Extension","what":"Annotated Code: Define Occurrence Data","title":"Creating a DwC-A from IFCB Data","text":"class observation considered occurrence IFCB data. following code transforms data occurrence table, adding essential fields type, collectionCode, occurrenceID, basisOfRecord, identificationVerificationStatus, identificationReferences, identifiedBy, associatedMedia. fields provide context provenance information occurrence. Links raw images can included associatedMedia. links may point resources IFCB Dashboard, Ecotaxa, image archives. Learn prepare images Ecotaxa using iRfcb tutorial, export images image repository.","code":"# Create an occurrence table by transforming event data and adding fields data_occurrences <- data_event %>%     rowwise() %>%     mutate(       type = \"StillImage\",  # Specifies the record type as an image       collectionCode = \"iRfcb\",  # Provides a collection identifier       occurrenceID = uuid::UUIDgenerate(use.time = FALSE),  # Generates a unique identifier for each occurrence       basisOfRecord = \"MachineObservation\", # Indicates the data was recorded by a machine       identificationVerificationStatus = \"ValidatedByHuman\", # Indicate that the images have been validated     identificationReferences = \"https://github.com/hsosik/ifcb-analysis/wiki/Instructions-for-manual-annotation-of-images\",     identifiedBy = \"John Doe\", # Indicate who validated the image     associatedMedia = \"https://ecotaxa.obs-vlfr.fr/prj/14392\" # Link to images (if available)   )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"taxonomic-data-cleaning-and-retrieval","dir":"Articles","previous_headings":"Occurrence Extension","what":"Taxonomic Data Cleaning and Retrieval","title":"Creating a DwC-A from IFCB Data","text":"Class names often include excess inconsistent information, underscores morphological descriptors, can complicate assignment proper taxonomical names needed occurrence table. names need cleaned mapping higher taxonomic levels using external sources like WoRMS, demonstrated . scientificName verbatimIdentification fields populated using cleaned taxonomic names original class names, respectively. final Occurrence table includes relevant fields DwC-formatting. occurrence data initialized GBIF submission using initializeGBIFOccurrence function, maps fields automatically based specified column.","code":"# Get taxa names taxa_names <- unique(data_occurrences$class)  # Clean taxa_names by substituting specific patterns with spaces or empty strings taxa_names_clean <- gsub(\"_\", \" \", taxa_names) taxa_names_clean <- gsub(\" single cell\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\" chain\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\" group\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\"-like\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\" larger than 30unidentified\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\" smaller than 30unidentified\", \"\", taxa_names_clean)  # Remove species flags from class names taxa_names_clean <- gsub(\"\\\\<spp\\\\>\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\"  \", \" \", taxa_names_clean)  # Turn f to f. for forma taxa_names_clean <- gsub(\"\\\\bf\\\\b\", \"f.\", taxa_names_clean)  # Add \"/\" for multiple names with capital letters # e.g. Heterocapsa_Azadinium to Heterocapsa/Azadinium taxa_names_clean <- gsub(\" ([A-Z])\", \"/\\\\1\", taxa_names_clean) taxa_names_clean <- gsub(\" ([A-Z])\", \"/\\\\1\", taxa_names_clean)  # Remove any whitespace taxa_names_clean <- trimws(taxa_names_clean)  # Correct misspellings taxa_names_clean <- gsub(\"Amphidnium\", \"Amphidinium\", taxa_names_clean) taxa_names_clean <- gsub(\"Enisiculifera\", \"Ensiculifera\", taxa_names_clean)  # Standardize ambiguous class names by renaming them to their closest taxonomic relatives taxa_names_clean <- gsub(\"Dinoflagellate\", \"Dinophyceae\", taxa_names_clean) taxa_names_clean <- gsub(\"Leptocylindrus danicus minimus\", \"Leptocylindrus\", taxa_names_clean) taxa_names_clean <- gsub(\"Heterocapsa/Azadinium\", \"Peridiniphycidae\", taxa_names_clean) taxa_names_clean <- gsub(\"Cylindrotheca/Nitzschia longissima\", \"Bacillariaceae\", taxa_names_clean)  # Retrieve worms records worms_records <- ifcb_match_taxa_names(taxa_names_clean,                                        marine_only = FALSE,                                        fuzzy = FALSE,                                        verbose = FALSE) ## Warning: The `fuzzy` argument of `ifcb_match_taxa_names2()` is deprecated as of iRfcb ## 0.4.2. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. # Create data frame with taxa information and class names class_names <- worms_records %>%   mutate(class_name = taxa_names, class_clean = taxa_names_clean) data_occurrences <- data_occurrences %>%    rename(class_name = class) %>%   left_join(class_names, by = \"class_name\") %>%   mutate(scientificName = name,          scientificNameAuthorship = authority,          verbatimIdentification = class_name,          scientificNameID = lsid,          taxonRank = rank,          occurrenceStatus = \"present\") # Select relevant fields occurrence_df <- data_occurrences %>%    select(occurrenceID, eventID, eventDate, occurrenceStatus, collectionCode,           type, basisOfRecord, identificationVerificationStatus,           identificationReferences, identifiedBy, associatedMedia,           scientificName, scientificNameAuthorship, scientificNameID,           taxonRank, kingdom,  phylum, class, order, family, genus,           verbatimIdentification)  # Print the final table as tibble tibble(occurrence_df) ## # A tibble: 101 × 22 ##    occurrenceID         eventID eventDate  occurrenceStatus collectionCode type  ##    <chr>                <chr>   <date>     <chr>            <chr>          <chr> ##  1 bb667d27-5126-44ed-… eb7fed… 2022-05-22 present          iRfcb          Stil… ##  2 30110fcd-0f86-4eb7-… eb7fed… 2022-05-22 present          iRfcb          Stil… ##  3 5dd6feaa-0d4b-42d5-… eb7fed… 2022-05-22 present          iRfcb          Stil… ##  4 8066cc0a-ccc0-4d0d-… eb7fed… 2022-05-22 present          iRfcb          Stil… ##  5 7652ff7c-8b27-4867-… a38507… 2022-05-22 present          iRfcb          Stil… ##  6 5221ec79-e64a-4aee-… aa50a5… 2022-07-12 present          iRfcb          Stil… ##  7 0d3ec74b-80d8-4506-… aa50a5… 2022-07-12 present          iRfcb          Stil… ##  8 bd4c0255-ac2c-491f-… aa50a5… 2022-07-12 present          iRfcb          Stil… ##  9 4038138f-71b9-4260-… 79d247… 2022-07-12 present          iRfcb          Stil… ## 10 d56401a0-350d-4159-… 79d247… 2022-07-12 present          iRfcb          Stil… ## # ℹ 91 more rows ## # ℹ 16 more variables: basisOfRecord <chr>, ## #   identificationVerificationStatus <chr>, identificationReferences <chr>, ## #   identifiedBy <chr>, associatedMedia <chr>, scientificName <chr>, ## #   scientificNameAuthorship <chr>, scientificNameID <chr>, taxonRank <chr>, ## #   kingdom <chr>, phylum <chr>, class <chr>, order <chr>, family <chr>, ## #   genus <chr>, verbatimIdentification <chr> GBIF_Occurrence <- initializeGBIFOccurrence(occurrence_df,                                              idColumnInfo = \"occurrenceID\",                                              nameAutoMap = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"mof-extension","dir":"Articles","previous_headings":"","what":"MoF Extension","title":"Creating a DwC-A from IFCB Data","text":"MoF table allows us capture additional measurements facts associated occurrences, biological environmental measurements associated events (samples) occurrences. IFCB data, can include information counts, abundance, biovolume concentration, carbon content. measurements provide essential context understanding ecological significance observations. Next, extract necessary columns dataset used MoF table. includes measurement ID, associated event occurrence IDs, key IFCB-derived measurements counts, abundance, biovolume, carbon concentration. table needs transformed “long format,” measurements placed single column called measurementType, corresponding values measurementValue. done using pivot_longer function. also standardize measurement types align controlled vocabularies (e.g., Abundance, Biovolume concentration) better compatibility global biodiversity standards. ensure data interoperability, match measurement type corresponding controlled vocabulary terms NERC Vocabulary Server. includes assigning measurementTypeID, measurementUnit, measurementUnitID measurementType. Finally, extended measurement fact table prepared GBIF initializing dataset compatible format using initializeGBIFMeasurementOrFact function. measurement IDs used unique identifiers, columns mapped automatically.","code":"# Create a dataset for occurrences (no modifications made here) data_occurrence_mof <- data_occurrences  # Add placeholder for occurrence IDs in the event dataset data_event_mof <- data_event %>%    mutate(occurrenceID = NA)  # Add placeholders for occurrence IDs and specify instrument type in the parent event dataset data_parent_mof <- data_parent_event %>%    mutate(occurrenceID = NA,          instrument = \"IFCB\") # Convert biovolume units and select the relevant columns for occurrence MoF data_occurrence_mof <- data_occurrence_mof %>%    mutate(biovolume_um3_per_liter = biovolume_mm3_per_liter * 10^9) %>%   select(eventID, parentEventID, occurrenceID, counts,           counts_per_liter, biovolume_um3_per_liter, carbon_ug_per_liter)  # Select the relevant columns for parentEvent MoF data_parent_mof <- data_parent_mof %>%   select(eventID, parentEventID, occurrenceID, instrument, ifcb_number)  # Select the relevant columns for event MoF data_event_mof <- data_event_mof %>%    select(eventID, parentEventID, occurrenceID, ml_analyzed) %>%   distinct() # Pivot and standardize occurrence measurements data_occurrence_mof <- data_occurrence_mof %>%    pivot_longer(cols = c(counts, counts_per_liter, biovolume_um3_per_liter, carbon_ug_per_liter),                 names_to = \"measurementType\",                values_to = \"measurementValue\") %>%    drop_na(measurementValue) %>%   mutate(measurementType = gsub(\"counts_per_liter\", \"Abundance\", measurementType)) %>%   mutate(measurementType = gsub(\"biovolume_um3_per_liter\", \"Biovolume concentration\", measurementType)) %>%   mutate(measurementType = gsub(\"carbon_ug_per_liter\", \"Carbon content\", measurementType)) %>%   mutate(measurementType = gsub(\"counts\", \"Count\", measurementType)) %>%   mutate(measurementValue = as.character(measurementValue))  # Pivot and standardize event measurements data_event_mof <- data_event_mof %>%   mutate(ml_analyzed = as.character(ml_analyzed)) %>%   pivot_longer(cols = c(ml_analyzed),                 names_to = \"measurementType\",                values_to = \"measurementValue\") %>%   mutate(measurementType = gsub(\"ml_analyzed\", \"Sample volume\", measurementType))   # Pivot and standardize parent measurements data_parent_mof <- data_parent_mof %>%    pivot_longer(cols = c(instrument, ifcb_number),                 names_to = \"measurementType\",                values_to = \"measurementValue\") %>%   mutate(measurementType = gsub(\"instrument\", \"Imaging instrument name\", measurementType)) %>%   mutate(measurementType = gsub(\"ifcb_number\", \"Instrument identification number\", measurementType))  # Combine all standardized measurements into a single dataset and add unique measurementIDs for each measurment data_mof <- bind_rows(data_parent_mof, data_event_mof, data_occurrence_mof) %>%   rowwise() %>%   mutate(measurementID = uuid::UUIDgenerate(use.time = FALSE)) # Create a lookup table for NERC vocabularies nerc_vocab <- data.frame(   measurementValueID = c(rep(NA, 6),                           \"http://vocab.nerc.ac.uk/collection/L22/current/TOOL1588/\"),   measurementType = c(\"Count\",                        \"Abundance\",                        \"Biovolume concentration\",                        \"Carbon content\",                       \"Sample volume\",                       \"Instrument identification number\",                       \"Imaging instrument name\"),   measurementTypeID = c(\"http://vocab.nerc.ac.uk/collection/P01/current/OCOUNT01/\",                         \"http://vocab.nerc.ac.uk/collection/P01/current/SDBIOL01\",                         \"http://vocab.nerc.ac.uk/collection/P01/current/CVOLUKNB/\",                         \"http://vocab.nerc.ac.uk/collection/P01/current/MDMAP010/\",                         \"http://vocab.nerc.ac.uk/collection/P01/current/VOLXXXXX/\",                         \"http://vocab.nerc.ac.uk/collection/P01/current/SERNUMZZ/\",                         \"http://vocab.nerc.ac.uk/collection/P01/current/NMSPINST/\"),   measurementUnit = c(\"Dimensionless\",                        \"Individual per litre\",                        \"Cubic micrometres per litre\",                        \"Micrograms per litre\",                       \"Millilitres\",                       \"Not applicable\",                       \"Not applicable\"),   measurementUnitID = c(\"http://vocab.nerc.ac.uk/collection/P06/current/UUUU/\",                         \"http://vocab.nerc.ac.uk/collection/P06/current/UCPL/\",                         \"http://vocab.nerc.ac.uk/collection/P06/current/CUPL/\",                         \"http://vocab.nerc.ac.uk/collection/P06/current/UGPL/\",                         \"http://vocab.nerc.ac.uk/collection/P06/current/VVML/\",                         \"http://vocab.nerc.ac.uk/collection/P06/current/XXXX/\",                         \"http://vocab.nerc.ac.uk/collection/P06/current/XXXX/\"))  # Merge the data with NERC vocabularies and relocate columns mof_df <- data_mof %>%   left_join(nerc_vocab, by = \"measurementType\") %>%   relocate(measurementTypeID, .after = measurementType) %>%   relocate(measurementID, .before = 1)  # Print the final table as tibble tibble(mof_df) ## # A tibble: 415 × 10 ##    measurementID              eventID parentEventID occurrenceID measurementType ##    <chr>                      <chr>   <chr>         <chr>        <chr>           ##  1 d7b4f642-a8be-43ee-b48d-0… 79aae7… NA            NA           Imaging instru… ##  2 a91e27f5-0818-4b59-8b48-4… 79aae7… NA            NA           Instrument ide… ##  3 af91e320-b586-42b1-9a67-5… eb7fed… 79aae750-ef4… NA           Sample volume   ##  4 ade0dc0c-665a-40c9-b5c7-2… a38507… 79aae750-ef4… NA           Sample volume   ##  5 51dccdce-5bea-4fa8-baf2-7… aa50a5… 79aae750-ef4… NA           Sample volume   ##  6 b906533b-57e4-4e40-88a9-e… 79d247… 79aae750-ef4… NA           Sample volume   ##  7 88605399-4cea-484b-b08d-9… 27c3f6… 79aae750-ef4… NA           Sample volume   ##  8 80229af5-8ddc-4da5-8b59-0… d4dccf… 79aae750-ef4… NA           Sample volume   ##  9 d587eabb-fcae-49d8-91b1-c… 844175… 79aae750-ef4… NA           Sample volume   ## 10 bfbd5317-5041-4ac2-baa7-7… bca926… 79aae750-ef4… NA           Sample volume   ## # ℹ 405 more rows ## # ℹ 5 more variables: measurementTypeID <chr>, measurementValue <chr>, ## #   measurementValueID <chr>, measurementUnit <chr>, measurementUnitID <chr> GBIF_MoF <- initializeGBIFMeasurementOrFact(mof_df,                                              idColumnInfo = \"measurementID\",                                              nameAutoMap = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Creating a DwC-A from IFCB Data","text":"Metadata integral part biodiversity datasets, ensures data discoverability, transparency, reusability. Ecological Metadata Language (EML) widely accepted XML-based standard used describe datasets, including formatted DwC-. datasets intended submission platforms like GBIF, EML provides robust structure communicate essential information dataset’s scope, methods, contributors.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"creating-metadata-for-ifcb-data","dir":"Articles","previous_headings":"Metadata","what":"Creating Metadata for IFCB Data","title":"Creating a DwC-A from IFCB Data","text":"create metadata IFCB dataset standardized format, use initializeDwCMetadata function. function generates template follows DwC guidelines, can customized specific details dataset. , create metadata starting Markdown file (metadata-template.rmd), rendered EML-compliant XML file GBIF submission:","code":"# Initialize DwC metadata using a R Markdown template GBIF_Metadata <- initializeDwCMetadata(\"metadata-template.rmd\",                                         fileType = \"rmarkdown\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"dwc-a-creation","dir":"Articles","previous_headings":"","what":"DwC-A Creation","title":"Creating a DwC-A from IFCB Data","text":"step, finalized tables (GBIF_Event, GBIF_Occurrence, GBIF_MoF) metadata (GBIF_Metadata) bundled together DwC-.zip file ready submission platforms like GBIF using Integrated Publishing Toolkit (IPT), e.g. EurOBIS IPT. code initializing exporting DwC-: finalized DwC-can downloaded zip archive. concludes tutorial iRfcb package. detailed information, refer package documentation tutorials, LivingNorwayR documentation. See complex data pipelines can constructed using iRfcb following Example Project. Happy analyzing!","code":"# Initialize the DwC-A dwca_archive <- initializeDwCArchive(GBIF_Event,                                       list(GBIF_Occurrence, GBIF_MoF),                                       GBIF_Metadata)  # Export the archive as a zip file dwca_archive$exportAsDwCArchive(file.path(\"files\", \"iRfcb-DwC-A.zip\"))"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Creating a DwC-A from IFCB Data","text":"","code":"## To cite package 'iRfcb' in publications use: ##  ##   Anders Torstensson (2025). iRfcb: Tools for Managing Imaging ##   FlowCytobot (IFCB) Data. R package version 0.4.2. ##   https://doi.org/10.5281/zenodo.12533225 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data}, ##     author = {Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.4.2}, ##     url = {https://doi.org/10.5281/zenodo.12533225}, ##   }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/dwca-tutorial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Creating a DwC-A from IFCB Data","text":"Martin-Cabrera, P., Perez Perez, R., Irisson, J.-O., Lombard, F., Möller, K.O., Rühl, S., Creach, V., Lindh, M., Stemmann, L., Schepers, L. (2022). Best practices recommendations plankton imaging data management: ensuring effective data flow towards international data infrastructures. Version 1. Flanders Marine Institute: Ostend. 31 pp. https://dx.doi.org/10.25607/OBP-1742. Sosik, H. M. Olson, R. J. (2007) Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216. Torstensson, ., Skjevik, -T., Mohlin, M., Karlberg, M. Karlson, B. (2024). SMHI IFCB Plankton Image Reference Library. SciLifeLab. Dataset. https://doi.org/10.17044/scilifelab.25883455.v3 Urbanek, Simon, Theodore Ts’o. 2021. Uuid: Tools Generating Handling UUIDs. https://CRAN.R-project.org/package=uuid.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Prepare IFCB Images for EcoTaxa","text":"vignette demonstrates prepare Imaging FlowCytobot (IFCB) data EcoTaxa R using iRfcb package. tutorial covers export unclassified raw IFCB images annotated Regions Interest (ROIs) using MATLAB code ifcb-analysis repository (Sosik Olson, 2007). However, code can adapted process images software platforms. code can also adapted submit automatically classified images using ifcb_extract_classified_images function. EcoTaxa web application widely used hosting, classifying, exporting images individual objects, particularly plankton imaging. leverages machine learning assign names based universal taxonomy produces ecological data standardized formats scientific applications. submit images, accompanying metadata required, can generated using iRfcb package.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Prepare IFCB Images for EcoTaxa","text":"can install package GitHub using remotes package: Load required libraries:","code":"# install.packages(\"remotes\") remotes::install_github(\"EuropeanIFCBGroup/iRfcb\") library(iRfcb) library(dplyr) # For data wrangling library(readr) # For creating .tsv files library(lubridate) # For handling dates"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"download-sample-data","dir":"Articles","previous_headings":"Getting Started","what":"Download Sample Data","title":"Prepare IFCB Images for EcoTaxa","text":"get started, download sample data SMHI IFCB Plankton Image Reference Library (Torstensson et al. 2024) following function:","code":"# Define data directory data_dir <- \"data\"  # Download and extract test data in the data folder ifcb_download_test_data(dest_dir = data_dir,                         max_retries = 10,                         sleep_time = 30,                         verbose = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"unclassified-images","dir":"Articles","previous_headings":"","what":"Unclassified Images","title":"Prepare IFCB Images for EcoTaxa","text":"example demonstrates prepare single IFCB sample submission EcoTaxa zip-archive.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"extract-images","dir":"Articles","previous_headings":"Unclassified Images","what":"Extract Images","title":"Prepare IFCB Images for EcoTaxa","text":"Extract ROIs sample .png images:","code":"# Define path to sample that you wish to prepare for a EcoTaxa submission sample_path <- \"data/data/2023/D20230314/D20230314T003836_IFCB134\"  # Extract .png images ifcb_extract_pngs(paste0(sample_path, \".roi\")) ## Writing 1122 ROIs from D20230314T003836_IFCB134.roi to data/data/2023/D20230314/D20230314T003836_IFCB134"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"summarize-image-metadata","dir":"Articles","previous_headings":"Unclassified Images","what":"Summarize Image Metadata","title":"Prepare IFCB Images for EcoTaxa","text":"Extract image metadata .png directory:","code":"# Extract image metadata metadata_sample <- ifcb_summarize_png_metadata(sample_path)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"map-ecotaxa-headers","dir":"Articles","previous_headings":"Unclassified Images","what":"Map EcoTaxa Headers","title":"Prepare IFCB Images for EcoTaxa","text":"image metadata mapped Ecotaxa metadata headers required submitting data EcoTaxa. example, minimal dataset used, containing image name. comprehensive headers can specified arguments ifcb_get_ecotaxa_example.","code":"# Get the minimal EcoTaxa metadata header names ecotaxa_minimal_headers <- ifcb_get_ecotaxa_example(\"minimal\")[0,]  # Create a data frame with empty rows matching the length of data ecotaxa_minimal_headers[1:nrow(metadata_sample),] <- NA  # Map metadata to Ecotaxa headers ecotaxa_minimal <- ecotaxa_minimal_headers %>%   mutate(img_file_name = metadata_sample$image,          object_id = tools::file_path_sans_ext(metadata_sample$image))"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"generate-ecotaxa-tsv-and-zip-files","dir":"Articles","previous_headings":"Unclassified Images","what":"Generate EcoTaxa TSV and ZIP Files","title":"Prepare IFCB Images for EcoTaxa","text":"metadata images subfolder stored .tsv file, zipped archive prepared submission EcoTaxa.","code":"# Write metadata tsv file write_tsv(ecotaxa_minimal,           file.path(             sample_path,             paste0(\"ecotaxa_D20230314T003836_IFCB134.tsv\")),           na = \"\")  # Create zip-archive ifcb_zip_pngs(png_folder = \"data/data/2023/D20230314/\",               zip_filename = \"data/zip/D20230314T003836_IFCB134_ecotaxa.zip\",               include_txt = TRUE, # To include the metadata text-files in the archive               split_zip = TRUE,               max_size = 500,               print_progress = FALSE) ## Creating zip archive... ## Zip archive created successfully: /home/runner/work/iRfcb/iRfcb/vignettes/data/zip/D20230314T003836_IFCB134_ecotaxa.zip"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"annotated-images","dir":"Articles","previous_headings":"","what":"Annotated Images","title":"Prepare IFCB Images for EcoTaxa","text":"example demonstrates prepare dataset manually annotated images submission EcoTaxa. annotations generated using MATLAB code ifcb-analysis repository (Sosik Olson, 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"extract-annotated-images","dir":"Articles","previous_headings":"Annotated Images","what":"Extract Annotated Images","title":"Prepare IFCB Images for EcoTaxa","text":"Extract annotated ROIs .png images subfolders class, skipping unclassified (class id 1) category:","code":"# Extract .png images ifcb_extract_annotated_images(manual_folder = \"data/manual\",                               class2use_file = \"data/config/class2use.mat\",                               roi_folder = \"data/data\",                               out_folder = \"data/extracted_images\",                               skip_class = 1, # or \"unclassified\"                               verbose = FALSE) # Do not print messages"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"summarize-image-metadata-1","dir":"Articles","previous_headings":"Annotated Images","what":"Summarize Image Metadata","title":"Prepare IFCB Images for EcoTaxa","text":"section demonstrates gather summarize metadata images png_folder combining data feature .hdr files. Additionally, retrieves analysis date time sample based .mat file creation dates appends information summarized dataset.","code":"# Summarize image metadata from feature and hdr files metadata <- ifcb_summarize_png_metadata(png_folder = \"data/extracted_images\",                                         feature_folder = \"data/features\",                                         hdr_folder = \"data/data\")  # Print the first ten columns of output manual_files <- list.files(\"data/manual\", pattern = \".mat\", full.names = TRUE)  # Get file info the the .mat files file_info <- file.info(manual_files)  # Extract analysis date and time based file timestamps analysis_date <- data.frame(sample = sub(\".mat$\", \"\", basename(manual_files)),                              analysis_date = as.Date(file_info$ctime),                              analysis_time = format(ymd_hms(file_info$ctime), \"%H:%M:%S\"))  # Merge with metadata metadata <- metadata %>%   left_join(analysis_date, by = \"sample\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"taxonomic-data-cleaning-and-retrieval","dir":"Articles","previous_headings":"Annotated Images","what":"Taxonomic Data Cleaning and Retrieval","title":"Prepare IFCB Images for EcoTaxa","text":"Class names often contain unnecessary inconsistent information. names need cleaned mapping higher taxonomic levels using external sources like WoRMS. following code demonstrates clean class names retrieve taxonomic details WoRMS, AphiaID.","code":"# Get taxa names taxa_names <- unique(metadata$subfolder)  # Clean taxa_names by substituting specific patterns with spaces or empty strings taxa_names_clean <- iRfcb:::truncate_folder_name(taxa_names) # Remove numerics from folder name taxa_names_clean <- gsub(\"_\", \" \", taxa_names_clean) taxa_names_clean <- gsub(\" single cell\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\" chain\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\"-like\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\" larger than 30unidentified\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\" smaller than 30unidentified\", \"\", taxa_names_clean)  # Remove species flags from class names taxa_names_clean <- gsub(\"\\\\<spp\\\\>\", \"\", taxa_names_clean) taxa_names_clean <- gsub(\"  \", \" \", taxa_names_clean)  # Turn f to f. for forma taxa_names_clean <- gsub(\"\\\\bf\\\\b\", \"f.\", taxa_names_clean)  # Add \"/\" for multiple names with capital letters # e.g. Heterocapsa_Azadinium to Heterocapsa/Azadinium taxa_names_clean <- gsub(\" ([A-Z])\", \"/\\\\1\", taxa_names_clean) taxa_names_clean <- gsub(\" ([A-Z])\", \"/\\\\1\", taxa_names_clean)  # Remove any whitespace taxa_names_clean <- trimws(taxa_names_clean)  # Retrieve worms records worms_records <- ifcb_match_taxa_names(taxa_names_clean,                                        marine_only = FALSE,                                        verbose = FALSE)  # Create data frame with taxa information and class names class_names <- worms_records %>%   mutate(subfolder = taxa_names, class_clean = taxa_names_clean)  # Merge with metadata metadata <- metadata %>%   left_join(class_names, by = \"subfolder\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"map-ecotaxa-headers-1","dir":"Articles","previous_headings":"Annotated Images","what":"Map EcoTaxa Headers","title":"Prepare IFCB Images for EcoTaxa","text":"metadata can mapped headers ifcb_get_ecotaxa_example produce metadata files suitable submitting images EcoTaxa. example comprehensive includes several feature fields. simpler dataset, minimal fields can retrieved using ifcb_get_ecotaxa_example(example = \"minimal\").","code":"# Get EcoTaxa metadata header names ecotaxa_headers <- ifcb_get_ecotaxa_example()[0,]  # Create a data frame with empty rows matching the length of data ecotaxa_headers[1:nrow(metadata),] <- NA  # Map metadata to populate the empty dataframe ecotaxa_metadata <- ecotaxa_headers %>%   mutate(          # Image fields     img_file_name = metadata$image,          # Static information     object_link = \"https://doi.org/10.17044/scilifelab.25883455\",     object_annotation_status = \"validated\",     acq_resolution_pixels_per_micron = 3.4,     acq_instrument = \"IFCB\",     sample_source = \"flowthrough\",          # Software     process_soft = \"MATLAB, R\",     process_soft_version = paste0(\"R2022a, \", version$version.string),     process_library = \"ifcb-analysis\",     process_library_version = 2,     process_script = \"iRfcb\",     process_script_version = as.character(packageVersion(\"iRfcb\")),     process_date = format(Sys.Date(),\"%Y%m%d\"),      process_time = format(Sys.time(),\"%H%M%S\"),          # Object-related fields     object_id = tools::file_path_sans_ext(metadata$image),       object_roi_number = metadata$roi,     object_lat = metadata$gpsLatitude,     object_lon = metadata$gpsLongitude,     object_date = format(metadata$date, \"%Y%m%d\"),     object_time = gsub(\":\", \"\", metadata$time),     object_annotation_hierarchy = metadata$subfolder,     object_annotation_category = metadata$class_clean,     object_aphiaid = metadata$AphiaID,     object_annotation_date = format(metadata$analysis_date, \"%Y%m%d\"),     object_annotation_time = gsub(\":\", \"\", metadata$analysis_time),     object_annotation_person_name = \"John Doe\",     object_annotation_person_email = \"john.doe@email.com\",          # Depth fields     object_depth_min = 4, # Sampled at 4 m depth     object_depth_max = 4, # Sampled at 4 m depth          # Sample fields     sample_vessel = \"RV Svea\",     sample_id = metadata$sample,     sample_station = NA,     sample_cruise = NA,          ### Features fields          # PMT     object_pmt_scattering = NA,     object_pmt_fluorescence = NA,          # Morphological metrics     object_area = metadata$Area,       object_biovolume = metadata$Biovolume,     object_perimeter = metadata$Perimeter,     object_bounding_box_xwidth = metadata$BoundingBox_xwidth,     object_bounding_box_ywidth = metadata$BoundingBox_ywidth,     object_convex_area = metadata$ConvexArea,     object_convex_perimeter = metadata$ConvexPerimeter,     object_feret_diameter = metadata$FeretDiameter,     object_major_axis_length = metadata$MajorAxisLength,     object_minor_axis_length = metadata$MinorAxisLength,     object_orientation = metadata$Orientation,     object_eccentricity = metadata$Eccentricity,     object_equiv_diameter = metadata$EquivDiameter,     object_extent = metadata$Extent,     object_r_wcenter2total_powerratio = metadata$RWcenter2total_powerratio,     object_r_whalfpowerintegral = metadata$RWhalfpowerintegral,          # Miscellaneous fields     object_solidity = metadata$Solidity,      object_num_blobs = metadata$numBlobs,      object_h180 = metadata$H180,      object_h90 = metadata$H90,      object_hflip = metadata$Hflip,     object_summed_area = metadata$summedArea,     object_summed_biovolume = metadata$summedBiovolume,     object_summed_convex_area = metadata$summedConvexArea,     object_summed_convex_perimeter = metadata$summedConvexPerimeter,     object_summed_feret_diameter = metadata$summedFeretDiameter,     object_summed_major_axis_length = metadata$summedMajorAxisLength,     object_summed_minor_axis_length = metadata$summedMinorAxisLength,     object_summed_perimeter = metadata$summedPerimeter,     object_shapehist_kurtosis_norm_eq_d = metadata$shapehist_kurtosis_normEqD,     object_shapehist_mean_norm_eq_d = metadata$shapehist_mean_normEqD,     object_shapehist_median_norm_eq_d = metadata$shapehist_median_normEqD,     object_shapehist_mode_norm_eq_d = metadata$shapehist_mode_normEqD,     object_shapehist_skewness_norm_eq_d = metadata$shapehist_skewness_normEqD,     object_area_over_perimeter_squared = metadata$Area_over_PerimeterSquared,     object_area_over_perimeter = metadata$Area_over_Perimeter,     object_h90_over_hflip = metadata$H90_over_Hflip,     object_h90_over_h180 = metadata$H90_over_H180,     object_hflip_over_h180 = metadata$Hflip_over_H180,     object_summed_convex_perimeter_over_perimeter = metadata$summedConvexPerimeter_over_Perimeter,     object_rotated_bounding_box_solidity = metadata$rotated_BoundingBox_solidity,     object_rotated_area = metadata$RotatedArea,     object_rotated_bounding_box_xwidth = metadata$RotatedBoundingBox_xwidth,     object_rotated_bounding_box_ywidth = metadata$RotatedBoundingBox_ywidth,          # Texture-related fields     object_texture_average_contrast = metadata$texture_average_contrast,     object_texture_average_gray_level = metadata$texture_average_gray_level,     object_texture_entropy = metadata$texture_entropy,     object_texture_smoothness = metadata$texture_smoothness,     object_texture_third_moment = metadata$texture_third_moment,     object_texture_uniformity = metadata$texture_uniformity,          # Moment invariants     object_moment_invariant1 = metadata$moment_invariant1,     object_moment_invariant2 = metadata$moment_invariant2,     object_moment_invariant3 = metadata$moment_invariant3,     object_moment_invariant4 = metadata$moment_invariant4,     object_moment_invariant5 = metadata$moment_invariant5,     object_moment_invariant6 = metadata$moment_invariant6,     object_moment_invariant7 = metadata$moment_invariant7,          # Ring fields     object_ring01 = metadata$Ring01,       object_ring02 = metadata$Ring02,       object_ring03 = metadata$Ring03,       object_ring04 = metadata$Ring04,       object_ring05 = metadata$Ring05,       object_ring06 = metadata$Ring06,       object_ring07 = metadata$Ring07,       object_ring08 = metadata$Ring08,       object_ring09 = metadata$Ring09,       object_ring10 = metadata$Ring10,       object_ring11 = metadata$Ring11,       object_ring12 = metadata$Ring12,       object_ring13 = metadata$Ring13,       object_ring14 = metadata$Ring14,       object_ring15 = metadata$Ring15,       object_ring16 = metadata$Ring16,       object_ring17 = metadata$Ring17,       object_ring18 = metadata$Ring18,       object_ring19 = metadata$Ring19,       object_ring20 = metadata$Ring20,       object_ring21 = metadata$Ring21,       object_ring22 = metadata$Ring22,       object_ring23 = metadata$Ring23,       object_ring24 = metadata$Ring24,       object_ring25 = metadata$Ring25,       object_ring26 = metadata$Ring26,       object_ring27 = metadata$Ring27,       object_ring28 = metadata$Ring28,       object_ring29 = metadata$Ring29,       object_ring30 = metadata$Ring30,       object_ring31 = metadata$Ring31,       object_ring32 = metadata$Ring32,       object_ring33 = metadata$Ring33,       object_ring34 = metadata$Ring34,       object_ring35 = metadata$Ring35,       object_ring36 = metadata$Ring36,       object_ring37 = metadata$Ring37,       object_ring38 = metadata$Ring38,       object_ring39 = metadata$Ring39,       object_ring40 = metadata$Ring40,       object_ring41 = metadata$Ring41,       object_ring42 = metadata$Ring42,       object_ring43 = metadata$Ring43,       object_ring44 = metadata$Ring44,       object_ring45 = metadata$Ring45,       object_ring46 = metadata$Ring46,       object_ring47 = metadata$Ring47,       object_ring48 = metadata$Ring48,       object_ring49 = metadata$Ring49,       object_ring50 = metadata$Ring50,            # HOG fields     object_hog01 = metadata$HOG01,       object_hog02 = metadata$HOG02,       object_hog03 = metadata$HOG03,       object_hog04 = metadata$HOG04,       object_hog05 = metadata$HOG05,       object_hog06 = metadata$HOG06,       object_hog07 = metadata$HOG07,       object_hog08 = metadata$HOG08,       object_hog09 = metadata$HOG09,       object_hog10 = metadata$HOG10,       object_hog11 = metadata$HOG11,       object_hog12 = metadata$HOG12,       object_hog13 = metadata$HOG13,       object_hog14 = metadata$HOG14,       object_hog15 = metadata$HOG15,       object_hog16 = metadata$HOG16,       object_hog17 = metadata$HOG17,       object_hog18 = metadata$HOG18,       object_hog19 = metadata$HOG19,       object_hog20 = metadata$HOG20,       object_hog21 = metadata$HOG21,       object_hog22 = metadata$HOG22,       object_hog23 = metadata$HOG23,       object_hog24 = metadata$HOG24,       object_hog25 = metadata$HOG25,       object_hog26 = metadata$HOG26,       object_hog27 = metadata$HOG27,       object_hog28 = metadata$HOG28,       object_hog29 = metadata$HOG29,       object_hog30 = metadata$HOG30,       object_hog31 = metadata$HOG31,       object_hog32 = metadata$HOG32,       object_hog33 = metadata$HOG33,       object_hog34 = metadata$HOG34,       object_hog35 = metadata$HOG35,       object_hog36 = metadata$HOG36,       object_hog37 = metadata$HOG37,       object_hog38 = metadata$HOG38,       object_hog39 = metadata$HOG39,       object_hog40 = metadata$HOG40,       object_hog41 = metadata$HOG41,       object_hog42 = metadata$HOG42,       object_hog43 = metadata$HOG43,       object_hog44 = metadata$HOG44,       object_hog45 = metadata$HOG45,       object_hog46 = metadata$HOG46,       object_hog47 = metadata$HOG47,       object_hog48 = metadata$HOG48,       object_hog49 = metadata$HOG49,       object_hog50 = metadata$HOG50,     object_hog51 = metadata$HOG51,     object_hog52 = metadata$HOG52,     object_hog53 = metadata$HOG53,     object_hog54 = metadata$HOG54,     object_hog55 = metadata$HOG55,     object_hog56 = metadata$HOG56,     object_hog57 = metadata$HOG57,     object_hog58 = metadata$HOG58,     object_hog59 = metadata$HOG59,     object_hog60 = metadata$HOG60,     object_hog61 = metadata$HOG61,     object_hog62 = metadata$HOG62,     object_hog63 = metadata$HOG63,     object_hog64 = metadata$HOG64,     object_hog65 = metadata$HOG65,     object_hog66 = metadata$HOG66,     object_hog67 = metadata$HOG67,     object_hog68 = metadata$HOG68,     object_hog69 = metadata$HOG69,     object_hog70 = metadata$HOG70,     object_hog71 = metadata$HOG71,     object_hog72 = metadata$HOG72,     object_hog73 = metadata$HOG73,     object_hog74 = metadata$HOG74,     object_hog75 = metadata$HOG75,     object_hog76 = metadata$HOG76,     object_hog77 = metadata$HOG77,     object_hog78 = metadata$HOG78,     object_hog79 = metadata$HOG79,     object_hog80 = metadata$HOG80,     object_hog81 = metadata$HOG81,          # Wedge fields     object_wedge01 = metadata$Wedge01,       object_wedge02 = metadata$Wedge02,       object_wedge03 = metadata$Wedge03,       object_wedge04 = metadata$Wedge04,       object_wedge05 = metadata$Wedge05,       object_wedge06 = metadata$Wedge06,       object_wedge07 = metadata$Wedge07,       object_wedge08 = metadata$Wedge08,       object_wedge09 = metadata$Wedge09,       object_wedge10 = metadata$Wedge10,       object_wedge11 = metadata$Wedge11,       object_wedge12 = metadata$Wedge12,       object_wedge13 = metadata$Wedge13,       object_wedge14 = metadata$Wedge14,       object_wedge15 = metadata$Wedge15,       object_wedge16 = metadata$Wedge16,       object_wedge17 = metadata$Wedge17,       object_wedge18 = metadata$Wedge18,       object_wedge19 = metadata$Wedge19,       object_wedge20 = metadata$Wedge20,       object_wedge21 = metadata$Wedge21,     object_wedge22 = metadata$Wedge22,       object_wedge23 = metadata$Wedge23,       object_wedge24 = metadata$Wedge24,       object_wedge25 = metadata$Wedge25,       object_wedge26 = metadata$Wedge26,       object_wedge27 = metadata$Wedge27,       object_wedge28 = metadata$Wedge28,       object_wedge29 = metadata$Wedge29,       object_wedge30 = metadata$Wedge30,       object_wedge31 = metadata$Wedge31,       object_wedge32 = metadata$Wedge32,       object_wedge33 = metadata$Wedge33,       object_wedge34 = metadata$Wedge34,       object_wedge35 = metadata$Wedge35,       object_wedge36 = metadata$Wedge36,       object_wedge37 = metadata$Wedge37,       object_wedge38 = metadata$Wedge38,       object_wedge39 = metadata$Wedge39,       object_wedge40 = metadata$Wedge40,       object_wedge41 = metadata$Wedge41,       object_wedge42 = metadata$Wedge42,       object_wedge43 = metadata$Wedge43,       object_wedge44 = metadata$Wedge44,       object_wedge45 = metadata$Wedge45,       object_wedge46 = metadata$Wedge46,       object_wedge47 = metadata$Wedge47,       object_wedge48 = metadata$Wedge48     )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"generate-ecotaxa-tsv-files","dir":"Articles","previous_headings":"Annotated Images","what":"Generate EcoTaxa TSV Files","title":"Prepare IFCB Images for EcoTaxa","text":"section demonstrates generate .tsv files containing metadata class subfolder. files essential uploading data EcoTaxa. .tsv file written respective class subfolder includes relevant metadata class.","code":"# Loop .tsv creation for each class for (i in seq_along(unique(ecotaxa_metadata$object_annotation_hierarchy))) {      # Define path to subfolder   subfolder_path <- file.path(\"data/extracted_images\",                               unique(ecotaxa_metadata$object_annotation_hierarchy)[i])      # Filter metadata for each class   ecotaxa_metadata_ix <- ecotaxa_metadata %>%     filter(object_annotation_hierarchy == unique(ecotaxa_metadata$object_annotation_hierarchy)[i]) %>%     mutate(object_annotation_hierarchy = iRfcb:::truncate_folder_name(object_annotation_hierarchy))      # Add data format codes (text[t], float[f] etc.)   ecotaxa_metadata_ix <- bind_rows(     ifcb_get_ecotaxa_example()[1, ] %>%       mutate(across(everything(), as.character)),     ecotaxa_metadata_ix %>%       mutate(across(everything(), as.character))   )      # Write one metadata file per class subfolder   write_tsv(ecotaxa_metadata_ix,             file.path(               subfolder_path,                paste0(\"ecotaxa_\",                      unique(iRfcb:::truncate_folder_name(ecotaxa_metadata$object_annotation_hierarchy))[i],                      \".tsv\")),             na = \"\") }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"creating-a-zip-archive-for-ecotaxa","dir":"Articles","previous_headings":"Annotated Images","what":"Creating a Zip Archive for EcoTaxa","title":"Prepare IFCB Images for EcoTaxa","text":"Prepare PNG directory publication creating zip archive, ready upload EcoTaxa web interface. Note web interface maximum file size limit 500 MB. accommodate limitation, zip archive can split multiple files setting split_zip TRUE specifying max_size parameter megabytes. concludes tutorial iRfcb package. detailed information, refer package documentation tutorials. See data pipelines can constructed using iRfcb following Example Project. Happy analyzing!","code":"# Create zip-archive ifcb_zip_pngs(png_folder = \"data/extracted_images\",               zip_filename = \"data/zip/iRfcb_ecotaxa.zip\",               readme_file = system.file(\"exdata/README-template.md\",                                          package = \"iRfcb\"), # Template icluded in `iRfcb`               email_address = \"tutorial@test.com\",               version = \"1.1\",               include_txt = TRUE, # To include the metadata text-files in the archive               split_zip = TRUE,               max_size = 500,               print_progress = FALSE) ## Creating README file... ## Creating MANIFEST.txt... ## Creating zip archive... ## Zip archive created successfully: /home/runner/work/iRfcb/iRfcb/vignettes/data/zip/iRfcb_ecotaxa.zip"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Prepare IFCB Images for EcoTaxa","text":"","code":"## To cite package 'iRfcb' in publications use: ##  ##   Anders Torstensson (2025). iRfcb: Tools for Managing Imaging ##   FlowCytobot (IFCB) Data. R package version 0.4.2. ##   https://doi.org/10.5281/zenodo.12533225 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data}, ##     author = {Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.4.2}, ##     url = {https://doi.org/10.5281/zenodo.12533225}, ##   }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/ecotaxa-tutorial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Prepare IFCB Images for EcoTaxa","text":"Sosik, H. M. Olson, R. J. (2007) Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216. Torstensson, ., Skjevik, -T., Mohlin, M., Karlberg, M. Karlson, B. (2024). SMHI IFCB Plankton Image Reference Library. SciLifeLab. Dataset. https://doi.org/10.17044/scilifelab.25883455.v3","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sharing Annotated IFCB Images","text":"Annotated images can shared zipped .png packages various data repositories (e.g., Kraft et al., 2022; Torstensson et al., 2024), enabling others train enhance image classifiers. vignette provides step--step guide extracting preparing images publication using iRfcb package. workflow assumes Regions Interest (ROIs) annotated using MATLAB code ifcb-analysis repository (Sosik Olson, 2007). However, methods presented can adapted process images generated software platforms. archive can shared various sources, Figshare, Zenodo, EUDAT. Links repositories Northern Europe gathered Nordic Microalgae webpage. Images may also shared EcoTaxa, demonstrated Prepare IFCB Images EcoTaxa tutorial. Additionally, vignette shows users ifcb-analysis package can share merge multiple datasets manually annotated images, enabling MATLAB users incorporate external datasets random forest algorithms.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Sharing Annotated IFCB Images","text":"can install package GitHub using remotes package: Load iRfcb library:","code":"# install.packages(\"remotes\") remotes::install_github(\"EuropeanIFCBGroup/iRfcb\") library(iRfcb)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"download-sample-data","dir":"Articles","previous_headings":"Getting Started","what":"Download Sample Data","title":"Sharing Annotated IFCB Images","text":"get started, download sample data SMHI IFCB Plankton Image Reference Library (Torstensson et al. 2024) following function:","code":"# Define data directory data_dir <- \"data\"  # Download and extract test data in the data folder ifcb_download_test_data(dest_dir = data_dir,                         max_retries = 10,                         sleep_time = 30,                         verbose = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"extract-annotated-images","dir":"Articles","previous_headings":"","what":"Extract Annotated Images","title":"Sharing Annotated IFCB Images","text":"Extract annotated ROIs .png images subfolders class, skipping unclassified (class id 1) category:","code":"# Extract .png images ifcb_extract_annotated_images(manual_folder = \"data/manual\",                               class2use_file = \"data/config/class2use.mat\",                               roi_folder = \"data/data\",                               out_folder = \"data/extracted_images\",                               skip_class = 1, # or \"unclassified\"                               verbose = FALSE) # Do not print messages"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"package-png-directory","dir":"Articles","previous_headings":"","what":"Package PNG Directory","title":"Sharing Annotated IFCB Images","text":"Prepare PNG directory publication zip-archive, similar files SMHI IFCB Plankton Image Reference Library (Torstensson et al. 2024). function reads, updates, incorporates README file zip archive. template README file included iRfcb package.","code":"# Create zip-archive ifcb_zip_pngs(png_folder = \"data/extracted_images\",               zip_filename = \"data/zip/ifcb_annotated_images_corrected.zip\",               readme_file = system.file(\"exdata/README-template.md\",                                          package = \"iRfcb\"), # Template icluded in `iRfcb`               email_address = \"tutorial@test.com\",               version = \"1.1\",               print_progress = FALSE) ## Creating README file... ## Creating MANIFEST.txt... ## Creating zip archive... ## Zip archive created successfully: /home/runner/work/iRfcb/iRfcb/vignettes/data/zip/ifcb_annotated_images_corrected.zip"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"package-matlab-directory","dir":"Articles","previous_headings":"","what":"Package MATLAB Directory","title":"Sharing Annotated IFCB Images","text":"Prepare MATLAB directory publication zip-archive, similar files SMHI IFCB Plankton Image Reference Library:","code":"# Create zip-archive ifcb_zip_matlab(manual_folder = \"data/manual\",                 features_folder = \"data/features\",                 class2use_file = \"data/config/class2use.mat\",                 zip_filename = \"data/zip/ifcb_matlab_files_corrected.zip\",                 data_folder = \"data/data\",                 readme_file = system.file(\"exdata/README-template.md\",                                            package = \"iRfcb\"), # Template icluded in `iRfcb`                 matlab_readme_file = system.file(\"exdata/MATLAB-template.md\",                                                   package = \"iRfcb\"), # Template icluded in `iRfcb`                 email_address = \"tutorial@test.com\",                 version = \"1.1\",                 print_progress = FALSE) ## Listing all files... ## Copying manual files... ## Copying feature files... ## Copying data files... ## Copying class2use file... ## Creating README file... ## Creating MANIFEST.txt... ## Creating zip archive... ## Zip archive created successfully: /home/runner/work/iRfcb/iRfcb/vignettes/data/zip/ifcb_matlab_files_corrected.zip"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"create-manifest-txt","dir":"Articles","previous_headings":"","what":"Create MANIFEST.txt","title":"Sharing Annotated IFCB Images","text":"Create manifest file zip-archive (required data repositories):","code":"# Create MANIFEST.txt of the zip folder content ifcb_create_manifest(\"data/zip\") ## MANIFEST.txt has been created at data/zip/MANIFEST.txt"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"merge-manual-datasets","dir":"Articles","previous_headings":"","what":"Merge Manual Datasets","title":"Sharing Annotated IFCB Images","text":"Datasets manually annotated using MATLAB code ifcb-analysis repository (Sosik Olson 2007) can merged using ifcb_merge_manual function. wrapper function ifcb_create_class2use, ifcb_replace_mat_values ifcb_adjust_classes functions. example, two datasets Swedish west coast downloaded SMHI IFCB Plankton Image Reference Library (version 3) (Torstensson et al. 2024) combined single dataset. Please note datasets large, downloading merging processes may take considerable time. concludes tutorial iRfcb package. detailed information, refer package documentation tutorials. See data pipelines can constructed using iRfcb following Example Project. Happy analyzing!","code":"# Define data directories skagerrak_kattegat_dir <- \"data_skagerrak_kattegat\" tangesund_dir <- \"data_tangesund\" merged_dir <- \"data_skagerrak_kattegat_tangesund_merged\"  # Download and extract Skagerrak-Kattegat data in the data folder ifcb_download_test_data(dest_dir = skagerrak_kattegat_dir,                         figshare_article = \"48158725\")  # Download and extract Tångesund data in the data folder ifcb_download_test_data(dest_dir = tangesund_dir,                         figshare_article = \"48158731\")  # Initialize the python session if not already set up env_path <- file.path(tempdir(), \"iRfcb\") # Or your preferred venv path ifcb_py_install(envname = env_path)  # Merge Skagerrak-Kattegat and Tångesund to a single dataset ifcb_merge_manual(class2use_file_base = file.path(skagerrak_kattegat_dir, \"config/class2use.mat\"),                   class2use_file_additions = file.path(tangesund_dir, \"config/class2use.mat\"),                   class2use_file_output = file.path(merged_dir, \"config/class2use.mat\"),                   manual_folder_base = file.path(skagerrak_kattegat_dir, \"manual\"),                   manual_folder_additions = file.path(tangesund_dir, \"manual\"),                   manual_folder_output = file.path(merged_dir, \"manual\")                   )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Sharing Annotated IFCB Images","text":"","code":"## To cite package 'iRfcb' in publications use: ##  ##   Anders Torstensson (2025). iRfcb: Tools for Managing Imaging ##   FlowCytobot (IFCB) Data. R package version 0.4.2. ##   https://doi.org/10.5281/zenodo.12533225 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data}, ##     author = {Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.4.2}, ##     url = {https://doi.org/10.5281/zenodo.12533225}, ##   }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/image-export-tutorial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Sharing Annotated IFCB Images","text":"Kraft, K., Velhonoja, O., Seppälä, J., Hällfors, H., Suikkanen, S., Ylöstalo, P., Anglès, S., Kielosto, S., Kuosa, H., Lehtinen, S., Oja, J., Tamminen, T. (2022). SYKE-plankton_IFCB_2022 [Data set]. https://b2share.eudat.eu. https://doi.org/10.23728/b2share.abf913e5a6ad47e6baa273ae0ed6617a Sosik, H. M. Olson, R. J. (2007) Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216. Torstensson, ., Skjevik, -T., Mohlin, M., Karlberg, M. Karlson, B. (2024). SMHI IFCB Plankton Image Reference Library. SciLifeLab. Dataset. https://doi.org/10.17044/scilifelab.25883455.v3","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Handling MATLAB Results","text":"vignette demonstrates process refine annotated automatically classified Imaging FlowCytobot (IFCB) data R using iRfcb package. workflow assumes MATLAB-based preprocessing already conducted using ifcb-analysis repository (Sosik Olson 2007). preprocessing includes generating .mat files annotated classified images. iRfcb, can analyze manage IFCB data, including summarizing annotations class results, refining annotations.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Handling MATLAB Results","text":"can install package GitHub using remotes package: functions iRfcb package used tutorial require Python installed. can download Python official website: python.org/downloads. Load iRfcb library:","code":"# install.packages(\"remotes\") remotes::install_github(\"EuropeanIFCBGroup/iRfcb\") library(iRfcb)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"download-sample-data","dir":"Articles","previous_headings":"Getting Started","what":"Download Sample Data","title":"Handling MATLAB Results","text":"get started, download sample data SMHI IFCB Plankton Image Reference Library (Torstensson et al. 2024) following function:","code":"# Define data directory data_dir <- \"data\"  # Download and extract test data in the data folder ifcb_download_test_data(dest_dir = data_dir,                         max_retries = 10,                         sleep_time = 30,                         verbose = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"classified-results-from-matlab","dir":"Articles","previous_headings":"","what":"Classified Results from MATLAB","title":"Handling MATLAB Results","text":"iRfcb package facilitates processing analysis data classified using random forest algorithm ifcb-analysis repository. workflow supports various tasks extracting classified results, reading summary files, calculating biovolume carbon content. section provides overview key functions available iRfcb handling classified IFCB data. Step--step examples included guide users extracting results, summarizing data, leveraging functionalities automated manually annotated datasets.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"extract-classified-images-from-a-sample","dir":"Articles","previous_headings":"Classified Results from MATLAB","what":"Extract Classified Images from a Sample","title":"Handling MATLAB Results","text":"begin working classified data, can extract classified images specific sample. especially useful isolating ROIs based specific taxa classification thresholds.","code":"# Extract all classified images from a sample ifcb_extract_classified_images(sample = \"D20230314T001205_IFCB134\",                                classified_folder = \"data/classified\",                                roi_folder = \"data/data\",                                out_folder = \"data/classified_images\",                                taxa = \"Tripos_lineatus\", # A specific taxa or \"All\"                                threshold = \"opt\") # or specify another threshold ## Writing 1 ROIs from D20230314T001205_IFCB134.roi to data/classified_images/Tripos_lineatus"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"read-a-summary-file","dir":"Articles","previous_headings":"Classified Results from MATLAB","what":"Read a Summary File","title":"Handling MATLAB Results","text":"Summary files generated MATLAB function countcells_allTBnew_user_training provide aggregated classified data. Use following function read process files. Alternatively, iRfcb can directly aggregate data compute carbon content classification files using ifcb_summarize_biovolumes function demonstrated .","code":"# Read a MATLAB summary file generated by `countcells_allTBnew_user_training` summary_data <- ifcb_read_summary(\"data/classified/2023/summary/summary_allTB_2023.mat\",                                   biovolume = FALSE,                                   threshold = \"opt\")  # Print output head(summary_data) ## # A tibble: 6 × 12 ##   sample   timestamp           date        year month   day time     ifcb_number ##   <chr>    <dttm>              <date>     <dbl> <dbl> <int> <time>   <chr>       ## 1 D202308… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:30:59 IFCB134     ## 2 D202308… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:30:59 IFCB134     ## 3 D202308… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:30:59 IFCB134     ## 4 D202308… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:30:59 IFCB134     ## 5 D202308… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:30:59 IFCB134     ## 6 D202308… 2023-08-10 11:30:59 2023-08-10  2023     8    10 11:30:59 IFCB134     ## # ℹ 4 more variables: ml_analyzed <dbl>, species <chr>, counts <dbl>, ## #   counts_per_liter <dbl>"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"summarize-counts-biovolumes-and-carbon-content-from-classified-ifcb-data","dir":"Articles","previous_headings":"Classified Results from MATLAB","what":"Summarize Counts, Biovolumes and Carbon Content from Classified IFCB Data","title":"Handling MATLAB Results","text":"function calculates aggregated biovolumes carbon content IFCB samples based feature MATLAB classification result files, without summarizing data MATLAB. Biovolumes converted carbon according Menden-Deuer Lessard (2000) individual ROIs, different conversion factors applied diatoms non-diatom protist. provided, also incorporates sample volume data .hdr files compute biovolume carbon content per liter sample. See details help pages ifcb_summarize_biovolumes ifcb_extract_biovolumes.","code":"# Summarize biovolume data using IFCB data from classified data folder biovolume_data <- ifcb_summarize_biovolumes(feature_folder = \"data/features/2023\",                                             mat_folder = \"data/classified\",                                             hdr_folder = \"data/data/2023\",                                             micron_factor = 1/3.4,                                             diatom_class = \"Bacillariophyceae\",                                             threshold = \"opt\",                                             verbose = FALSE) # Do not print progress bars  # Print output head(biovolume_data) ## # A tibble: 6 × 10 ##   sample             classifier class counts biovolume_mm3 carbon_ug ml_analyzed ##   <chr>              <chr>      <chr>  <int>         <dbl>     <dbl>       <dbl> ## 1 D20230314T001205_… \"Z:\\\\data… Chae…      1   0.00000255  0.000117         4.57 ## 2 D20230314T001205_… \"Z:\\\\data… Cili…     11   0.0000479   0.00601          4.57 ## 3 D20230314T001205_… \"Z:\\\\data… Cryp…    162   0.0000291   0.00455          4.57 ## 4 D20230314T001205_… \"Z:\\\\data… Cyli…      4   0.000000918 0.0000536        4.57 ## 5 D20230314T001205_… \"Z:\\\\data… Dino…      3   0.0000162   0.00207          4.57 ## 6 D20230314T001205_… \"Z:\\\\data… Dino…    137   0.0000722   0.0106           4.57 ## # ℹ 3 more variables: counts_per_liter <dbl>, biovolume_mm3_per_liter <dbl>, ## #   carbon_ug_per_liter <dbl>"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"summarize-counts-biovolumes-and-carbon-content-from-manually-annotated-ifcb-data","dir":"Articles","previous_headings":"Classified Results from MATLAB","what":"Summarize Counts, Biovolumes and Carbon Content from Manually Annotated IFCB Data","title":"Handling MATLAB Results","text":"ifcb_summarize_biovolumes function can also used calculate aggregated biovolumes carbon content manually annotated IFCB image data. See details help pages ifcb_summarize_biovolumes, ifcb_extract_biovolumes ifcb_count_mat_annotations.","code":"# Summarize biovolume data using IFCB data from manual data folder manual_biovolume_data <- ifcb_summarize_biovolumes(feature_folder = \"data/features\",                                                    mat_folder = \"data/manual\",                                                    class2use_file = \"data/config/class2use.mat\",                                                    hdr_folder = \"data/data\",                                                    micron_factor = 1/3.4,                                                    diatom_class = \"Bacillariophyceae\",                                                    verbose = FALSE) # Do not print progress bars  # Print output head(manual_biovolume_data) ## # A tibble: 6 × 10 ##   sample             classifier class counts biovolume_mm3 carbon_ug ml_analyzed ##   <chr>              <lgl>      <chr>  <int>         <dbl>     <dbl>       <dbl> ## 1 D20220522T000439_… NA         Cili…      1    0.00000327  0.000432        4.86 ## 2 D20220522T000439_… NA         Meso…      4    0.0000274   0.00344         4.86 ## 3 D20220522T000439_… NA         Stro…      1    0.00000386  0.000504        4.86 ## 4 D20220522T000439_… NA         uncl…      1    0.00000288  0.000384        4.86 ## 5 D20220522T003051_… NA         Meso…      2    0.0000122   0.00155         2.98 ## 6 D20220712T210855_… NA         Alex…      2    0.0000476   0.00555         4.91 ## # ℹ 3 more variables: counts_per_liter <dbl>, biovolume_mm3_per_liter <dbl>, ## #   carbon_ug_per_liter <dbl>"},{"path":[]},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"png-directory","dir":"Articles","previous_headings":"Manually Annotated Data from MATLAB > Count and Summarize Annotated Image Data","what":"PNG Directory","title":"Handling MATLAB Results","text":"Summarize counts annotated images sample class levels. hdr_folder can included add GPS positions sample data frame:","code":"# Summarise counts on sample level png_per_sample <- ifcb_summarize_png_counts(png_folder = \"data/png\",                                             hdr_folder = \"data/data\",                                             sum_level = \"sample\")  # Print output head(png_per_sample) ## # A tibble: 6 × 13 ## # Groups:   sample, ifcb_number [3] ##   sample    ifcb_number class_name n_images roi_numbers gpsLatitude gpsLongitude ##   <chr>     <chr>       <chr>         <int> <chr>             <dbl>        <dbl> ## 1 D2022052… IFCB134     Ciliophora        1 5                    NA           NA ## 2 D2022052… IFCB134     Mesodiniu…        4 2, 6, 7, 8           NA           NA ## 3 D2022052… IFCB134     Strombidi…        1 3                    NA           NA ## 4 D2022052… IFCB134     Mesodiniu…        2 2, 3                 NA           NA ## 5 D2022071… IFCB134     Alexandri…        2 42, 164              NA           NA ## 6 D2022071… IFCB134     Strombidi…        2 34, 79               NA           NA ## # ℹ 6 more variables: timestamp <dttm>, date <date>, year <dbl>, month <dbl>, ## #   day <int>, time <chr> # Summarise counts on class level png_per_class <- ifcb_summarize_png_counts(png_folder = \"data/png\",                                            sum_level = \"class\")  # Print output head(png_per_class) ## # A tibble: 6 × 2 ##   class_name                  n_images ##   <chr>                          <int> ## 1 Alexandrium_pseudogonyaulax        3 ## 2 Amphidnium-like                    1 ## 3 Chaetoceros_spp_chain              6 ## 4 Chaetoceros_spp_single_cell        3 ## 5 Ciliophora                        23 ## 6 Cryptomonadales                  245"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"matlab-files","dir":"Articles","previous_headings":"Manually Annotated Data from MATLAB > Count and Summarize Annotated Image Data","what":"MATLAB Files","title":"Handling MATLAB Results","text":"Count annotations MATLAB files, similar ifcb_summarize_png_counts:","code":"# Summarize counts from MATLAB files mat_count <- ifcb_count_mat_annotations(manual_files = \"data/manual\",                                         class2use_file = \"data/config/class2use.mat\",                                         skip_class = \"unclassified\", # Or class ID                                         sum_level = \"class\") # Or per \"sample\"  # Print output head(mat_count) ## # A tibble: 6 × 2 ##   class                           n ##   <chr>                       <int> ## 1 Alexandrium_pseudogonyaulax     3 ## 2 Amphidnium-like                 1 ## 3 Chaetoceros_spp_chain           6 ## 4 Chaetoceros_spp_single_cell     3 ## 5 Ciliophora                     23 ## 6 Cryptomonadales               245"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"run-image-gallery","dir":"Articles","previous_headings":"Manually Annotated Data from MATLAB","what":"Run Image Gallery","title":"Handling MATLAB Results","text":"visually inspect correct annotations, run image gallery. Individual images can selected list selected images can downloaded correction file. file can used correct .mat annotations using ifcb_correct_annotation function.","code":"# Run Shiny app ifcb_run_image_gallery()"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"correct--mat-files-after-checking-images-in-the-app","dir":"Articles","previous_headings":"Manually Annotated Data from MATLAB","what":"Correct .mat Files After Checking Images in the App","title":"Handling MATLAB Results","text":"reviewing images gallery, correct .mat files using correction file selected images:","code":"# Get class2use class_name <- ifcb_get_mat_names(\"data/config/class2use.mat\") class2use <- ifcb_get_mat_variable(\"data/config/class2use.mat\",                                    variable_name = class_name)  # Find the class id of unclassified unclassified_id <- which(grepl(\"unclassified\",                          class2use))  # Initialize the python session if not already set up env_path <- file.path(tempdir(), \"iRfcb\") # Or your preferred venv path ifcb_py_install(envname = env_path)  # Correct the annotation with the output from the image gallery ifcb_correct_annotation(manual_folder = \"data/manual\",                         out_folder = \"data/manual\",                         correction = \"data/manual/correction/Alexandrium_pseudogonyaulax_selected_images.txt\",                         correct_classid = unclassified_id)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"replace-specific-class-annotations","dir":"Articles","previous_headings":"Manually Annotated Data from MATLAB","what":"Replace Specific Class Annotations","title":"Handling MATLAB Results","text":"Replace instances specific class unclassified (class id 1):","code":"# Get class2use class_name <- ifcb_get_mat_names(\"data/config/class2use.mat\") class2use <- ifcb_get_mat_variable(\"data/config/class2use.mat\",                                    variable_name = class_name)  # Find the class id of Alexandrium_pseudogonyaulax ap_id <- which(grepl(\"Alexandrium_pseudogonyaulax\",                      class2use))  # Find the class id of unclassified unclassified_id <- which(grepl(\"unclassified\",                          class2use))  # Move all Alexandrium_pseudogonyaulax images to unclassified ifcb_replace_mat_values(manual_folder = \"data/manual\",                         out_folder = \"data/manual\",                         target_id = ap_id,                         new_id = unclassified_id)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"verify-correction","dir":"Articles","previous_headings":"Manually Annotated Data from MATLAB","what":"Verify Correction","title":"Handling MATLAB Results","text":"Verify corrections applied:","code":"# Summarize new counts after correction mat_count <- ifcb_count_mat_annotations(manual_files = \"data/manual\",                                         class2use_file = \"data/config/class2use.mat\",                                         skip_class = \"unclassified\", # Or class ID                                         sum_level = \"class\") # Or per \"sample\"  # Print output head(mat_count) ## # A tibble: 6 × 2 ##   class                                  n ##   <chr>                              <int> ## 1 Amphidnium-like                        1 ## 2 Chaetoceros_spp_chain                  6 ## 3 Chaetoceros_spp_single_cell            3 ## 4 Ciliophora                            23 ## 5 Cryptomonadales                      245 ## 6 Cylindrotheca_Nitzschia_longissima    47"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"annotate-images-in-batch","dir":"Articles","previous_headings":"Manually Annotated Data from MATLAB","what":"Annotate Images in Batch","title":"Handling MATLAB Results","text":"Images can batch annotated using ifcb_annotate_batch function. manual file already exists sample, ROI class list updated accordingly. file found, new .mat file created, unannotated ROIs marked unclassified. concludes tutorial iRfcb package. detailed information, refer package documentation tutorials. See data pipelines can constructed using iRfcb following Example Project. Happy analyzing!","code":"# Read a file with selected images, generated by the image gallery app correction <- read.table(\"data/manual/correction/Alexandrium_pseudogonyaulax_selected_images.txt\",                           header = TRUE)  # Print image names to be annotated print(correction$image_filename) ## [1] \"D20220712T210855_IFCB134_00164.png\" \"D20220712T222710_IFCB134_00044.png\" # Re-annotate the images that were moved to unclassified earlier in the tutorial ifcb_annotate_batch(png_images = correction$image_filename,                     class = \"Alexandrium_pseudogonyaulax\",                     manual_folder = \"data/manual\",                     adc_folder = \"data/data\",                     class2use_file = \"data/config/class2use.mat\")  # Summarize new counts after re-annotation mat_count <- ifcb_count_mat_annotations(manual_files = \"data/manual\",                                         class2use_file = \"data/config/class2use.mat\",                                         skip_class = \"unclassified\",                                         sum_level = \"class\")  # Print output and check if Alexandrium pseudogonyaulax is back head(mat_count) ## # A tibble: 6 × 2 ##   class                           n ##   <chr>                       <int> ## 1 Alexandrium_pseudogonyaulax     2 ## 2 Amphidnium-like                 1 ## 3 Chaetoceros_spp_chain           6 ## 4 Chaetoceros_spp_single_cell     3 ## 5 Ciliophora                     23 ## 6 Cryptomonadales               245"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Handling MATLAB Results","text":"","code":"## To cite package 'iRfcb' in publications use: ##  ##   Anders Torstensson (2025). iRfcb: Tools for Managing Imaging ##   FlowCytobot (IFCB) Data. R package version 0.4.2. ##   https://doi.org/10.5281/zenodo.12533225 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data}, ##     author = {Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.4.2}, ##     url = {https://doi.org/10.5281/zenodo.12533225}, ##   }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/matlab-tutorial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Handling MATLAB Results","text":"Kraft, K., Velhonoja, O., Seppälä, J., Hällfors, H., Suikkanen, S., Ylöstalo, P., Anglès, S., Kielosto, S., Kuosa, H., Lehtinen, S., Oja, J., Tamminen, T. (2022). SYKE-plankton_IFCB_2022 [Data set]. https://b2share.eudat.eu. https://doi.org/10.23728/b2share.abf913e5a6ad47e6baa273ae0ed6617a Menden-Deuer Susanne, Lessard Evelyn J., (2000), Carbon volume relationships dinoflagellates, diatoms, protist plankton, Limnology Oceanography, 3, doi: 10.4319/lo.2000.45.3.0569. Sosik, H. M. Olson, R. J. (2007) Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216. Torstensson, ., Skjevik, -T., Mohlin, M., Karlberg, M. Karlson, B. (2024). SMHI IFCB Plankton Image Reference Library. SciLifeLab. Dataset. https://doi.org/10.17044/scilifelab.25883455.v3","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/metadata-template.html","id":"the-dataset","dir":"Articles","previous_headings":"","what":"The Dataset","title":"Metadata template","text":"Metadata must include dataset tag, requires ID. ID acts parent identifier numerous tags describe dataset. many cases, may want text associated tag appear output. achieve , set isHidden argument TRUE, making tag invisible rendered output. primary purpose function assign ID dataset tag (e.g., iRfcbDataset), enabling elements reference . Additionally, can provide title dataset using title.tagText argument within function. iRfcb Test Data can associate keywords dataset creating keywordSet tag using appropriate tagging function. example: . Next, individual keywords can specified within keywordSet using LNkeyword function. Examples include: Imaging FlowCytobot, phytoplankton, microzooplankton, imaging sampling event. must also specify contact information individual organiation responsible coordinating users dataset. responsible user  Anders Torstensson. approach ensures keywords grouped iRfcbKeywordSet tag, linked dataset parentID.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/metadata-template.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Metadata template","text":"abstract dataset required. can flag abstract export EML using following inline code: Imaging FlowCytobot sample data iRfcb R package, collected onboard R/V Svea 2022 2023. LivingNorwayR package also supports adding alternative translations EML elements. inline code , specified tagID argument. provide alternative translation element associated tagID, can use following code: Exempeldata från Imaging FlowCytobot iRfcb R-paketet, insamlade ombord R/V Svea mellan 2022 och 2023. default, alternative translations hidden rendered HTML output. information included file, visible viewed browser. useful want translation exported EML file without appearing rendered HTML. prefer alternative translation displayed, simply add argument isHidden = FALSE LNaddTranslation function.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/metadata-template.html","id":"dataset-creators","dir":"Articles","previous_headings":"","what":"Dataset creators","title":"Metadata template","text":"dataset created following people: Anders Torstensson researcher Swedish Meteorological Hydrological Institute (anders.torstensson@smhi.se).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quality Control of IFCB Data","text":"vignette provides overview quality control (QC) methods Imaging FlowCytobot (IFCB) data using iRfcb package. package offers tools analyze Particle Size Distribution (PSD) following Hayashi et al. prep, verify geographical positions, integrate contextual data sources like ferrybox systems. QC workflows ensure high-quality datasets phytoplankton microzooplankton monitoring marine ecosystems. ’ll learn : Set iRfcb package Python environment. Analyze particle size distributions data quality. Check spatial metadata proximity land, basin classification, missing positions. Follow tutorial streamline QC process ensure reliable IFCB data.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Quality Control of IFCB Data","text":"can install package GitHub using remotes package: functions iRfcb package used tutorial require Python installed. can download Python official website: python.org/downloads. Load iRfcb ggplot2 libraries:","code":"# install.packages(\"remotes\") remotes::install_github(\"EuropeanIFCBGroup/iRfcb\") library(iRfcb) library(ggplot2)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"download-sample-data","dir":"Articles","previous_headings":"Getting Started","what":"Download Sample Data","title":"Quality Control of IFCB Data","text":"get started, download sample data SMHI IFCB Plankton Image Reference Library (Torstensson et al. 2024) following function:","code":"# Define data directory data_dir <- \"data\"  # Download and extract test data in the data folder ifcb_download_test_data(dest_dir = data_dir,                         max_retries = 10,                         sleep_time = 30,                         verbose = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"particle-size-distribution","dir":"Articles","previous_headings":"","what":"Particle Size Distribution","title":"Quality Control of IFCB Data","text":"IFCB data can quality controlled analyzing particle size distribution (PSD) (Hayashi et al. prep). iRfcb uses code available https://github.com/kudelalab/PSD, efficient detecting samples bubbles, beads, incomplete runs etc. running PSD quality check, ensure necessary Python environment set activated: results can printed visualized plots:","code":"# Define path to virtual environment env_path <- file.path(tempdir(), \"iRfcb\") # Or your preferred venv path  # Install python virtual environment ifcb_py_install(envname = env_path)  # Run PSD quality control psd <- ifcb_psd(feature_folder = \"data/features/2023\",                 hdr_folder = \"data/data/2023\",                 save_data = FALSE,                 output_file = NULL,                 plot_folder = NULL,                 use_marker = FALSE,                 start_fit = 10,                 r_sqr = 0.5,                 beads = 10 ** 12,                 bubbles = 150,                 incomplete = c(1500, 3),                 missing_cells = 0.7,                 biomass = 1000,                 bloom = 5,                 humidity = 70) # Print output from PSD head(psd$fits) ## # A tibble: 5 × 8 ##   sample            a     k   R.2 max_ESD_diff capture_percent bead_run humidity ##   <chr>         <dbl> <dbl> <dbl>        <int>           <dbl> <lgl>       <dbl> ## 1 D20230314T… 5.90e 5 -1.88 0.713            3           0.955 FALSE        16.0 ## 2 D20230314T… 2.51e 5 -1.60 0.702            3           0.944 FALSE        16.0 ## 3 D20230810T… 3.36e 7 -2.73 0.955            4           0.919 FALSE        65.4 ## 4 D20230915T… 1.32e10 -5.54 0.989            2           0.967 FALSE        71.5 ## 5 D20230915T… 4.39e10 -6.03 0.981            3           0.961 FALSE        71.5 head(psd$flags) ## # A tibble: 2 × 2 ##   sample           flag          ##   <chr>            <chr>         ## 1 D20230915T091133 High Humidity ## 2 D20230915T093804 High Humidity # Plot PSD of the first sample plot <- ifcb_psd_plot(sample_name = psd$data$sample[1],                       data = psd$data,                       fits = psd$fits,                       start_fit = 10) +   # Set white background and ensure plot background is white   theme(     panel.background = element_rect(fill = \"white\", color = NA),      plot.background = element_rect(fill = \"white\", color = NA)   )  # Print the plot print(plot)"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"check-if-ifcb-is-near-land","dir":"Articles","previous_headings":"Geographical QC/QA","what":"Check If IFCB Is Near Land","title":"Quality Control of IFCB Data","text":"determine IFCB near land (.e. ship harbor), examine position data .hdr files (vectors latitudes longitudes): accurate determination, detailed coastline .shp file may required (e.g. EEA Coastline Polygon). Refer help pages ifcb_is_near_land information.","code":"# Read HDR data and extract GPS position (when available) gps_data <- ifcb_read_hdr_data(\"data/data/\",                                gps_only = TRUE,                                verbose = FALSE) # Do not print progress bar  # Create new column with the results gps_data$near_land <- ifcb_is_near_land(gps_data$gpsLatitude,                                         gps_data$gpsLongitude,                                         distance = 100, # 100 meters from shore                                         shape = NULL) # Using the default NE 1:10m Land Polygon  # Print output head(gps_data) ##                     sample gpsLatitude gpsLongitude           timestamp ## 1 D20220522T000439_IFCB134          NA           NA 2022-05-22 00:04:39 ## 2 D20220522T003051_IFCB134          NA           NA 2022-05-22 00:30:51 ## 3 D20220712T210855_IFCB134          NA           NA 2022-07-12 21:08:55 ## 4 D20220712T222710_IFCB134          NA           NA 2022-07-12 22:27:10 ## 5 D20230314T001205_IFCB134    56.66883     12.11303 2023-03-14 00:12:05 ## 6 D20230314T003836_IFCB134    56.66884     12.11302 2023-03-14 00:38:36 ##         date year month day     time ifcb_number near_land ## 1 2022-05-22 2022     5  22 00:04:39     IFCB134        NA ## 2 2022-05-22 2022     5  22 00:30:51     IFCB134        NA ## 3 2022-07-12 2022     7  12 21:08:55     IFCB134        NA ## 4 2022-07-12 2022     7  12 22:27:10     IFCB134        NA ## 5 2023-03-14 2023     3  14 00:12:05     IFCB134     FALSE ## 6 2023-03-14 2023     3  14 00:38:36     IFCB134     FALSE"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"check-which-sub-basin-an-ifcb-sample-is-from","dir":"Articles","previous_headings":"Geographical QC/QA","what":"Check Which Sub-Basin an IFCB Sample Is From","title":"Quality Control of IFCB Data","text":"identify specific sub-basin Baltic Sea (using custom shape-file) IFCB sample collected, analyze position data:  function reads pre-packaged shapefile Baltic Sea, Kattegat, Skagerrak basins iRfcb package default, user-supplied shapefile provided. shapefiles provided iRfcb originate SHARK.","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check in which Baltic sea basin the points are in points_in_the_baltic <- ifcb_which_basin(latitudes,                                           longitudes,                                           shape_file = NULL) # Print output print(points_in_the_baltic) ## [1] \"13 - Arkona Basin\"   \"12 - Bornholm Basin\" \"16 - Kattegat\"       ## [4] \"17 - Skagerrak\" # Plot the points and the basins ifcb_which_basin(latitudes,                   longitudes,                   plot = TRUE,                   shape_file = NULL) +   # Set white background and ensure plot background is white   theme(     panel.background = element_rect(fill = \"white\", color = NA),      plot.background = element_rect(fill = \"white\", color = NA)   )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"check-if-positions-are-within-the-baltic-sea-or-elsewhere","dir":"Articles","previous_headings":"Geographical QC/QA","what":"Check If Positions Are Within the Baltic Sea or Elsewhere","title":"Quality Control of IFCB Data","text":"check useful want apply classifier specifically phytoplankton Baltic Sea.  function reads land-buffered shapefile Baltic Sea Basin iRfcb package default, user-supplied shapefile provided.","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check if the points are in the Baltic Sea Basin points_in_the_baltic <- ifcb_is_in_basin(latitudes, longitudes)  # Print results print(points_in_the_baltic) ## [1]  TRUE  TRUE FALSE FALSE # Plot the points and the basin ifcb_is_in_basin(latitudes, longitudes, plot = TRUE) +   # Set white background and ensure plot background is white   theme(     panel.background = element_rect(fill = \"white\", color = NA),      plot.background = element_rect(fill = \"white\", color = NA)   )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"find-missing-positions-from-rv-svea-ferrybox","dir":"Articles","previous_headings":"Geographical QC/QA","what":"Find Missing Positions from RV Svea Ferrybox","title":"Quality Control of IFCB Data","text":"function used SMHI collect match stored ferrybox positions available .hdr files. example ferrybox data file provided iRfcb data matching sample D20220522T000439_IFCB134.","code":"# Print available coordinates from .hdr files head(gps_data, 4) ##                     sample gpsLatitude gpsLongitude           timestamp ## 1 D20220522T000439_IFCB134          NA           NA 2022-05-22 00:04:39 ## 2 D20220522T003051_IFCB134          NA           NA 2022-05-22 00:30:51 ## 3 D20220712T210855_IFCB134          NA           NA 2022-07-12 21:08:55 ## 4 D20220712T222710_IFCB134          NA           NA 2022-07-12 22:27:10 ##         date year month day     time ifcb_number near_land ## 1 2022-05-22 2022     5  22 00:04:39     IFCB134        NA ## 2 2022-05-22 2022     5  22 00:30:51     IFCB134        NA ## 3 2022-07-12 2022     7  12 21:08:55     IFCB134        NA ## 4 2022-07-12 2022     7  12 22:27:10     IFCB134        NA # Define path where ferrybox data are located ferrybox_folder <- \"data/ferrybox_data\"  # Get GPS position from ferrybox data positions <- ifcb_get_ferrybox_data(gps_data$timestamp,                                      ferrybox_folder)  # Print result head(positions) ## # A tibble: 6 × 3 ##   timestamp           gpsLatitude gpsLongitude ##   <dttm>                    <dbl>        <dbl> ## 1 2022-05-22 00:04:39        55.0         13.6 ## 2 2022-05-22 00:30:51        NA           NA   ## 3 2022-07-12 21:08:55        NA           NA   ## 4 2022-07-12 22:27:10        NA           NA   ## 5 2023-03-14 00:12:05        NA           NA   ## 6 2023-03-14 00:38:36        NA           NA"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"find-contextual-ferrybox-data-from-rv-svea","dir":"Articles","previous_headings":"Geographical QC/QA","what":"Find Contextual Ferrybox Data from RV Svea","title":"Quality Control of IFCB Data","text":"ifcb_get_ferrybox_data function can also used extract additional ferrybox parameters, temperature (parameter number 8180) salinity (parameter number 8181). concludes tutorial iRfcb package. detailed information, refer package documentation tutorials. See data pipelines can constructed using iRfcb following Example Project. Happy analyzing!","code":"# Get salinity and temperature from ferrybox data ferrybox_data <- ifcb_get_ferrybox_data(gps_data$timestamp,                                          ferrybox_folder,                                          parameters = c(\"8180\", \"8181\"))  # Print result head(ferrybox_data) ## # A tibble: 6 × 3 ##   timestamp           `8180` `8181` ##   <dttm>               <dbl>  <dbl> ## 1 2022-05-22 00:04:39   11.4   7.86 ## 2 2022-05-22 00:30:51   NA    NA    ## 3 2022-07-12 21:08:55   NA    NA    ## 4 2022-07-12 22:27:10   NA    NA    ## 5 2023-03-14 00:12:05   NA    NA    ## 6 2023-03-14 00:38:36   NA    NA"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Quality Control of IFCB Data","text":"","code":"## To cite package 'iRfcb' in publications use: ##  ##   Anders Torstensson (2025). iRfcb: Tools for Managing Imaging ##   FlowCytobot (IFCB) Data. R package version 0.4.2. ##   https://doi.org/10.5281/zenodo.12533225 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data}, ##     author = {Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.4.2}, ##     url = {https://doi.org/10.5281/zenodo.12533225}, ##   }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/articles/qc-tutorial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Quality Control of IFCB Data","text":"Hayashi, K., Walton, J., Lie, ., Smith, J. Kudela M. Using particle size distribution (PSD) automate imaging flow cytobot (IFCB) data quality coastal California, USA. prep. Torstensson, ., Skjevik, -T., Mohlin, M., Karlberg, M. Karlson, B. (2024). SMHI IFCB Plankton Image Reference Library. SciLifeLab. Dataset. https://doi.org/10.17044/scilifelab.25883455.v3","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anders Torstensson. Author, maintainer.            Swedish Meteorological Hydrological Institute Kendra Hayashi. Contributor. Jamie Enslein. Contributor. Raphael Kudela. Contributor. Alle Lie. Contributor. Jayme Smith. Contributor. DTO-BioFlow. Funder.           Horizon Europe,HORIZON-MISS-2022-OCEAN-01-07","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anders Torstensson (2025). iRfcb: Tools Managing Imaging FlowCytobot (IFCB) Data. R package version 0.4.2. https://doi.org/10.5281/zenodo.12533225","code":"@Manual{,   title = {iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data},   author = {Anders Torstensson},   year = {2025},   note = {R package version 0.4.2},   url = {https://doi.org/10.5281/zenodo.12533225}, }"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Managing Imaging FlowCytobot (IFCB) Data","text":"iRfcb R package offers suite tools managing performing quality control plankton data generated Imaging FlowCytobot (IFCB). streamlines processing analysis IFCB data, facilitating preparation IFCB data images publication (e.g. GBIF, OBIS, EMODNet, SHARK EcoTaxa). especially useful researchers using, partly using, MATLAB ifcb-analysis package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"key-features","dir":"","previous_headings":"Overview","what":"Key Features","title":"Tools for Managing Imaging FlowCytobot (IFCB) Data","text":"Data Management: Functions reading raw processed IFCB files, counting summarizing annotated classified image data, correcting merging manually annotated datasets. Quality Control: Tools geospatial quality control IFCB data analysis Particle Size Distribution. Image Extraction: Tools extract prepare images publication. Taxonomical Data: Tools handling analyzing taxonomic data calculating biomass concentration image data.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Managing Imaging FlowCytobot (IFCB) Data","text":"can install package GitHub using remotes package: functions iRfcb require Python. can download Python official website: python.org/downloads. details, please visit project’s webpage.","code":"# install.packages(\"remotes\") remotes::install_github(\"EuropeanIFCBGroup/iRfcb\")"},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"reference","dir":"","previous_headings":"Documentation and Tutorials","what":"Reference","title":"Tools for Managing Imaging FlowCytobot (IFCB) Data","text":"detailed overview available iRfcb functions, please visit reference section: Function Reference","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"tutorials","dir":"","previous_headings":"Documentation and Tutorials","what":"Tutorials","title":"Tools for Managing Imaging FlowCytobot (IFCB) Data","text":"Explore key features capabilities iRfcb tutorials: iRfcb Introduction Quality Control IFCB Data Handling MATLAB Results Creating DwC-IFCB Data Sharing Annotated IFCB Images Prepare IFCB Images EcoTaxa","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"example-usage","dir":"","previous_headings":"Documentation and Tutorials","what":"Example Usage","title":"Tools for Managing Imaging FlowCytobot (IFCB) Data","text":"iRfcb designed integration IFCB data processing pipelines. example, see implementation following project: Example Data Pipelines","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"repository","dir":"","previous_headings":"","what":"Repository","title":"Tools for Managing Imaging FlowCytobot (IFCB) Data","text":"details latest updates, visit GitHub repository.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Tools for Managing Imaging FlowCytobot (IFCB) Data","text":"package licensed MIT License.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/create_package_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Create MANIFEST.txt — create_package_manifest","title":"Function to Create MANIFEST.txt — create_package_manifest","text":"function generates MANIFEST.txt file lists files specified paths, along sizes. recursively includes files directories skips paths exist. manifest excludes manifest file present list.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/create_package_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Create MANIFEST.txt — create_package_manifest","text":"","code":"create_package_manifest(paths, manifest_path = \"MANIFEST.txt\", temp_dir)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/create_package_manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Create MANIFEST.txt — create_package_manifest","text":"paths character vector paths files /directories include manifest. manifest_path character string specifying path manifest file. Default \"MANIFEST.txt\". temp_dir character string specifying temporary directory removed file paths.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/create_package_manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Create MANIFEST.txt — create_package_manifest","text":"function return value. creates MANIFEST.txt file specified location, contains list files (including sizes) provided paths. file paths relative specified temp_dir, manifest excludes manifest file present.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions — defunct","title":"Defunct functions — defunct","text":"functions deprecated least five release cycles made defunct. known replacement, calling function tell .","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct functions — defunct","text":"","code":"# Deprecated in 0.3.* -------------------------------------"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/iRfcb-package.html","id":null,"dir":"Reference","previous_headings":"","what":"iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data — iRfcb-package","title":"iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data — iRfcb-package","text":"comprehensive suite tools managing, processing, analyzing data IFCB. R FlowCytobot ('iRfcb') supports quality control, geospatial analysis, preparation IFCB data publication databases like https://www.gbif.org, https://www.obis.org, https://emodnet.ec.europa.eu/en, https://shark.smhi.se/, https://www.ecotaxa.org. package integrates MATLAB 'ifcb-analysis' tool, described Sosik Olson (2007) doi:10.4319/lom.2007.5.204 , provides features working raw, manually classified, machine learning–classified image datasets. Key functionalities include image extraction, particle size distribution analysis, taxonomic data handling, biomass concentration calculations, essential plankton research.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/iRfcb-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"iRfcb: Tools for Managing Imaging FlowCytobot (IFCB) Data — iRfcb-package","text":"Maintainer: Anders Torstensson anders.torstensson@smhi.se (ORCID) (Swedish Meteorological Hydrological Institute)","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_adjust_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Classifications in Manual Annotations — ifcb_adjust_classes","title":"Adjust Classifications in Manual Annotations — ifcb_adjust_classes","text":"function adjusts classifications manual annotation files based class2use file. loads specified class2use file applies adjustments relevant files specified manual folder. Optionally, can also perform compression output files. R equivalent function start_mc_adjust_classes_user_training ifcb-analysis repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_adjust_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Classifications in Manual Annotations — ifcb_adjust_classes","text":"","code":"ifcb_adjust_classes(class2use_file, manual_folder, do_compression = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_adjust_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Classifications in Manual Annotations — ifcb_adjust_classes","text":"class2use_file character string representing full path class2use file (.mat file). manual_folder character string representing path folder containing manual annotation files. function look files starting 'D' folder. do_compression logical value indicating whether apply compression output files. Defaults TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_adjust_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Classifications in Manual Annotations — ifcb_adjust_classes","text":"None","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_adjust_classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust Classifications in Manual Annotations — ifcb_adjust_classes","text":"function requires python interpreter installed. required python packages can installed virtual environment using ifcb_py_install.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_adjust_classes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adjust Classifications in Manual Annotations — ifcb_adjust_classes","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_adjust_classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Classifications in Manual Annotations — ifcb_adjust_classes","text":"","code":"if (FALSE) { # \\dontrun{ ifcb_adjust_classes(\"C:/training/config/class2use\", \"C:/training/manual/2014/\") } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_annotate_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate IFCB Images with Specified Class — ifcb_annotate_batch","title":"Annotate IFCB Images with Specified Class — ifcb_annotate_batch","text":"function creates updates manual .mat classlist files user specified class batch, based input vector IFCB image names. .mat can used code ifcb-analysis repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_annotate_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate IFCB Images with Specified Class — ifcb_annotate_batch","text":"","code":"ifcb_annotate_batch(   png_images,   class,   manual_folder,   adc_folder,   class2use_file,   manual_output = NULL,   manual_recursive = FALSE,   unclassified_id = 1,   do_compression = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_annotate_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate IFCB Images with Specified Class — ifcb_annotate_batch","text":"png_images character vector containing names PNG images annotated format DYYYYMMDDTHHMMSS_IFCBXXX_ZZZZZ.png, XXX represent IFCB number ZZZZZ roi number. class character string integer specifying class name class2use index annotate images . string provided, matched available classes class2use_file. manual_folder character string specifying path folder containing manual .mat classlist files. adc_folder character string specifying path base folder containing raw data, organized subfolders year (YYYY) date (DYYYYMMDD). subfolder contains ADC files, used determine number regions interest (ROIs) sample creating new manual .mat files. class2use_file character string specifying path .mat file containing class names corresponding indices. manual_output character string specifying path folder updated newly created .mat classlist files saved. provided, manual_folder path used default. manual_recursive logical value indicating whether search recursively within manual_folder .mat files. Default FALSE. unclassified_id integer specifying class ID use unclassified regions interest (ROIs) creating new manual .mat files. Default 1. do_compression logical value indicating whether compress .mat file. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_annotate_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate IFCB Images with Specified Class — ifcb_annotate_batch","text":"function return value. creates updates .mat files manual_folder reflect specified annotations.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_annotate_batch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate IFCB Images with Specified Class — ifcb_annotate_batch","text":"function requires python interpreter installed. required python packages can installed virtual environment using ifcb_py_install. image belongs sample already corresponding manual .mat file, function updates class IDs specified regions interest (ROIs) file. manual file exists sample, function creates new one based sample's ADC data, assigning unclassified IDs ROIs initially, applying specified class relevant ROIs. class parameter can provided either string (class name) integer (class index). string provided, function attempt match one available classes class2use_file. match found, error thrown. function assumes ADC files organized subfolders year (YYYY) date (DYYYYMMDD) within adc_folder.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_annotate_batch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Annotate IFCB Images with Specified Class — ifcb_annotate_batch","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_annotate_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate IFCB Images with Specified Class — ifcb_annotate_batch","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a python session if not already set up ifcb_py_install()  # Annotate two png images with class \"Nodularia_spumigena\" and update or create manual files ifcb_annotate_batch(   png_images = c(\"D20230812T162908_IFCB134_01399.png\",                  \"D20230714T102127_IFCB134_00069.png\"),   class = \"Nodularia_spumigena\",   manual_folder = \"path/to/manual\",   adc_folder = \"path/to/adc\",   class2use_file = \"path/to/class2use.mat\" ) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"function converts IFCB filenames data frame separate columns sample name, full timestamp, year, month, day, time, IFCB number. ROI numbers included available.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"","code":"ifcb_convert_filenames(filenames)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"filenames character vector IFCB filenames format \"DYYYYMMDDTHHMMSS_IFCBxxx\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"tibble columns: sample: extracted sample name. full_timestamp: full timestamp \"YYYY-MM-DD HH:MM:SS\" format. year: year integer. month: month integer. day: day integer. time: extracted time \"HH:MM:SS\" format. ifcb_number: IFCB instrument number.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_convert_filenames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert IFCB Filenames to Timestamps — ifcb_convert_filenames","text":"","code":"filenames <- c(\"D20230314T001205_IFCB134\", \"D20230615T123045_IFCB135\") timestamps <- ifcb_convert_filenames(filenames) print(timestamps) #>                     sample           timestamp       date year month day #> 1 D20230314T001205_IFCB134 2023-03-14 00:12:05 2023-03-14 2023     3  14 #> 2 D20230615T123045_IFCB135 2023-06-15 12:30:45 2023-06-15 2023     6  15 #>       time ifcb_number #> 1 00:12:05     IFCB134 #> 2 12:30:45     IFCB135"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"function corrects annotations MATLAB classlist files located specified manual folder, generated code ifcb-analysis repository (Sosik Olson 2007). replaces class ID specified regions interest (ROIs) classlist files based correction file character vector.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"","code":"ifcb_correct_annotation(   manual_folder,   out_folder,   correction = NULL,   correct_classid,   do_compression = TRUE,   correction_file = deprecated() )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"manual_folder character string specifying path folder containing original MAT classlist files updated. out_folder character string specifying path folder updated MAT classlist files saved. correction Either character string specifying path correction file, character vector containing image filenames corrected. file provided, column named image_filename. character vector provided, treated direct list image filenames. correct_classid integer specifying class ID use corrections. do_compression logical value indicating whether compress .mat file. Default TRUE. correction_file Use correction instead.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"function return value; updates classlist files specified output directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"function requires python interpreter installed. required python packages can installed virtual environment using ifcb_py_install. correction file expected contain least one column: image_filename, includes filenames images (without additional trailing information). function processes file, corrects annotations, saves updated files output folder. character vector provided correction, used directly list filenames correction. correction typically generated using Shiny app provides interactive interface browsing managing IFCB (Imaging FlowCytobot) image galleries. Shiny app can initialized using function ifcb_run_image_gallery().","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_correct_annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct Annotations in MATLAB Classlist Files — ifcb_correct_annotation","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a python session if not already set up ifcb_py_install()  # Correct class ID in .mat classlist files using a correction file ifcb_correct_annotation(\"input/manual\",                         \"output/manual\",                         \"corrections.txt\",                         99)  # Correct class ID in .mat classlist files using a character vector of filenames ifcb_correct_annotation(\"input/manual\",                         \"output/manual\",                         c(\"D20230917T153755_IFCB134_01724.png\",                           \"D20230917T110059_IFCB134_00380.png\"),                         99) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"function processes .mat files, generated code ifcb-analysis repository (Sosik Olson 2007), count summarize annotations class based class2use information provided file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"","code":"ifcb_count_mat_annotations(   manual_files,   class2use_file,   skip_class = NULL,   sum_level = \"class\",   mat_recursive = FALSE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"manual_files character string specifying path .mat files folder containing .mat files. class2use_file character string specifying path file containing class2use variable. skip_class numeric vector class IDs character vector class names excluded count. Default NULL. sum_level character string specifying level summarization. Options: \"sample\", \"roi\" \"class\" (default). mat_recursive Logical. TRUE, function search MATLAB files recursively manual_files folder. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"data frame total count images per class, roi per sample.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_count_mat_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count IFCB Annotations from .mat Files — ifcb_count_mat_annotations","text":"","code":"if (FALSE) { # \\dontrun{ # Count annotations excluding specific class IDs result <- ifcb_count_mat_annotations(\"path/to/manual_folder\",                                      \"path/to/class2use_file\",                                      skip_class = c(99, 100)) print(result)  # Count annotations excluding a specific class name result <- ifcb_count_mat_annotations(\"path/to/manual_folder\",                                      \"path/to/class2use_file\",                                      skip_class = \"unclassified\") print(result) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_class2use.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a class2use .mat File — ifcb_create_class2use","title":"Create a class2use .mat File — ifcb_create_class2use","text":"function creates .mat file containing character vector class names. class2use file can used manual annotation using code ifcb-analysis repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_class2use.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a class2use .mat File — ifcb_create_class2use","text":"","code":"ifcb_create_class2use(classes, filename, do_compression = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_class2use.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a class2use .mat File — ifcb_create_class2use","text":"classes character vector class names saved .mat file. filename string specifying output file path (.mat extension). do_compression logical value indicating whether compress .mat file. Defaults TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_class2use.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a class2use .mat File — ifcb_create_class2use","text":"return value. function called side effect creating .mat file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_class2use.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a class2use .mat File — ifcb_create_class2use","text":"function requires python interpreter installed. required python packages can installed virtual environment using ifcb_py_install.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_class2use.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a class2use .mat File — ifcb_create_class2use","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_class2use.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a class2use .mat File — ifcb_create_class2use","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: classes <- c(\"unclassified\", \"Dinobryon_spp\", \"Helicostomella_spp\")  ifcb_create_class2use(classes, \"class2use_output.mat\", do_compression = TRUE) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_empty_manual_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Empty Manual Classification MAT File — ifcb_create_empty_manual_file","title":"Create an Empty Manual Classification MAT File — ifcb_create_empty_manual_file","text":"Generates MAT file IFCB data empty manual classification structure using specified number ROIs, class names, saves specified output file. function utilizes Python script creating structure.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_empty_manual_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Empty Manual Classification MAT File — ifcb_create_empty_manual_file","text":"","code":"ifcb_create_empty_manual_file(   roi_length,   class2use,   output_file,   unclassified_id = 1,   do_compression = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_empty_manual_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Empty Manual Classification MAT File — ifcb_create_empty_manual_file","text":"roi_length Integer. number rows class list (number ROIs). class2use Character vector. names classes include class2use_manual field MAT file. output_file Character. path output MAT file saved. unclassified_id Integer. value use second column class list. Default 1. do_compression logical value indicating whether compress .mat file. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_empty_manual_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Empty Manual Classification MAT File — ifcb_create_empty_manual_file","text":"return value. function called side effects. created MAT file saved specified output_file location.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_empty_manual_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Empty Manual Classification MAT File — ifcb_create_empty_manual_file","text":"function requires python interpreter installed. required python packages can installed virtual environment using ifcb_py_install.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_empty_manual_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Empty Manual Classification MAT File — ifcb_create_empty_manual_file","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a python session if not already set up ifcb_py_install()  # Create a MAT file with 100 ROIs, using a vector of class names, and save it to \"output.mat\" ifcb_create_empty_manual_file(roi_length = 100,                               class2use = c(\"unclassified\", \"Aphanizomenon_spp\"),                               output_file = \"output.mat\")  # Create a MAT file with a different unclassified_id ifcb_create_empty_manual_file(roi_length = 100,                               class2use = c(\"unclassified\", \"Aphanizomenon_spp\"),                               output_file = \"output.mat\",                               unclassified_id = 999) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a MANIFEST.txt File — ifcb_create_manifest","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"function generates MANIFEST.txt file listing files specified folder subfolders, along sizes bytes. function can optionally exclude existing MANIFEST.txt file generated list. manifest may useful archiving images data repositories.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"","code":"ifcb_create_manifest(   folder_path,   manifest_path = file.path(folder_path, \"MANIFEST.txt\"),   exclude_manifest = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"folder_path character string specifying path folder whose files listed. manifest_path character string specifying path name MANIFEST.txt file created. Defaults \"folder_path/MANIFEST.txt\". exclude_manifest logical value indicating whether exclude existing MANIFEST.txt file list. Defaults TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"return value, called side effects. Creates MANIFEST.txt file specified location.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_create_manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a MANIFEST.txt File — ifcb_create_manifest","text":"","code":"if (FALSE) { # \\dontrun{ # Create a MANIFEST.txt file for the current directory ifcb_create_manifest(\".\")  # Create a MANIFEST.txt file for a specific directory, excluding an existing MANIFEST.txt file ifcb_create_manifest(\"path/to/directory\")  # Create a MANIFEST.txt file and save it to a specific path ifcb_create_manifest(\"path/to/directory\", manifest_path = \"path/to/manifest/MANIFEST.txt\")  # Create a MANIFEST.txt file without excluding an existing MANIFEST.txt file ifcb_create_manifest(\"path/to/directory\", exclude_manifest = FALSE) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Test IFCB Data — ifcb_download_test_data","title":"Download Test IFCB Data — ifcb_download_test_data","text":"function downloads zip archive containing MATLAB files iRfcb dataset available SMHI IFCB Plankton Image Reference Library (Torstensson et al. 2024), unzips specified folder extracts png images. data can used, instance, testing iRfcb creating tutorial vignette using vignette(\"tutorial\", package = \"iRfcb\")","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Test IFCB Data — ifcb_download_test_data","text":"","code":"ifcb_download_test_data(   dest_dir,   figshare_article = \"48158716\",   max_retries = 5,   sleep_time = 10,   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Test IFCB Data — ifcb_download_test_data","text":"dest_dir destination directory files unzipped. figshare_article file article number SciLifeLab Figshare data repository. default, iRfcb test dataset (48158716) Torstensson et al. (2024) used. max_retries maximum number retry attempts case download failure. Default 5. sleep_time sleep time download attempts, seconds. Default 10. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Test IFCB Data — ifcb_download_test_data","text":"return value. function called side effect downloading, extracting, organizing IFCB test data.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download Test IFCB Data — ifcb_download_test_data","text":"Torstensson, Anders; Skjevik, Ann-Turi; Mohlin, Malin; Karlberg, Maria; Karlson, Bengt (2024). SMHI IFCB Plankton Image Reference Library. Version 3. SciLifeLab. Dataset. doi:10.17044/scilifelab.25883455.v3","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_download_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Test IFCB Data — ifcb_download_test_data","text":"","code":"if (FALSE) { # \\dontrun{ # Download and unzip IFCB test data into the \"data\" directory ifcb_download_test_data(\"data\") } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"function extracts labeled images IFCB (Imaging FlowCytobot) data, annotated using MATLAB code ifcb-analysis repository (Sosik Olson 2007). reads manually classified data, maps class indices class names, extracts corresponding Region Interest (ROI) images, saving specified directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"","code":"ifcb_extract_annotated_images(   manual_folder,   class2use_file,   roi_folder,   out_folder,   skip_class = NA,   verbose = TRUE,   manual_recursive = FALSE,   roi_recursive = TRUE,   overwrite = FALSE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"manual_folder character string specifying path directory containing manually classified .mat files. class2use_file character string specifying path file containing class names. roi_folder character string specifying path directory containing ROI files. out_folder character string specifying output directory extracted images saved. skip_class numeric vector class IDs character vector class names excluded count. Default NULL. verbose logical value indicating whether print progress messages. Default TRUE. manual_recursive Logical. TRUE, function search MATLAB files recursively within manual_folder. Default FALSE. roi_recursive Logical. TRUE, function search data files recursively within roi_folder (provided). Default TRUE. overwrite logical value indicating whether overwrite existing PNG files. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"None. function saves extracted PNG images specified output directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_annotated_images.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Annotated Images from IFCB Data — ifcb_extract_annotated_images","text":"","code":"if (FALSE) { # \\dontrun{ ifcb_extract_annotated_images(   manual_folder = \"path/to/manual_folder\",   class2use_file = \"path/to/class2use_file.mat\",   roi_folder = \"path/to/roi_folder\",   out_folder = \"path/to/out_folder\",   skip_class = 1 ) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"function reads biovolume data feature files generated ifcb-analysis repository (Sosik Olson 2007) matches corresponding classification results manual annotations. calculates biovolume cubic micrometer determines class diatom based World Register Marine Species (WoRMS). Carbon content computed roi using specific conversion functions depending whether class identified diatom , according Menden-Deuer Lessard 2000.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"","code":"ifcb_extract_biovolumes(   feature_files,   mat_folder,   class2use_file = NULL,   micron_factor = 1/3.4,   diatom_class = \"Bacillariophyceae\",   marine_only = FALSE,   threshold = \"opt\",   multiblob = FALSE,   feature_recursive = TRUE,   mat_recursive = TRUE,   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"feature_files path folder containing feature files character vector file paths. mat_folder Path folder containing class manual files. class2use_file character string specifying path file containing class2use variable (default NULL). micron_factor Conversion factor biovolume cubic microns. Default 1 / 3.4. diatom_class string vector diatom class names World Register Marine Species (WoRMS). Default \"Bacillariophyceae\". marine_only Logical. TRUE, restricts WoRMS search marine taxa . Default FALSE. threshold Threshold selecting class information (\"opt\" , default \"opt\"). multiblob logical indicating whether include multiblob features. Default FALSE. feature_recursive Logical. TRUE, function search feature files recursively within feature_files folder. Default TRUE. mat_recursive Logical. TRUE, function search MATLAB files recursively within mat_folder. Default TRUE. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"data frame containing 'sample', 'classifier' 'roi_number', 'class', 'biovolume_um3', computed 'carbon_pg'.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"function combines biovolume data extracted feature files class information read corresponding MATLAB files. determines class diatom based user-defined criteria computes carbon content using conversion functions specific diatoms non-diatom protists.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"Menden-Deuer Susanne, Lessard Evelyn J., (2000), Carbon volume relationships dinoflagellates, diatoms, protist plankton, Limnology Oceanography, 3, doi: 10.4319/lo.2000.45.3.0569. Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_biovolumes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Biovolumes from IFCB Data and Compute Carbon Content — ifcb_extract_biovolumes","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: feature_files <- \"data/features\" mat_folder <- \"data/classified\" biovolume_df <- ifcb_extract_biovolumes(feature_files, mat_folder) print(biovolume_df) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"function reads MATLAB classified sample file (.mat) generated start_classify_batch_user_training function ifcb-analysis repository (Sosik Olson 2007), extracts specified taxa images corresponding ROI files, saves image specified directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"","code":"ifcb_extract_classified_images(   sample,   classified_folder,   roi_folder,   out_folder,   taxa = \"All\",   threshold = \"opt\",   verbose = TRUE,   overwrite = FALSE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"sample character string specifying sample name. classified_folder character string specifying directory containing classified files. roi_folder character string specifying directory containing ROI files. out_folder character string specifying directory save extracted images. taxa character string specifying taxa extract. Default \"\". threshold character string specifying threshold use (\"none\", \"opt\", \"adhoc\"). Default \"opt\". verbose logical value indicating whether print progress messages. Default TRUE. overwrite logical value indicating whether overwrite existing PNG files. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"return value, called side effects. Extracts saves taxa images directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_classified_images.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Taxa Images from MATLAB Classified Sample — ifcb_extract_classified_images","text":"","code":"if (FALSE) { # \\dontrun{ # Define the parameters sample <- \"D20230311T092911_IFCB135\" classified_folder <- \"path/to/classified_folder\" roi_folder <- \"path/to/roi_folder\" out_folder <- \"path/to/outputdir\" taxa <- \"All\"  # or specify a particular taxa threshold <- \"opt\"  # or specify another threshold  # Extract taxa images from the classified sample ifcb_extract_classified_images(sample, classified_folder, roi_folder, out_folder, taxa, threshold) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Images from IFCB ROI File — ifcb_extract_pngs","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"function reads IFCB (.roi) file corresponding .adc file, extracts regions interest (ROIs), saves ROI PNG image specified directory. Optionally, can specify ROI numbers extract, useful specific ROIs manual automatic classification results.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"","code":"ifcb_extract_pngs(   roi_file,   out_folder = dirname(roi_file),   ROInumbers = NULL,   taxaname = NULL,   gamma = 1,   verbose = TRUE,   overwrite = FALSE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"roi_file character string specifying path .roi file. out_folder character string specifying directory PNG images saved. Defaults directory ROI file. ROInumbers optional numeric vector specifying ROI numbers extract. NULL, ROIs valid dimensions extracted. taxaname optional character string specifying taxa name organizing images subdirectories. Defaults NULL. gamma numeric value gamma correction applied image. Default 1 (correction). Values <1 increase contrast dark regions, values >1 decrease contrast. verbose logical value indicating whether print progress messages. Default TRUE. overwrite logical value indicating whether overwrite existing PNG files. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"function called side effects: writes PNG images directory.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_extract_pngs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Images from IFCB ROI File — ifcb_extract_pngs","text":"","code":"if (FALSE) { # \\dontrun{ # Convert ROI file to PNG images ifcb_extract_pngs(\"path/to/your_roi_file.roi\")  # Extract specific ROI numbers from ROI file ifcb_extract_pngs(\"path/to/your_roi_file.roi\", \"output_directory\", ROInumbers = c(1, 2, 3)) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ecotaxa_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Ecotaxa Column Names — ifcb_get_ecotaxa_example","title":"Get Ecotaxa Column Names — ifcb_get_ecotaxa_example","text":"function reads example EcoTaxa metadata file included iRfcb package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ecotaxa_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Ecotaxa Column Names — ifcb_get_ecotaxa_example","text":"","code":"ifcb_get_ecotaxa_example(example = \"ifcb\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ecotaxa_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Ecotaxa Column Names — ifcb_get_ecotaxa_example","text":"example character string specifying example EcoTaxa metadata file load. Options : \"minimal\" Loads minimal example, fully manual entry. \"full_unknown\" Loads full featured example, unknown objects . \"full_classified\" Loads full featured example, already classified objects. \"ifcb\" (Default) Loads full IFCB-specific dataset used EcoTaxa submissions.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ecotaxa_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Ecotaxa Column Names — ifcb_get_ecotaxa_example","text":"data frame containing EcoTaxa example metadata.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ecotaxa_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Ecotaxa Column Names — ifcb_get_ecotaxa_example","text":"function loads different types EcoTaxa metadata examples based user's need. examples include minimal template manual data entry, well fully featured datasets without classified objects. default IFCB-specific example, originating https://github.com/VirginieSonnet/IFCBdatabaseToEcotaxa. example headers can used submitting data Imaging FlowCytobot (IFCB) instruments EcoTaxa https://ecotaxa.obs-vlfr.fr/.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ecotaxa_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Ecotaxa Column Names — ifcb_get_ecotaxa_example","text":"","code":"ecotaxa_example <- ifcb_get_ecotaxa_example()  # Print the first five columns dplyr::tibble(ecotaxa_example) #> # A tibble: 5 × 282 #>   img_file_name          object_id object_lat object_lon object_date object_time #>   <chr>                  <chr>     <chr>      <chr>      <chr>       <chr>       #> 1 [t]                    [t]       [f]        [f]        [t]         [t]         #> 2 D20190124T213523_IFCB… D2019012… 41.4922    -71.4193   20190124    213523      #> 3 D20190124T213523_IFCB… D2019012… 41.4922    -71.4193   20190124    213523      #> 4 D20190124T213523_IFCB… D2019012… 41.4922    -71.4193   20190124    213523      #> 5 D20190124T213523_IFCB… D2019012… 41.4922    -71.4193   20190124    213523      #> # ℹ 276 more variables: object_link <chr>, object_depth_min <chr>, #> #   object_depth_max <chr>, object_annotation_status <chr>, #> #   object_annotation_person_name <chr>, object_annotation_person_email <chr>, #> #   object_annotation_date <chr>, object_annotation_time <chr>, #> #   object_annotation_category <chr>, object_aphiaid <chr>, #> #   object_annotation_hierarchy <chr>, object_roi_number <chr>, #> #   object_area <chr>, object_biovolume <chr>, …"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ferrybox_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Ferrybox Data for Specified Timestamps — ifcb_get_ferrybox_data","title":"Retrieve Ferrybox Data for Specified Timestamps — ifcb_get_ferrybox_data","text":"internal SMHI function reads .txt files specified folder containing Ferrybox data, filters based specified ship name (default \"SveaFB\" R/V Svea), extracts data (including GPS coordinates) timestamps (rounded nearest minute) falling within date ranges defined file names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ferrybox_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Ferrybox Data for Specified Timestamps — ifcb_get_ferrybox_data","text":"","code":"ifcb_get_ferrybox_data(   timestamps,   ferrybox_folder,   parameters = c(\"8002\", \"8003\"),   ship = \"SveaFB\",   latitude_param = \"8002\",   longitude_param = \"8003\" )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ferrybox_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Ferrybox Data for Specified Timestamps — ifcb_get_ferrybox_data","text":"timestamps vector POSIXct timestamps GPS coordinates associated parameter data retrieved. ferrybox_folder string representing path folder containing Ferrybox .txt files. parameters character vector specifying parameters extract Ferrybox data. Defaults c(\"8002\", \"8003\"). ship string representing name ship filter Ferrybox files. default \"SveaFB\". latitude_param string specifying header name latitude column Ferrybox data. Default \"8002\". longitude_param string specifying header name longitude column Ferrybox data. Default \"8003\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ferrybox_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Ferrybox Data for Specified Timestamps — ifcb_get_ferrybox_data","text":"data frame containing input timestamps corresponding data specified parameters. Columns include 'timestamp', 'gpsLatitude', 'gpsLongitude' (applicable), specified parameters.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ferrybox_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Ferrybox Data for Specified Timestamps — ifcb_get_ferrybox_data","text":"function extracts data files whose names match specified ship fall within date ranges defined file names. columns corresponding latitude_param longitude_param renamed gpsLatitude gpsLongitude, respectively, present parameters argument. function also handles cases exact timestamp missing attempting interpolate data using floor ceiling rounding methods. final output ensure specified parameters numeric.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_ferrybox_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Ferrybox Data for Specified Timestamps — ifcb_get_ferrybox_data","text":"","code":"if (FALSE) { # \\dontrun{ ferrybox_folder <- \"/path/to/ferrybox/data\" timestamps <- as.POSIXct(c(\"2016-08-10 10:47:34 UTC\",                            \"2016-08-10 11:12:21 UTC\",                            \"2016-08-10 11:35:59 UTC\"))  result <- ifcb_get_ferrybox_data(timestamps, ferrybox_folder) print(result) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Variable Names from a MAT File — ifcb_get_mat_names","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"function reads .mat file generated ifcb-analysis repository (Sosik Olson 2007) retrieves names variables stored within .","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"","code":"ifcb_get_mat_names(mat_file)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"mat_file character string specifying path .mat file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"character vector variable names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Variable Names from a MAT File — ifcb_get_mat_names","text":"","code":"if (FALSE) { # \\dontrun{ # Get variable names from a MAT file variables <- ifcb_get_mat_names(\"path/to/file.mat\") print(variables) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Classes from a MAT File — ifcb_get_mat_variable","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"function reads specified variable .mat file generated ifcb-analysis repository (Sosik Olson 2007). can used, example, extract lists classes file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"","code":"ifcb_get_mat_variable(mat_file, variable_name = \"class2use\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"mat_file character string specifying path .mat file containing class information. variable_name character string specifying variable name .mat file contains class information. default \"class2use\". examples include \"class2use.manual\" manual file, \"class2use.auto\" class list used automatic assignment. can find available variable names using function ifcb_get_mat_names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"character vector class names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_mat_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Classes from a MAT File — ifcb_get_mat_variable","text":"","code":"if (FALSE) { # \\dontrun{ # Get class names from a class2use file classes <- ifcb_get_mat_variable(\"path/to/class2use.mat\", \"class2use\") print(classes)  # Get class names from a classifier file class2useTB <- ifcb_get_mat_variable(\"path/to/classified/sample.mat\", \"class2useTB\") print(class2useTB) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"function imports IFCB header file (either local path URL), extracts specific target values runtime inhibittime, returns structured format (seconds). R equivalent function IFCBxxx_readhdr ifcb-analysis repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"","code":"ifcb_get_runtime(hdr_file)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"hdr_file character string specifying full path .hdr file URL.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"list (hdr) containing runtime, inhibittime, runType (available) extracted header file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_runtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read IFCB Header File and Extract Runtime Information — ifcb_get_runtime","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Read and extract information from an IFCB header file hdr_info <- ifcb_get_runtime(\"path/to/IFCB_hdr_file.hdr\") print(hdr_info) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Shark Column Names — ifcb_get_shark_colnames","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"function reads SHARK column names specified tab-separated values (TSV) file included package. columns used submitting IFCB data https://shark.smhi.se/.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"","code":"ifcb_get_shark_colnames(minimal = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"minimal logical value indicating whether load minimal set column names required data submission SHARK. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"empty data frame containing SHARK column names.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"detailed example data submission, see ifcb_get_shark_example.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Shark Column Names — ifcb_get_shark_colnames","text":"","code":"shark_colnames <- ifcb_get_shark_colnames() print(shark_colnames) #>  [1] MYEAR                  STATN                  SAMPLING_PLATFORM      #>  [4] PROJ                   ORDERER                SHIPC                  #>  [7] CRUISE_NO              DATE_TIME              SDATE                  #> [10] STIME                  TIMEZONE               LATIT                  #> [13] LONGI                  POSYS                  WADEP                  #> [16] MPROG                  MNDEP                  MXDEP                  #> [19] SLABO                  ACKR_SMP               SMTYP                  #> [22] PDMET                  SMVOL                  METFP                  #> [25] IFCBNO                 SMPNO                  LATNM                  #> [28] SFLAG                  LATNM_SFLAG            TRPHY                  #> [31] APHIA_ID               IMAGE_VERIFICATION     VERIFIED_BY            #> [34] COUNT                  ABUND                  BIOVOL                 #> [37] C_CONC                 QFLAG                  COEFF                  #> [40] CLASS_NAME             CLASS_F1               UNCLASSIFIED_COUNTS    #> [43] UNCLASSIFIED_ABUNDANCE UNCLASSIFIED_VOLUME    METOA                  #> [46] ASSOCIATED_MEDIA       CLASSPROG              ALABO                  #> [49] ACKR_ANA               ANADATE                METDC                  #> [52] TRAINING_SET           CLASSIFIER_USED        MANUAL_QC_DATE         #> [55] PRE_FILTER_SIZE        PH_FB                  CHL_FB                 #> [58] CDOM_FB                PHYC_FB                PHER_FB                #> [61] WATERFLOW_FB           TURB_FB                PCO2_FB                #> [64] TEMP_FB                PSAL_FB                OSAT_FB                #> [67] DOXY_FB                #> <0 rows> (or 0-length row.names)  shark_colnames_minimal <- ifcb_get_shark_colnames(minimal = TRUE) print(shark_colnames_minimal) #>  [1] MYEAR               STATN               PROJ                #>  [4] ORDERER             SHIPC               SDATE               #>  [7] STIME               LATIT               LONGI               #> [10] POSYS               MNDEP               MXDEP               #> [13] SLABO               ACKR_SMP            SMTYP               #> [16] SMVOL               IFCBNO              SMPNO               #> [19] LATNM               SFLAG               TRPHY               #> [22] IMAGE_VERIFICATION  VERIFIED_BY         COUNT               #> [25] QFLAG               COEFF               CLASS_F1            #> [28] UNCLASSIFIED_COUNTS METOA               ASSOCIATED_MEDIA    #> [31] CLASSPROG           TRAINING_SET        ALABO               #> [34] ACKR_ANA            ANADATE             METDC               #> [37] CLASSIFIER_USED     #> <0 rows> (or 0-length row.names)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Shark Column Example — ifcb_get_shark_example","title":"Get Shark Column Example — ifcb_get_shark_example","text":"function reads SHARK submission example file included package. format used submitting IFCB data https://shark.smhi.se/.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Shark Column Example — ifcb_get_shark_example","text":"","code":"ifcb_get_shark_example()"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Shark Column Example — ifcb_get_shark_example","text":"data frame containing example data following SHARK submission format.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_shark_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Shark Column Example — ifcb_get_shark_example","text":"","code":"shark_example <- ifcb_get_shark_example()  # Print example as tibble dplyr::tibble(shark_example) #> # A tibble: 5 × 67 #>   MYEAR STATN    SAMPLING_PLATFORM PROJ  ORDERER SHIPC CRUISE_NO DATE_TIME SDATE #>   <int> <chr>    <chr>             <chr> <chr>   <chr>     <int> <chr>     <chr> #> 1  2022 RV_FB_D… IFCB              IFCB… SMHI    77SE         12 2,02E+13  2022… #> 2  2022 RV_FB_D… IFCB              IFCB… SMHI    77SE         12 2,02E+13  2022… #> 3  2022 RV_FB_D… IFCB              IFCB… SMHI    77SE         12 2,02E+13  2022… #> 4  2022 RV_FB_D… IFCB              IFCB… SMHI    77SE         12 2,02E+13  2022… #> 5  2022 RV_FB_D… SveaFB            IFCB… SMHI    77SE         12 2,02E+13  2022… #> # ℹ 58 more variables: STIME <chr>, TIMEZONE <chr>, LATIT <dbl>, LONGI <dbl>, #> #   POSYS <chr>, WADEP <lgl>, MPROG <chr>, MNDEP <int>, MXDEP <int>, #> #   SLABO <chr>, ACKR_SMP <chr>, SMTYP <chr>, PDMET <chr>, SMVOL <dbl>, #> #   METFP <chr>, IFCBNO <chr>, SMPNO <chr>, LATNM <chr>, SFLAG <chr>, #> #   LATNM_SFLAG <chr>, TRPHY <chr>, APHIA_ID <int>, IMAGE_VERIFICATION <chr>, #> #   VERIFIED_BY <lgl>, COUNT <int>, ABUND <dbl>, BIOVOL <dbl>, C_CONC <dbl>, #> #   QFLAG <lgl>, COEFF <dbl>, CLASS_NAME <chr>, CLASS_F1 <dbl>, …"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"function matches specified list taxa summarized list trophic types various plankton taxa Northern Europe (data sourced SMHI Trophic Type).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"","code":"ifcb_get_trophic_type(taxa_list = NULL, print_complete_list = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"taxa_list character vector scientific names trophic types retrieved. print_complete_list Logical, TRUE, prints complete list summarized trophic types.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"character vector trophic types corresponding scientific names taxa_list, data frame containing taxa trophic types available SMHI Trophic Type list. available trophic types autotrophic (AU), heterotrophic (HT), mixotrophic (MX) specified (NS).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"multiple trophic types scientific name (.e. AU HT size classes), summarized trophic type \"NS\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_get_trophic_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Trophic Type for a List of Plankton Taxa — ifcb_get_trophic_type","text":"","code":"# Example usage: taxa_list <- c(\"Acanthoceras zachariasii\",                \"Nodularia spumigena\",                \"Acanthoica quattrospina\",                \"Noctiluca\",                \"Gymnodiniales\")  ifcb_get_trophic_type(taxa_list) #> [1] \"AU\" \"AU\" \"MX\" \"HT\" \"NS\""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Diatoms in Taxa List — ifcb_is_diatom","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"function takes list taxa names, cleans , retrieves corresponding classification records World Register Marine Species (WoRMS), checks belong specified diatom class. function uses first name (genus name) taxa classification.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"","code":"ifcb_is_diatom(   taxa_list,   diatom_class = \"Bacillariophyceae\",   max_retries = 3,   sleep_time = 10,   marine_only = FALSE,   fuzzy = deprecated(),   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"taxa_list character vector containing list taxa names. diatom_class character string vector specifying class name(s) identified diatoms, according WoRMS. Default \"Bacillariophyceae\". max_retries integer specifying maximum number attempts retrieve WoRMS records case error. Default 3. sleep_time numeric value indicating number seconds wait retry attempts. Default 10 seconds. marine_only Logical. TRUE, restricts search marine taxa . Default FALSE. fuzzy fuzzy argument longer available verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"logical vector indicating whether cleaned taxa name belongs specified diatom class.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_diatom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Diatoms in Taxa List — ifcb_is_diatom","text":"","code":"if (FALSE) { # \\dontrun{ taxa_list <- c(\"Nitzschia_sp\", \"Chaetoceros_sp\", \"Dinophysis_norvegica\", \"Thalassiosira_sp\") ifcb_is_diatom(taxa_list) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"function checks vectors latitude longitude points within user-supplied sea basin. Baltic Sea basins included pre-packaged shapefile iRfcb package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"","code":"ifcb_is_in_basin(latitudes, longitudes, plot = FALSE, shape_file = NULL)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"latitudes numeric vector latitude points. longitudes numeric vector longitude points. plot boolean indicating whether plot points sea basin. Default FALSE. shape_file absolute path custom polygon shapefile WGS84 (EPSG:4326) represents specific sea basin. Default land-buffered shapefile Baltic Sea basins, included iRfcb package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"logical vector indicating whether point within specified sea basin, plot points basins plot = TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"function reads pre-packaged shapefile Baltic Sea Basin iRfcb package default, user-supplied shapefile provided. sets CRS, transforms CRS WGS84 (EPSG:4326) necessary, checks given points fall within specified sea basin. Optionally, plots points sea basin polygons together.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_in_basin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Points are in a Specific Sea Basin — ifcb_is_in_basin","text":"","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check if the points are in the Baltic Sea Basin points_in_the_baltic <- ifcb_is_in_basin(latitudes, longitudes) print(points_in_the_baltic) #> [1]  TRUE  TRUE FALSE FALSE  # Plot the points and the basin ifcb_is_in_basin(latitudes, longitudes, plot = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Positions are Near Land — ifcb_is_near_land","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"Determines whether given positions near land based coastline shape file. Natural Earth 1:10m land vectors included default shapefile iRfcb.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"","code":"ifcb_is_near_land(   latitudes,   longitudes,   distance = 500,   shape = NULL,   crs = 4326,   utm_zone = 33,   remove_small_islands = TRUE,   small_island_threshold = 2e+06 )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"latitudes Numeric vector latitudes positions. longitudes Numeric vector longitudes positions. distance Buffer distance meters around coastline. Default 500 m. shape Optional path shapefile containing coastline data. provided, function use shapefile instead default Natural Earth 1:10m land vectors. Using detailed shapefile allows smaller buffer distance. detailed European coastlines, download polygons EEA https://www.eea.europa.eu/data--maps/data/eea-coastline--analysis-2/gis-data/eea-coastline-polygon. detailed world maps, download Natural Earth https://www.naturalearthdata.com/downloads/10m-physical-vectors/. crs Coordinate reference system (CRS) use positions output. Default EPSG code 4326 (WGS84). utm_zone UTM zone buffering coastline. Default 33 (12°E 18°E, northern hemisphere). remove_small_islands Logical indicating whether remove small islands coastline custom shapefile provided. Default TRUE. small_island_threshold Area threshold square meters islands considered small removed, remove_small_islands set TRUE. Default 2 sqkm.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"Logical vector indicating whether position near land.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"function calculates buffered area around coastline checks given positions (specified longitudes latitudes) within buffer intersect land.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_is_near_land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"","code":"# Define coordinates latitudes <- c(62.500353, 58.964498, 57.638725, 56.575338) longitudes <- c(17.845993, 20.394418, 18.284523, 16.227174)  # Call the function near_land <- ifcb_is_near_land(latitudes, longitudes, distance = 300, crs = 4326)  # Print the result print(near_land) #> [1]  TRUE FALSE  TRUE FALSE"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_match_taxa_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve WoRMS Records with Retry Mechanism — ifcb_match_taxa_names","title":"Retrieve WoRMS Records with Retry Mechanism — ifcb_match_taxa_names","text":"function attempts retrieve WoRMS records using provided taxa names. retries operation error occurs, specified number attempts.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_match_taxa_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve WoRMS Records with Retry Mechanism — ifcb_match_taxa_names","text":"","code":"ifcb_match_taxa_names(   taxa_names,   best_match_only = TRUE,   max_retries = 3,   sleep_time = 10,   marine_only = FALSE,   return_list = FALSE,   verbose = TRUE,   fuzzy = deprecated() )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_match_taxa_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve WoRMS Records with Retry Mechanism — ifcb_match_taxa_names","text":"taxa_names character vector taxa names retrieve records . best_match_only logical value indicating whether automatically select first match return single match. Default TRUE. max_retries integer specifying maximum number attempts retrieve records. sleep_time numeric value indicating number seconds wait retry attempts. marine_only Logical. TRUE, restricts search marine taxa . Default FALSE. return_list logical value indicating whether return output list. Default FALSE, result returned dataframe. verbose logical indicating whether print progress messages. Default TRUE. fuzzy fuzzy argument longer available","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_match_taxa_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve WoRMS Records with Retry Mechanism — ifcb_match_taxa_names","text":"data frame (list return_list TRUE) WoRMS records NULL retrieval fails maximum number attempts.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_match_taxa_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve WoRMS Records with Retry Mechanism — ifcb_match_taxa_names","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Retrieve WoRMS records for a list of taxa names taxa <- c(\"Calanus finmarchicus\", \"Thalassiosira pseudonana\", \"Phaeodactylum tricornutum\") records <- ifcb_match_taxa_names(taxa_names = taxa,                                  max_retries = 3,                                  sleep_time = 5,                                  marine_only = TRUE,                                  verbose = TRUE)  print(records) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_merge_manual.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge IFCB Manual Classification Data — ifcb_merge_manual","title":"Merge IFCB Manual Classification Data — ifcb_merge_manual","text":"function merges two sets manual classification data combining aligning class labels base set additional set classifications. merged .mat data can used code ifcb-analysis repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_merge_manual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge IFCB Manual Classification Data — ifcb_merge_manual","text":"","code":"ifcb_merge_manual(   class2use_file_base,   class2use_file_additions,   class2use_file_output = NULL,   manual_folder_base,   manual_folder_additions,   manual_folder_output,   do_compression = TRUE,   temp_index_offset = 50000,   quiet = FALSE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_merge_manual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge IFCB Manual Classification Data — ifcb_merge_manual","text":"class2use_file_base Character. Path class2use file base manual classifications. base set contains original manual classifications list form foundation merging. class2use_file_additions Character. Path class2use file additions manual classifications. additions set contains additional classifications need merged base set. Class labels class2use_file_additions already included class2use_file_base added generate class2use_file_output. class2use_file_output Character. Path merged class2use file saved. NULL, merged file stored directory class2use_file_base. Default NULL. manual_folder_base Character. Path folder containing base set manual classification .mat files. manual_folder_additions Character. Path folder containing additions set manual classification .mat files. manual_folder_output Character. Path output folder merged classification files stored. do_compression logical value indicating whether compress .mat file. Defaults TRUE. temp_index_offset Numeric. large integer used generate temporary indices merge process. Default 50000. quiet Logical. TRUE, suppresses output messages. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_merge_manual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge IFCB Manual Classification Data — ifcb_merge_manual","text":"return value. Outputs combined class2use file folder class2use_file_base located user-specified location, merged .mat files output folder.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_merge_manual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge IFCB Manual Classification Data — ifcb_merge_manual","text":"function requires python interpreter installed. required python packages can installed virtual environment using ifcb_py_install. base set consists original classifications used reference merging process. additions set contains additional classifications need merged base set. merging, unique class names additions set present base set appended. function works aligning class labels additions set base set, handling conflicts using temporary index system. copies .mat files base additions folders output folder, adjusting indices class names additions. Note maximum limit uint16 65,535, ensure temp_index_offset remains value.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_merge_manual.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Merge IFCB Manual Classification Data — ifcb_merge_manual","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_merge_manual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge IFCB Manual Classification Data — ifcb_merge_manual","text":"","code":"if (FALSE) { # \\dontrun{ ifcb_merge_manual(\"path/to/class2use_base.mat\", \"path/to/class2use_additions.mat\",                   \"path/to/class2use_combined.mat\", \"path/to/manual/base_folder\",                   \"path/to/manual/additions_folder\", \"path/to/manual/output_folder\",                   do_compression = TRUE, temp_index_offset = 50000, quiet = FALSE) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot and Save IFCB PSD Data — ifcb_psd","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"function generates saves data dataset's Particle Size Distribution (PSD) Imaging FlowCytobot (IFCB) feature hdr files, can used data quality assurance quality control.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"","code":"ifcb_psd(   feature_folder,   hdr_folder,   save_data = FALSE,   output_file = NULL,   plot_folder = NULL,   use_marker = FALSE,   start_fit = 10,   r_sqr = 0.5,   beads = NULL,   bubbles = NULL,   incomplete = NULL,   missing_cells = NULL,   biomass = NULL,   bloom = NULL,   humidity = NULL,   micron_factor = 1/3.4 )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"feature_folder absolute path directory containing v2 feature files dataset. hdr_folder absolute path directory containing hdr files dataset. save_data boolean indicating whether save data CSV files. Default FALSE. output_file string base file name .csv use (including path). Set NULL save data (default). plot_folder folder graph images file saved. Set NULL save graphs (default). use_marker boolean indicating whether show markers plot. Default FALSE. start_fit integer indicating start fit value plot. Default 10. r_sqr lower limit acceptable R^2 values (curves flagged). Default 0.5. beads maximum multiplier curve fit. files higher curve fit multipliers flagged bead runs. argument included, files \"runBeads\" marked TRUE header file also flagged bead run. Optional. bubbles minimum difference starting ESD ESD targets.  files difference higher threshold flagged mostly bubbles. Optional. incomplete tuple minimum volume cells (c/L) minimum mL analyzed complete run. files values thresholds flagged incomplete. Optional. missing_cells minimum image count trigger count ratio. files lower ratios flagged missing cells. Optional. biomass minimum number targets populated ESD bin given run. files fewer targets flagged low biomass. Optional. bloom minimum difference starting ESD ESD targets. files difference less threshold flagged bloom. likely lower bubbles threshold. Optional. humidity maximum percent humidity. files higher values flagged high humidity. Optional. micron_factor conversion factor microns. Default 1/3.4.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"list data, fits, flags DataFrames save_data FALSE; otherwise, NULL.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"PSD function originates PSD python repository (Hayashi et al. prep), can found https://github.com/kudelalab/PSD. function requires python interpreter installed. required python packages can installed virtual environment using ifcb_py_install. function requires v2 features generated ifcb-analysis MATLAB package (Sosik Olson 2007) found https://github.com/hsosik/ifcb-analysis.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"Hayashi, K., Walton, J., Lie, ., Smith, J. Kudela M. Using particle size distribution (PSD) automate imaging flow cytobot (IFCB) data quality coastal California, USA. prep. Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot and Save IFCB PSD Data — ifcb_psd","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize the python session if not already set up ifcb_py_install()  ifcb_psd(   feature_folder = 'path/to/features',   hdr_folder = 'path/to/hdr_data',   save_data = TRUE,   output_file = 'psd/svea_2021',   plot_folder = 'psd/plots',   use_marker = FALSE,   start_fit = 13,   r_sqr = 0.5,   beads = 10 ** 9,   bubbles = 150,   incomplete = c(1500, 3),   missing_cells = 0.7,   biomass = 1000,   bloom = 5,   humidity = NULL,   micron_factor = 1/3.0 ) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"function generates plot given sample Particle Size Distribution (PSD) data fits Imaging FlowCytobot (IFCB). PSD data fits can generated ifcb_psd (Hayashi et al. prep).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"","code":"ifcb_psd_plot(sample_name, data, fits, start_fit)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"sample_name name sample plot DYYYYMMDDTHHMMSS. data data frame containing PSD data (data output ifcb_psd), row represents sample column represents different particle sizes micrometers. fits data frame containing fit parameters power curve (fits output ifcb_psd), row represents sample columns include parameters , k, R2. start_fit x-value threshold data excluded plot fit.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"ggplot object representing PSD plot sample.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"Hayashi, K., Walton, J., Lie, ., Smith, J. Kudela M. Using particle size distribution (PSD) automate imaging flow cytobot (IFCB) data quality coastal California, USA. prep.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_psd_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate PSD Plot for a Given Sample — ifcb_psd_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Analyze PSD psd <- ifcb_psd(feature_folder = 'path/to/features',                 hdr_folder = 'path/to/hdr_data',                 save_data = TRUE,                 output_file = 'psd/svea_2021',                 plot_folder = NULL,                 use_marker = FALSE,                 start_fit = 13,                 r_sqr = 0.5,                 beads = 10 ** 9,                 bubbles = 150,                 incomplete = c(1500, 3),                 missing_cells = 0.7,                 biomass = 1000,                 bloom = 5,                 humidity = NULL)  # Plot PSD of the first sample plot <- ifcb_psd_plot(sample_name = \"D20230316T101514\",                       data = psd$data,                       fits = psd$fits,                       start_fit = 10) # Inspect plot print(plot) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_py_install.html","id":null,"dir":"Reference","previous_headings":"","what":"Install iRfcb Python Environment — ifcb_py_install","title":"Install iRfcb Python Environment — ifcb_py_install","text":"function creates activates Python virtual environment named \"iRfcb\" installs required Python packages specified \"requirements.txt\" file. Additional packages can installed passing packages argument.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_py_install.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install iRfcb Python Environment — ifcb_py_install","text":"","code":"ifcb_py_install(..., envname = \".virtualenvs/iRfcb\")"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_py_install.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install iRfcb Python Environment — ifcb_py_install","text":"... Additional arguments passed virtualenv_create, packages. envname character string specifying name virtual environment create. Default \".virtualenvs/iRfcb\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_py_install.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install iRfcb Python Environment — ifcb_py_install","text":"return value. function called side effect creating configuring Python virtual environment.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_py_install.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install iRfcb Python Environment — ifcb_py_install","text":"","code":"if (FALSE) { # \\dontrun{ # Install the iRfcb Python environment ifcb_py_install()  # Install the iRfcb Python environment with additional packages ifcb_py_install(packages = c(\"numpy\", \"pandas\")) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Feature Files from a Specified Folder or File Paths — ifcb_read_features","title":"Read Feature Files from a Specified Folder or File Paths — ifcb_read_features","text":"function reads feature files given folder specified set file paths, optionally filtering based whether multiblob single blob files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Feature Files from a Specified Folder or File Paths — ifcb_read_features","text":"","code":"ifcb_read_features(feature_files = NULL, multiblob = FALSE, verbose = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Feature Files from a Specified Folder or File Paths — ifcb_read_features","text":"feature_files path folder containing feature files character vector file paths. multiblob Logical indicating whether filter multiblob files (default: FALSE). verbose Logical. Whether display progress information. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Feature Files from a Specified Folder or File Paths — ifcb_read_features","text":"named list data frames, element corresponds feature file read feature_files. list named base names feature files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Feature Files from a Specified Folder or File Paths — ifcb_read_features","text":"","code":"if (FALSE) { # \\dontrun{ # Read feature files from a folder features <- ifcb_read_features(\"path/to/feature_folder\")  # Read only multiblob feature files multiblob_features <- ifcb_read_features(\"path/to/feature_folder\", multiblob = TRUE)  # Read feature files from a list of file paths features <- ifcb_read_features(c(\"path/to/file1.csv\", \"path/to/file2.csv\")) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"function reads IFCB instrument settings information files (.hdr) specified directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"","code":"ifcb_read_hdr_data(   hdr_files,   gps_only = FALSE,   verbose = TRUE,   hdr_folder = deprecated() )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"hdr_files character string specifying path feature files folder path. gps_only logical value indicating whether include GPS information (latitude longitude). Default FALSE. verbose logical value indicating whether print progress messages. Default TRUE. hdr_folder  Use hdr_files instead.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"data frame sample names, GPS latitude, GPS longitude, optionally timestamps.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_hdr_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads HDR Data from IFCB HDR Files — ifcb_read_hdr_data","text":"","code":"if (FALSE) { # \\dontrun{ # Extract all HDR data hdr_data <- ifcb_read_hdr_data(\"path/to/data\") print(hdr_data)  # Extract only GPS data gps_data <- ifcb_read_hdr_data(\"path/to/data\", gps_only = TRUE) print(gps_data) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Summarize Classified IFCB Data — ifcb_read_summary","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"function reads MATLAB .mat file containing aggregated classified IFCB (Imaging FlowCytobot) data generated countcells_allTBnew_user_training function ifcb-analysis repository (Sosik Olson 2007), list classified data generated ifcb_summarize_class_counts. returns data frame species counts optionally biovolume information based specified thresholds.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"","code":"ifcb_read_summary(   summary,   hdr_directory = NULL,   biovolume = FALSE,   threshold = \"opt\" )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"summary character string specifying path .mat summary file list generated ifcb_summarize_class_counts. hdr_directory character string specifying path directory containing header (.hdr) files. Default NULL. biovolume logical indicating whether file contains biovolume data. Default FALSE. threshold character string specifying threshold type counts biovolume. Options \"opt\" (default), \"adhoc\", \"none\".","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"data frame containing summary information including file list, volume analyzed, species counts, optionally biovolume, metadata.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_read_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Summarize Classified IFCB Data — ifcb_read_summary","text":"","code":"if (FALSE) { # \\dontrun{ summary_data <- ifcb_read_summary(\"path/to/summary_file.mat\", biovolume = TRUE, threshold = \"opt\") print(summary_data) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"function replaces target class ID new ID MATLAB classlist files, generated code ifcb-analysis repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"","code":"ifcb_replace_mat_values(   manual_folder,   out_folder,   target_id,   new_id,   column_index = 1,   do_compression = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"manual_folder character string specifying path folder containing MAT classlist files updated. out_folder character string specifying path folder updated MAT classlist files saved. target_id target class ID replaced. new_id new class ID replace target ID. column_index integer value specifying classlist column edit. Default 1 (manual). do_compression logical value indicating whether compress .mat file. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"function return value; updates classlist files specified directory.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"function requires python interpreter installed. required python packages can installed virtual environment using ifcb_py_install.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_replace_mat_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Values in MATLAB Classlist — ifcb_replace_mat_values","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a python session if not already set up ifcb_py_install()  # Replace class ID 99 with 1 in .mat classlist files ifcb_replace_mat_values(\"output/manual\", \"output/manual\", 99, 1, column_index = 1) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_run_image_gallery.html","id":null,"dir":"Reference","previous_headings":"","what":"Run IFCB Image Gallery — ifcb_run_image_gallery","title":"Run IFCB Image Gallery — ifcb_run_image_gallery","text":"Launches Shiny application provides interactive interface browsing managing IFCB (Imaging FlowCytobot) image galleries.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_run_image_gallery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run IFCB Image Gallery — ifcb_run_image_gallery","text":"","code":"ifcb_run_image_gallery()"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_run_image_gallery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run IFCB Image Gallery — ifcb_run_image_gallery","text":"return value. function launches Shiny application interactive image browsing management.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_run_image_gallery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run IFCB Image Gallery — ifcb_run_image_gallery","text":"Users can specify folder containing .png images, navigate images, select unselect images, download list selected images. feature particularly useful quality control annotated images. downloaded list images app can also uploaded filter view selected images.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_run_image_gallery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run IFCB Image Gallery — ifcb_run_image_gallery","text":"","code":"if (FALSE) { # \\dontrun{ # Run the IFCB image gallery Shiny app ifcb_run_image_gallery() } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"function calculates aggregated biovolumes carbon content Imaging FlowCytobot (IFCB) samples based biovolume information feature files. Images grouped classes either based MATLAB classification manually annotation files, generated code ifcb-analysis repository (Sosik Olson 2007). Biovolumes converted carbon according Menden-Deuer Lessard 2000 individual regions interest (ROI), different conversion factors applied diatoms non-diatom protist. provided, also incorporates sample volume data HDR files compute biovolume carbon content per liter sample.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"","code":"ifcb_summarize_biovolumes(   feature_folder,   mat_folder,   class2use_file = NULL,   hdr_folder = NULL,   micron_factor = 1/3.4,   diatom_class = \"Bacillariophyceae\",   marine_only = FALSE,   threshold = \"opt\",   feature_recursive = TRUE,   mat_recursive = TRUE,   hdr_recursive = TRUE,   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"feature_folder Path folder containing feature files (e.g., CSV format). mat_folder Path folder containing class manual MATLAB files. class2use_file character string specifying path file containing class2use variable (default NULL). needed summarizing manual results. hdr_folder Path folder containing HDR files (optional). micron_factor Conversion factor microns per pixel (default: 1/3.4). diatom_class string vector diatom class names World Register Marine Species (WoRMS). Default \"Bacillariophyceae\". marine_only Logical. TRUE, restricts WoRMS search marine taxa . Default FALSE. threshold Threshold classification (default: \"opt\"). feature_recursive Logical. TRUE, function search feature files recursively within feature_folder. Default TRUE. mat_recursive Logical. TRUE, function search MATLAB files recursively within mat_folder. Default TRUE. hdr_recursive Logical. TRUE, function search HDR files recursively within hdr_folder (provided). Default TRUE. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"data frame summarizing aggregated biovolume carbon content per class per sample. Columns include 'sample', 'classifier', 'class', 'biovolume_mm3', 'carbon_ug', 'ml_analyzed', 'biovolume_mm3_per_liter', 'carbon_ug_per_liter'.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"function performs following steps: Extracts biovolumes carbon content feature MATLAB files using ifcb_extract_biovolumes. Optionally incorporates volume data HDR files calculate volume analyzed per sample. Computes biovolume carbon content per liter sample analyzed.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"Menden-Deuer Susanne, Lessard Evelyn J., (2000), Carbon volume relationships dinoflagellates, diatoms, protist plankton, Limnology Oceanography, 3, doi: 10.4319/lo.2000.45.3.0569. Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_biovolumes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Biovolumes and Carbon Content from IFCB Data — ifcb_summarize_biovolumes","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: ifcb_summarize_biovolumes(\"path/to/features\", \"path/to/mat\", hdr_folder = \"path/to/hdr\") } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"function summarizes class results series classifier output files returns summary data list.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"","code":"ifcb_summarize_class_counts(classpath_generic, hdr_folder, year_range)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"classpath_generic Character string specifying location classifier output files. path include 'xxxx' place 4-digit year (e.g., 'classxxxx_v1/'). hdr_folder Character string specifying directory data (hdr files) located. can URL web services full path local files. year_range Numeric vector specifying range years (e.g., 2013:2014) process.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"list containing following elements: class2useTB Classes used TreeBagger classifier. classcountTB Counts class considering target placed winning class. classcountTB_above_optthresh Counts class considering classifications optimal threshold maximum accuracy. ml_analyzedTB Volume analyzed file. mdateTB Dates associated file. filelistTB List files processed. classpath_generic generic classpath provided input. classcountTB_above_adhocthresh (optional) Counts class considering classifications adhoc threshold. adhocthresh (optional) adhoc threshold used classification.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_class_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Cells from TreeBagger Classifier Output — ifcb_summarize_class_counts","text":"","code":"if (FALSE) { # \\dontrun{ ifcb_summarize_class_counts('C:/work/IFCB/user_training_test_data/class/classxxxx_v1/',                             'C:/work/IFCB/user_training_test_data/data/', 2014) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_counts","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_counts","text":"function summarizes number images per class sample timestamps, optionally retrieves GPS positions, IFCB information using ifcb_read_hdr_data ifcb_convert_filenames functions.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_counts","text":"","code":"ifcb_summarize_png_counts(   png_folder,   hdr_folder = NULL,   sum_level = \"sample\",   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_counts","text":"png_folder character string specifying path main directory containing subfolders (classes) .png images. hdr_folder character string specifying path directory containing .hdr files. Default NULL. sum_level character string specifying level summarization. Options: \"sample\" (default) \"class\". verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_counts","text":"sum_level \"sample\", returns data frame columns: sample, ifcb_number, class_name, n_images, gpsLatitude, gpsLongitude, timestamp, year, month, day, time, roi_numbers. sum_level \"class\", returns data frame columns: class_name, n_images.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_counts","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: # Assuming the following directory structure: # path/to/png_folder/ # |- class1/ # |  |- sample1_00001.png # |  |- sample1_00002.png # |  |- sample2_00001.png # |- class2/ # |  |- sample1_00003.png # |  |- sample3_00001.png  png_folder <- \"path/to/png_folder\" hdr_folder <- \"path/to/hdr_folder\" # This folder should contain corresponding .hdr files  # Summarize by sample summary_sample <- ifcb_summarize_png_counts(png_folder,                                           hdr_folder,                                           sum_level = \"sample\",                                           verbose = TRUE) print(summary_sample)  # Summarize by class summary_class <- ifcb_summarize_png_counts(png_folder,                                          hdr_folder,                                          sum_level = \"class\",                                          verbose = TRUE) print(summary_class) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"function deprecated replaced function accurate name: ifcb_summarize_png_counts. function summarizes number images per class sample timestamps, optionally retrieves GPS positions, IFCB information using ifcb_read_hdr_data ifcb_convert_filenames functions.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"","code":"ifcb_summarize_png_data(   png_folder,   hdr_folder = NULL,   sum_level = \"sample\",   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"png_folder character string specifying path main directory containing subfolders (classes) .png images. hdr_folder character string specifying path directory containing .hdr files. Default NULL. sum_level character string specifying level summarization. Options: \"sample\" (default) \"class\". verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"sum_level \"sample\", returns data frame columns: sample, ifcb_number, class_name, n_images, gpsLatitude, gpsLongitude, timestamp, year, month, day, time, roi_numbers. sum_level \"class\", returns data frame columns: class_name, n_images.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Image Counts by Class and Sample — ifcb_summarize_png_data","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: # Assuming the following directory structure: # path/to/png_folder/ # |- class1/ # |  |- sample1_00001.png # |  |- sample1_00002.png # |  |- sample2_00001.png # |- class2/ # |  |- sample1_00003.png # |  |- sample3_00001.png  png_folder <- \"path/to/png_folder\" hdr_folder <- \"path/to/hdr_folder\" # This folder should contain corresponding .hdr files  # Summarize by sample summary_sample <- ifcb_summarize_png_data(png_folder,                                           hdr_folder,                                           sum_level = \"sample\",                                           verbose = TRUE) print(summary_sample)  # Summarize by class summary_class <- ifcb_summarize_png_data(png_folder,                                          hdr_folder,                                          sum_level = \"class\",                                          verbose = TRUE) print(summary_class) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize PNG Image Metadata — ifcb_summarize_png_metadata","title":"Summarize PNG Image Metadata — ifcb_summarize_png_metadata","text":"function processes IFCB data reading images, matching corresponding header feature files, joining single dataframe. function may useful preparing metadata files Ecotaxa submission.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize PNG Image Metadata — ifcb_summarize_png_metadata","text":"","code":"ifcb_summarize_png_metadata(   png_folder,   feature_folder = NULL,   hdr_folder = NULL )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize PNG Image Metadata — ifcb_summarize_png_metadata","text":"png_folder Character. file path folder containing PNG images. feature_folder Character. file path folder containing feature files (optional). hdr_folder Character. file path folder containing header files (optional).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize PNG Image Metadata — ifcb_summarize_png_metadata","text":"dataframe joins image data, header data, feature data based sample roi number.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_summarize_png_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize PNG Image Metadata — ifcb_summarize_png_metadata","text":"","code":"if (FALSE) { # \\dontrun{ png_folder <- \"path/to/pngs\" feature_folder <- \"path/to/features\" hdr_folder <- \"path/to/hdr_data\" result_df <- ifcb_summarize_png_metadata(png_folder, feature_folder, hdr_folder) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"function reads IFCB header file extract sample run time inhibittime, returns associated estimate sample volume analyzed (milliliters). function assumes standard IFCB configuration sample syringe operating 0.25 mL per minute. IFCB instruments 007 higher (except 008). R equivalent function IFCB_volume_analyzed ifcb-analysis repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"","code":"ifcb_volume_analyzed(hdr_file, hdrOnly_flag = FALSE, flowrate = 0.25)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"hdr_file character vector specifying path(s) one .hdr files URLs. hdrOnly_flag optional flag indicating whether skip ADC file estimation (default FALSE). flowrate Milliliters per minute syringe pump (default 0.25).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"numeric vector containing estimated sample volume analyzed header file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Volume Analyzed from IFCB Header File — ifcb_volume_analyzed","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Estimate volume analyzed from an IFCB header file hdr_file <- \"path/to/IFCB_hdr_file.hdr\" ml_analyzed <- ifcb_volume_analyzed(hdr_file) print(ml_analyzed) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"function reads IFCB ADC file extract sample run time inhibittime, returns associated estimate sample volume analyzed (milliliters). function assumes standard IFCB configuration sample syringe operating 0.25 mL per minute. IFCB instruments 007 higher (except 008). R equivalent function IFCB_volume_analyzed_fromADC ifcb-analysis repository (Sosik Olson 2007).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"","code":"ifcb_volume_analyzed_from_adc(adc_file)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"adc_file character vector specifying path(s) one .adc files URLs.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"list containing: ml_analyzed: numeric vector estimated sample volume analyzed ADC file. inhibittime: numeric vector inhibittime values extracted ADC files. runtime: numeric vector runtime values extracted ADC files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216.","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_volume_analyzed_from_adc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Volume Analyzed from IFCB ADC File — ifcb_volume_analyzed_from_adc","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Estimate volume analyzed from an IFCB ADC file adc_file <- \"path/to/IFCB_adc_file.csv\" adc_info <- ifcb_volume_analyzed_from_adc(adc_file) print(adc_info$ml_analyzed) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"function identifies sub-basin set latitude longitude points belong , using user-specified default shapefile. default shapefile includes Baltic Sea, Kattegat, Skagerrak basins included iRfcb package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"","code":"ifcb_which_basin(latitudes, longitudes, plot = FALSE, shape_file = NULL)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"latitudes numeric vector latitude points. longitudes numeric vector longitude points. plot boolean indicating whether plot points along sea basins. Default FALSE. shape_file absolute path custom polygon shapefile WGS84 (EPSG:4326) represents sea basin. Defaults Baltic Sea, Kattegat, Skagerrak basins included iRfcb package.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"vector indicating basin point belongs , ggplot object plot = TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"function reads pre-packaged shapefile Baltic Sea, Kattegat, Skagerrak basins iRfcb package default, user-supplied shapefile provided. shapefiles originate SHARK (https://shark.smhi.se/). sets CRS, transforms CRS WGS84 (EPSG:4326) necessary, checks given points fall within specified sea basin. Optionally, plots points sea basin polygons together.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_which_basin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check in which Baltic sea basin the points are in points_in_the_baltic <- ifcb_which_basin(latitudes, longitudes) print(points_in_the_baltic) #> [1] \"13 - Arkona Basin\"   \"12 - Bornholm Basin\" \"16 - Kattegat\"       #> [4] \"17 - Skagerrak\"       # Plot the points and the basins ifcb_which_basin(latitudes, longitudes, plot = TRUE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"function creates zip archive containing specified files directories manually annotated IFCB images, organized structured format suitable distribution storage. MATLAB files generated ifcb-analysis repository (Sosik Olson 2007). zip archive can used submit IFCB data repositories like SMHI IFCB Plankton Image Reference Library (Torstensson et al., 2024).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"","code":"ifcb_zip_matlab(   manual_folder,   features_folder,   class2use_file,   zip_filename,   data_folder = NULL,   readme_file = NULL,   matlab_readme_file = NULL,   email_address = \"\",   version = \"\",   print_progress = TRUE,   feature_recursive = TRUE,   manual_recursive = FALSE,   data_recursive = TRUE,   quiet = FALSE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"manual_folder directory containing .mat files included zip archive. features_folder directory containing .csv files, including subfolders, included zip archive. class2use_file path file (class2use_file) renamed included 'config' directory zip archive. zip_filename filename zip archive created. data_folder Optionally, directory containing additional data files (.roi, .adc, .hdr) included zip archive. readme_file Optionally, path README file updated metadata included zip archive. matlab_readme_file Optionally, path MATLAB README file whose content appended end README file zip archive. email_address email address included README file contact information. version Optionally, version number included README file. print_progress logical value indicating whether print progress bar. Default TRUE. feature_recursive Logical. TRUE, function search feature files recursively within feature_folder. Default TRUE. manual_recursive Logical. TRUE, function search MATLAB files recursively within manual_folder. Default FALSE. data_recursive Logical. TRUE, function search data files recursively within data_folder (provided). Default TRUE. quiet Logical. TRUE, suppresses messages progress completion zip process. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"return value. function creates zip archive containing specified files directories.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"function performs following operations: Lists .mat files manual_folder. Lists .csv files features_folder (including subfolders). Lists .roi, .adc, .hdr files data_folder provided. Copies listed files temporary directories (manual_dir, features_dir, data_dir, config_dir). Renames copies class2use_file config_dir class2use.mat. Updates readme_file metadata (provided) appends PNG image statistics MATLAB README content. Creates manifest file (MANIFEST.txt) listing files zip archive. Creates zip archive (zip_filename) containing copied updated files. Cleans temporary directories creating zip archive.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"Sosik, H. M. Olson, R. J. (2007), Automated taxonomic classification phytoplankton sampled imaging--flow cytometry. Limnol. Oceanogr: Methods 5, 204–216. Torstensson, Anders; Skjevik, Ann-Turi; Mohlin, Malin; Karlberg, Maria; Karlson, Bengt (2024). SMHI IFCB Plankton Image Reference Library. SciLifeLab. Dataset. doi:10.17044/scilifelab.25883455","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_matlab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Zip Archive of Manual MATLAB Files — ifcb_zip_matlab","text":"","code":"if (FALSE) { # \\dontrun{ ifcb_zip_matlab(\"path/to/manual_files\", \"path/to/feature_files\",                  \"path/to/class2use.mat\", \"output_zip_archive.zip\",                  data_folder = \"path/to/data_files\",                  readme_file = system.file(\"exdata/README-template.md\", package = \"iRfcb\"),                  matlab_readme_file = system.file(\"inst/exdata/MATLAB-template.md\",                                                   package = \"iRfcb\"),                  email_address = \"example@email.com\",                  version = \"1.0\") } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip PNG Folders — ifcb_zip_pngs","title":"Zip PNG Folders — ifcb_zip_pngs","text":"function zips directories containing .png files optionally includes README MANIFEST files. can also split resulting zip file smaller parts exceeds specified size. zip archive can used submit IFCB data repositories like SMHI IFCB Plankton Image Reference Library (Torstensson et al., 2024).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip PNG Folders — ifcb_zip_pngs","text":"","code":"ifcb_zip_pngs(   png_folder,   zip_filename,   readme_file = NULL,   email_address = \"\",   version = \"\",   print_progress = TRUE,   include_txt = FALSE,   split_zip = FALSE,   max_size = 500,   quiet = FALSE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip PNG Folders — ifcb_zip_pngs","text":"png_folder directory containing subdirectories .png files. zip_filename name zip file create. readme_file Optional path README file inclusion zip package. email_address Optional email address include README file. version Optional version information include README file. print_progress logical value indicating whether print progress bar. Default TRUE. include_txt logical value indicating whether include text (.txt, .tsv .csv) files located subdirectories. Default FALSE. split_zip logical value indicating whether split zip file smaller parts size exceeds max_size. Default FALSE. max_size maximum size (MB) zip file gets split. used split_zip TRUE. Default 500 MB. quiet Logical. TRUE, suppresses messages progress completion zip process. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip PNG Folders — ifcb_zip_pngs","text":"function return value; creates zip archive optionally splits smaller files specified.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Zip PNG Folders — ifcb_zip_pngs","text":"Torstensson, Anders; Skjevik, Ann-Turi; Mohlin, Malin; Karlberg, Maria; Karlson, Bengt (2024). SMHI IFCB Plankton Image Reference Library. SciLifeLab. Dataset. doi:10.17044/scilifelab.25883455","code":""},{"path":[]},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/ifcb_zip_pngs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip PNG Folders — ifcb_zip_pngs","text":"","code":"if (FALSE) { # \\dontrun{ # Zip all subdirectories in the 'images' folder with a README file ifcb_zip_pngs(\"path/to/images\",              \"images.zip\",              readme_file = system.file(\"exdata/README-template.md\", package = \"iRfcb\"),              email_address = \"example@example.com\",              version = \"1.0\")  # Zip all subdirectories in the 'images' folder without a README file ifcb_zip_pngs(\"path/to/images\", \"images.zip\") } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/read_hdr_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","title":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","text":"function reads HDR file extracts relevant lines containing parameters values.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/read_hdr_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","text":"","code":"read_hdr_file(file)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/read_hdr_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","text":"file character string specifying path HDR file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/read_hdr_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Read Individual Files and Extract Relevant Lines — read_hdr_file","text":"data frame columns: parameter, value, file.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/retrieve_worms_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve WoRMS Records with Retry Mechanism — retrieve_worms_records","title":"Retrieve WoRMS Records with Retry Mechanism — retrieve_worms_records","text":"helper function deprecated replaced main function: ifcb_match_taxon_name. helper function attempts retrieve WoRMS records using provided taxa names. retries operation error occurs, specified number attempts.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/retrieve_worms_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve WoRMS Records with Retry Mechanism — retrieve_worms_records","text":"","code":"retrieve_worms_records(   taxa_names,   max_retries = 3,   sleep_time = 10,   marine_only = FALSE,   verbose = TRUE )"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/retrieve_worms_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve WoRMS Records with Retry Mechanism — retrieve_worms_records","text":"taxa_names character vector taxa names retrieve records . max_retries integer specifying maximum number attempts retrieve records. sleep_time numeric value indicating number seconds wait retry attempts. marine_only Logical. TRUE, restricts search marine taxa . Default FALSE. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/retrieve_worms_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve WoRMS Records with Retry Mechanism — retrieve_worms_records","text":"list WoRMS records NULL retrieval fails maximum number attempts.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/split_large_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Large Zip File into Smaller Parts — split_large_zip","title":"Split Large Zip File into Smaller Parts — split_large_zip","text":"helper function takes existing zip file, extracts contents, splits smaller zip files without splitting subfolders.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/split_large_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Large Zip File into Smaller Parts — split_large_zip","text":"","code":"split_large_zip(zip_file, max_size = 500, quiet = FALSE)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/split_large_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Large Zip File into Smaller Parts — split_large_zip","text":"zip_file path large zip file. max_size maximum size (MB) split zip file. Default 500 MB. quiet Logical. TRUE, suppresses messages progress completion zip process. Default FALSE.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/split_large_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Large Zip File into Smaller Parts — split_large_zip","text":"function return value; creates multiple smaller zip files.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/split_large_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Large Zip File into Smaller Parts — split_large_zip","text":"","code":"if (FALSE) { # \\dontrun{ # Split an existing zip file into parts of up to 500 MB split_large_zip(\"large_file.zip\", max_size = 500) } # }"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/summarize_TBclass.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize TreeBagger Classifier Results — summarize_TBclass","title":"Summarize TreeBagger Classifier Results — summarize_TBclass","text":"function reads TreeBagger classifier result file (.mat format) summarizes number targets class based classification scores thresholds.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/summarize_TBclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize TreeBagger Classifier Results — summarize_TBclass","text":"","code":"summarize_TBclass(classfile, adhocthresh = NULL)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/summarize_TBclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize TreeBagger Classifier Results — summarize_TBclass","text":"classfile Character string specifying path TreeBagger classifier result file (.mat format). adhocthresh Numeric vector specifying adhoc thresholds class. NULL (default), adhoc thresholding applied. single numeric value provided, applied classes.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/summarize_TBclass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize TreeBagger Classifier Results — summarize_TBclass","text":"list containing three elements: classcount Numeric vector counts class based winning class assignment. classcount_above_optthresh Numeric vector counts class optimal threshold maximum accuracy. classcount_above_adhocthresh Numeric vector counts class specified adhoc thresholds (provided).","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"function converts biovolume microns^3 carbon picograms large diatoms (> 2000 micron^3) according Menden-Deuer Lessard 2000. formula used : log pgC cell^-1 = log + b * log V (um^3), log = -0.933 b = 0.881 diatoms > 3000 um^3.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"","code":"vol2C_lgdiatom(volume)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"volume numeric vector biovolume measurements microns^3.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"numeric vector carbon measurements picograms.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_lgdiatom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Biovolume to Carbon for Large Diatoms — vol2C_lgdiatom","text":"","code":"# Volumes in microns^3 volume <- c(5000, 10000, 20000)  # Convert biovolume to carbon for large diatoms vol2C_lgdiatom(volume) #> [1] 211.7350 389.9420 718.1372"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"function converts biovolume microns^3 carbon picograms protists besides large diatoms (> 3000 micron^3) according Menden-Deuer Lessard 2000. formula used : log pgC cell^-1 = log + b * log V (um^3), log = -0.665 b = 0.939.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"","code":"vol2C_nondiatom(volume)"},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"volume numeric vector biovolume measurements microns^3.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"numeric vector carbon measurements picograms.","code":""},{"path":"https://europeanifcbgroup.github.io/iRfcb/reference/vol2C_nondiatom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Biovolume to Carbon for Non-Diatom Protists — vol2C_nondiatom","text":"","code":"# Volumes in microns^3 volume <- c(5000, 10000, 20000)  # Convert biovolume to carbon for non-diatom protists vol2C_nondiatom(volume) #> [1]  643.1804 1233.1048 2364.1072"}]
